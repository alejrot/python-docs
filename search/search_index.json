{"config":{"lang":["es"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Python Docs","text":"<p>Mis apuntes en espa\u00f1ol acerca del lenguaje Python y algunos de sus m\u00f3dulos y paquetes.</p> <p>Sitio en construcci\u00f3n</p> <p>Todos los contenidos de este sitio est\u00e1n sujetos a correcci\u00f3n y reordenamiento.</p>"},{"location":"#contenidos","title":"Contenidos","text":"<p>{{ pagetree(all) }}    </p>"},{"location":"tags/","title":"Etiquetas","text":"<p>Las etiquetas de contenidos marcados en el sitio aparecer\u00e1n a continuaci\u00f3n.</p>"},{"location":"anexos/","title":"ANEXOS","text":"<p>En esta secci\u00f3n se agregan aquellos contenidos auxiliares que son dif\u00edciles de encasillar en secciones espec\u00edficas.</p>"},{"location":"anexos/#contenidos","title":"Contenidos","text":"<p>{{ pagetree(siblings) }}</p>"},{"location":"anexos/permisos/","title":"Permisos de usuario","text":"","tags":["Archivos","Carpetas"]},{"location":"anexos/permisos/#permisos-por-acciones","title":"Permisos por acciones","text":"<p>Los permisos de usuario se asignan mediante por un numero representado en sistema binario de tres digitos. </p> <p>Cada d\u00edgito es una composici\u00f3n de booleanos (valores binarios) que otorgan permisos para leer (read), escribir (write)  y ejecutar (execute),  en ese mismo orden: <code>r-w-x</code>. El n\u00famero binario puede ser convertido a octal, decimal o hexadecimal para una lectura m\u00e1s f\u00e1cil.</p> <p>Los valores num\u00e9ricos equivalentes para cada permiso aslado son:</p> Permiso binario octal hexadecimal decimal Leer  (r) <code>0b100</code> <code>0o4</code> <code>0h4</code> <code>4</code> Escribir (w) <code>0b010</code> <code>0o2</code> <code>0h2</code> <code>2</code> Ejecutar (x) <code>0b001</code> <code>0o1</code> <code>0h1</code> <code>1</code> <p>Los numeros de los permisos se construyen combinando l\u00f3gicamente los n\u00fameros previos. Esto equivale en la pr\u00e1ctica a sumar los n\u00fameros equivalentes para cada permiso.</p> <p>Ejemplos:</p> Permiso combinado binario octal hexadecimal decimal S\u00f3lo lectura (r) 0b100 0o4 0h4 4 Lectura y escritura (r+w) 0b110 0o6 0h6 6 S\u00f3lo ejecucion  (x) 0b001 0o1 0h1 1 Lectura, escritura y ejecucion  (r+w+x) 0b111 0o7 0h7 7","tags":["Archivos","Carpetas"]},{"location":"anexos/permisos/#permisos-para-usuarios","title":"Permisos para usuarios","text":"<p>Los digitos con los permisos se asignan con el siguiente orden de usuarios:</p> <ul> <li>usuario actual;</li> <li>grupo del usuario actual;</li> <li>todos los usuarios.</li> </ul> <p>Notacion resumida:</p> Usuario Grupo Todos <code>rwx</code> <code>rwx</code> <code>rwx</code> <p>Usuario root</p> <p>El usuario administrador o ra\u00edz (root) del sistema siempre tiene todos los derechos posibles, por ello no se le asignan permisos especificos.</p>","tags":["Archivos","Carpetas"]},{"location":"anexos/permisos/#ejemplos","title":"Ejemplos","text":"<p>Ejemplo 1: Permisos diferenciados</p> <ul> <li>usuario propietario con todos los permisos; </li> <li>grupo del propietario con lectura y escritura;  </li> <li>accesos de s\u00f3lo lectura para terceros.</li> </ul> <p>N\u00famero permisos:</p> sistema numero permisos binario <code>0o111110100</code> octal <code>0o764</code> hexadecimal <code>0x764</code> decimal <code>764</code> <p>Ejemplo 2: S\u00f3lo ejecuci\u00f3n para todos</p> <p>N\u00famero permisos:</p> sistema numero permisos binario <code>0o001001001</code> octal <code>0o111</code> hexadecimal <code>0x111</code> decimal <code>111</code> <p>Ejemplo 3: Todos los permisos para todos los usuarios (mala pr\u00e1ctica)</p> <p>N\u00famero permisos:</p> sistema numero permisos binario <code>0o111111111</code> octal <code>0o777</code> hexadecimal <code>0x777</code> decimal <code>777</code>","tags":["Archivos","Carpetas"]},{"location":"anexos/redes/","title":"IP y Redes","text":"<p>En esta secci\u00f3n se exploran las conexiones de red, algunos de sus protocolos m\u00e1s usados, etc.</p>"},{"location":"anexos/redes/#contenidos","title":"Contenidos","text":"<p>{{ pagetree(siblings)}}</p>"},{"location":"anexos/redes/ip/","title":"Protocolo IP","text":""},{"location":"anexos/redes/ip/#introduccion","title":"Introducci\u00f3n","text":"<p>El protocolo IP es la base para implementar  todo tipo de servicios, tanto en local como en remoto: paginas web, streamings de audio y video, correos electr\u00f3nicos, transferencia de archivos, etc.</p> <p>La informaci\u00f3n a transmitir entre las partes no se env\u00eda entera sino que es partida en peque\u00f1os trozos  llamados paquetes o packets.</p>"},{"location":"anexos/redes/ip/#direccion-ip","title":"Direcci\u00f3n IP","text":"<p>En este protocolo cada equipo dispone de un indicador num\u00e9rico configurable conocido como direcci\u00f3n IP. La forma m\u00e1s habitual de indicar la direcci\u00f3n IP es mediante la notaci\u00f3n de cuatro octetos (<code>x.x.x.x</code>) donde cada <code>x</code> es un n\u00famero entero entre el 0 y el 255.</p> <p>La IP <code>0.0.0.0</code> se usa como un comod\u00edn, en tanto que la IP <code>127.0.0.1</code> siempre apunta al equipo actual.</p>"},{"location":"anexos/redes/ip/#puertos","title":"Puertos","text":"<p>Un mismo equipo soporta m\u00faltiples servicios basados en IP pero diferenciados por un n\u00famero entero car\u00e1cter\u00edstico, que es llamado puerto. Este n\u00famero est\u00e1 comprendido entre el 1 y el 65535.</p> <p>Algunos puertos de uso habitual en desarrollo:</p> Puerto Uso 3306 bases de datos MySQL/MariaDB 5432 bases de datos PostgreSQL 5000 servicios de frontend (t\u00edpico) 8000 servicios de backend/webapps (t\u00edpico) <p>Puertos reservados</p> <p>Los primeros 1023 puertos son usualmente reservados para protocolos estandarizados: 80 para HTTP, 443 para SSH y HTTPS, etc.</p> <p>Puertos din\u00e1micos</p> <p>Los puertos desde el 49152 en  adelante son usados por los clientes de manera temporal.</p>"},{"location":"anexos/redes/ip/#modelo-cliente-servidor","title":"Modelo cliente - servidor","text":"<p>El protocolo IP se basa en el modelo cliente-servidor. El cliente es el equipo o programa que pide conectarse a un servicio, en tanto que el servidor es un equipo o programa que proporciona un servicio y para ello queda \"escuchando\", esto es que queda en espera a que algun cliente intente conectarse y entonces comienza la comunicaci\u00f3n entre ambos, la cual es bidireccional.</p> <p>El servidor debe tener una direcci\u00f3n IP est\u00e1tica para poder ser accedido, en tanto que el cliente puede tener direcci\u00f3n din\u00e1mica o est\u00e1tica. </p> <p>Localhost</p> <p>La IP <code>127.0.0.1</code> representa al equipo del cliente y se la llama habitualmente <code>localhost</code>. Esta IP sirve para realizar la conexi\u00f3n con servicios que se ejecutan desde el mismo sistema del cliente. </p>"},{"location":"anexos/redes/tcp_udp/","title":"Pol\u00edticas de transmisi\u00f3n","text":"<p>Hay dos grande familias de conexiones basadas en IP que son TCP y UDP. Estas se diferencian en las pol\u00edticas de entrega de paquetes de informaci\u00f3n: si hay confirmaci\u00f3n de recepci\u00f3n de cada paquete, si hay pedido de comunicaci\u00f3n previo a la transferencia, etc.</p>"},{"location":"anexos/redes/tcp_udp/#tcp","title":"TCP","text":"<p>TCP (Transmission Control Protocol) est\u00e1 pensado para asegurar la transimisi\u00f3n de los paquetes de datos entre el cliente y el servidor. Los servicios de sitios web, correos electr\u00f3nicos, tranferencia de archivos, interacciones con bases de datos, etc. se basan en TCP. </p> <p>La conexi\u00f3n TCP entre cliente y servidor se realiza en tres pasos (\"3-way handshake\"):</p> <ol> <li>el cliente env\u00eda un paquete al servidor pidiendo la conexi\u00f3n;</li> <li>el servidor responde con un paquete aceptando o rechazando la conexi\u00f3n;</li> <li>el cliente responde al paquete de respuesta con su propia confirmaci\u00f3n, el paquete <code>ACK</code> (acknowledged).</li> </ol> <p>Si la conexi\u00f3n fue aceptada, ambas partes pueden enviarse paquetes de informaci\u00f3n entre s\u00ed y su llegada debe ser confirmada:</p> <ul> <li>una de las partes env\u00eda sus paquetes de datos por la red;</li> <li>su contraparte responde con un paquete <code>ACK</code> por cada paquete recibido en tiempo real;</li> <li>si el emisor no recibe el <code>ACK</code> de alguno de los paquetes que envi\u00f3 dentro del tiempo limite preestablecido entonces reenv\u00eda ese paquete particular.  </li> </ul> <p>Este mecanismo asegura la llegada de los paquetes a destino pero tambi\u00e9n puede ralentizar dram\u00e1ticamente la velocidad de transferencia de datos cuando la conexi\u00f3n es inestable.</p> <p>Ventana deslizante</p> <p>Tanto el cliente como el servidor implementan el monitoreo de los paquetes enviados mediante un sistema de ventana deslizante con ancho limitado que funciona como una cola (FIFO): si el paquete mas antiguo de la ventana debe ser reenviado los m\u00e1s recientes ya enviados no pueden ser reemplazados por otros paquetes pendientes. </p> <p>La desconexi\u00f3n se hace en cuatro pasos (\"four-way handshake\") dando lugar a una \"desconexion amable\":</p> <ol> <li>el cliente env\u00eda el paquete <code>FIN</code> al servidor;</li> <li>el servidor responde con <code>ACK</code>;</li> <li>el servidor env\u00eda su propio paquete <code>FIN</code> al cliente;</li> <li>el cliente responde con <code>ACK</code>.</li> </ol>"},{"location":"anexos/redes/tcp_udp/#udp","title":"UDP","text":"<p>UDP (User Datagram Protocol) est\u00e1 pensado para transmitir los paquetes de datos en tiempo real, sin asegurar su llegada a destino: no hay paquete de respuesta ni tampoco reenv\u00edo de paquetes.</p> <p>En este protocolo hay dos variantes de uso, que son los datagramas conectados y los datagramas sin conexi\u00f3n:</p> <ul> <li>en el caso de los datagramas conectados el cliente pide conectarse al servidor y este responde. De esta forma el cliente puede saber que el servidor ha estado disponible, al menos al comienzo;</li> <li>en el caso de los datagramas desconectados no hay intento de conexi\u00f3n previo a la transmisi\u00f3n, por lo cual el emisor no sabe si hay al menos Esta opci\u00f3n es usada por ejemplo para emitir streams en vivo de audio y video.</li> </ul>"},{"location":"anexos/redes/tcp_udp/#referencias","title":"Referencias","text":"<p>Wikipedia - TCP</p> <p>Wikipedia - UDP</p>"},{"location":"archivos/","title":"Archivos","text":"<p>En esta secci\u00f3n se cubren aspectos b\u00e1sicos  sobre la interacci\u00f3n de las rutinas escritas en Python con distintos tipos de archivos.</p>"},{"location":"archivos/#contenidos","title":"Contenidos:","text":"<p>{{ pagetree(siblings) }}</p>"},{"location":"archivos/archivos/","title":"Interacci\u00f3n con Archivos","text":"<p>Python dispone de la funci\u00f3n de uso general <code>open()</code> para interactuar con los archivos del equipo, habilitando operaciones de lectura y de escritura.</p>","tags":["Archivos"]},{"location":"archivos/archivos/#apertura","title":"Apertura","text":"<p>Para trabajar con  un archivo podemos hacer:</p> Apertura archivos - cierre autom\u00e1tico<pre><code>with open(ruta_archivo, modo_apertura) as descriptor_archivo:\n    # Rutina de archivo\n    #...\n\n# Cierre autom\u00e1tico de archivo\n</code></pre> <p>El fin del indentado es interpretado como el cierre del archivo. Esto es as\u00ed por haber utilizado la cl\u00e1usula <code>with</code> antecediendo la apertura. Si en cambio se prefiere hacer el cierre manualmente se puede hacer:</p> <p>Apertura archivos - cierre manual<pre><code>descriptor_archivo = open(ruta_archivo, modo_apertura) \n# Rutina de archivo\n# ...\ndescriptor_archivo.close()  # cierre manual\n</code></pre> En este caso no se agrega indentado.</p> <p>El asignar una variable descriptora para el archivo permite usar los m\u00e9todos de Python para la manipulaci\u00f3n de archivos, esto se ver\u00e1 m\u00e1s adelante. </p> <p>Cierre de archivos</p> <p>El cierre de archivo es importante para asegurar el guardado de datos en el archivo, el cual puede fallar si el archivo no se cierra correctamente. Tambi\u00e9n permite liberar recursos del sistema operativo que, de otra manera, qeuedar\u00edan ocupados hasta el siguiente reinicio.</p> <p>Cierre autom\u00e1tico</p> <p>Muchos desarrolladores consideran una buena pr\u00e1ctica el uso de la cl\u00e1usula <code>with</code> para de esa manera asegurar el cierre de archivo tras su acceso. </p>","tags":["Archivos"]},{"location":"archivos/archivos/#modos-de-apertura","title":"Modos de Apertura","text":"<p>El modo de apertura del archivo puede ser:</p> Modo apertura Descripcion <code>r</code> read: leer <code>w</code> write: escribir <code>a</code> append: a\u00f1adir al final <code>x</code> creaci\u00f3n exclusiva: s\u00f3lo crea el archivo si \u00e9ste no existe <p>Si se a\u00f1ade el signo m\u00e1s (<code>+</code>) al modo de apertura se incluye la lectura \u00f3 modificacion, seg\u00fan corresponda. Por ejemplo <code>\"w+\"</code> permite escribir y tambi\u00e9n leer, en tanto que <code>r+</code> permite leer y modificar.</p> <p>File pointer</p> <p>Los descriptores de archivo incluyen un puntero o apuntador de archivo (file pointer) interno el cual apunta a alguno de los bytes o caracteres internos del archivo, funcionando como un \u00edndice. La posici\u00f3n de dicho apuntador depender\u00e1 del modo de apertura elegido, de las operaciones posteriores de lectura o de escritura, etc.</p> <p>La tabla completa con los permisos  es la siguiente:</p> Permisos r r+ w w+ a a+ leer escribir escribir tras buscar crear borrar <p>en tanto que la posici\u00f3n del apuntador  dentro del archivo es: </p> Apuntador r r+ w w+ a a+ posici\u00f3n al comienzo posici\u00f3n al final","tags":["Archivos"]},{"location":"archivos/archivos/#archivos-binarios","title":"Archivos binarios","text":"<p>Los archivos binarios representan cualquier tipo de contenido que no sea texto y pueden representar imagenes, audio, video, etc.</p> <p>A\u00f1adiendo la letra <code>b</code> a las opciones de apertura se indica la modalidad binaria de lectura o escritura, es decir los datos se leen y escriben en binario. Por ejemplo, para leer archivos binarios y poder modificarlos la etiqueta correspondiente es <code>rb+</code>. </p> <p>As\u00ed quedan los modos de apertura para los archivos binarios:</p> Modo apertura Descripcion <code>rb</code> read: leer <code>wb</code> write: escribir <code>ab</code> append: a\u00f1adir al final <code>xb</code> creaci\u00f3n exclusiva: s\u00f3lo crea el archivo si \u00e9ste no existe","tags":["Archivos"]},{"location":"archivos/archivos/#metodos-del-descriptor","title":"M\u00e9todos del descriptor","text":"<p>El descriptor de archivo incluye varios m\u00e9todos predefinidos para facilitar la manipulaci\u00f3n de los archivos y de su contenido.</p>","tags":["Archivos"]},{"location":"archivos/archivos/#close","title":"<code>close()</code>","text":"<p>Este m\u00e9todo es el usado para el cierre manual del archivo. Uso: </p> Cierre manual<pre><code>ruta = \"texto.txt\u201d\narchivo =  open(ruta, \"r\") \n# Rutina\n# ...\narchivo.close()    # necesario / prudente\n</code></pre> <p>Si se hace la apertura con el comando <code>with</code> el cierre manual no es necesario:</p> Cierre manual redundante<pre><code>ruta = \"texto.txt\u201d\nwith open(ruta, \"r\") as archivo: \n  # Rutina\n  # ...\n  archivo.close()    # redundante\n\n# cierre autom\u00e1tico\n</code></pre>","tags":["Archivos"]},{"location":"archivos/archivos/#read","title":"<code>read()</code>","text":"<p>El m\u00e9todo <code>read()</code> permite leer total o parcialmente el contenido del archivo.</p> <p>read() - Leer todo<pre><code>ruta = \"texto.txt\"\nwith open(ruta, \"r\") as archivo: \n  print( archivo.read() )   # lee TODO el contenido como texto\n</code></pre> Al m\u00e9todo se le puede indicar la cantidad de caracteres a leer cada vez entre los par\u00e9ntesis:</p> read() - Leer N caracteres<pre><code>ruta = \"texto.txt\"\nwith open(ruta, \"r\") as archivo:  # modo lectura\n  print( archivo.read(20) )   # lee los primeros 20 caracteres  \n  print( archivo.read(20) )   # lee los siguientes 20 caracteres\n</code></pre> <p>N\u00f3tese que cada nueva operaci\u00f3n de lectura comienza donde termin\u00f3 la anterior. Esto tiene que ver con el \"puntero de archivo\" que guarda dentro del descriptor de archivo esa informaci\u00f3n.</p>","tags":["Archivos"]},{"location":"archivos/archivos/#seek","title":"<code>seek()</code>","text":"<p>El m\u00e9todo <code>seek()</code> permite elegir el indice desde donde deben comenzar las operaciones de lectura o escritura. Afecta al file pointer interno.</p> seek() - argumentos<pre><code>archivo.seek(offset, whence)\n</code></pre> <p>Este m\u00e9todo tiene dos argumentos: <code>offset</code> indica la posici\u00f3n relativa del puntero interno en tanto que <code>whence</code> es el punto de referencia.</p> valor <code>whence</code> Referencia 0 Comienzo de archivo (valor predefinido) 1 Posici\u00f3n actual 2 Final de archivo <p>Por ejemplo, si se desea leer el contenido desde el caracter N\u00ba20 en adelante (repasar ejemplo previo) se puede hacer:</p> <p>seek() - Buscar caracter N-\u00e9simo<pre><code>ruta = \"texto.txt\u201d\nwith open(ruta, \"r\") as archivo:  # modo lectura\n  archivo.seek(20)            # modificacion del puntero del archivo  - equivale a 'seek(20,0)' \n  print( archivo.read() )   # lee los siguientes caracteres\n</code></pre> Este mismo m\u00e9todo permite reiniciar las operaciones de lectura sin necesidad de reapertura del archivo, colocando el \u00edndice cero:</p> seek() - Reiniciar lectura<pre><code>  #....\n  archivo.seek(0)            # puntero del archivo al comienzo de datos - equivale a 'seek(0,0)' \n  print( archivo.read() )   # lee los siguientes caracteres\n</code></pre> <p>Tambi\u00e9n se puede buscar el fin de archivo con ayuda de esta funci\u00f3n:</p> seek() - Fin archivo<pre><code>  archivo.seek(0, 2)   # \u00daltimo car\u00e1cter \n</code></pre> <p>Restricciones de <code>seek()</code></p> <p>Cuando los archivos est\u00e1n abiertos en modo texto, la mayor\u00eda de las combinaciones de  <code>offset</code> y <code>whence</code> lanzan error.</p> <p>En cambio, dichas combinaciones s\u00ed se permiten cuando se abren los archivos en modo binario, donde la posici\u00f3n relativa <code>offset</code> representa cu\u00e1ntos bytes se debe avanzar o retroceder.</p>","tags":["Archivos"]},{"location":"archivos/archivos/#readline","title":"<code>readline()</code>","text":"<p>Este m\u00e9todo lee un rengl\u00f3n a la vez y le a\u00f1ade al final un signo de fin de carrera (<code>\\n</code> en ASCII). Uso:</p> Leer<pre><code>ruta = \"texto.txt\u201d\nwith open(ruta, \"r\") as archivo:\n  print( archivo.readline() )   # lee primer rengl\u00f3n  \n  print( archivo.readline() )   # lee segundo rengl\u00f3n\n</code></pre> <p>Cada rengl\u00f3n le\u00eddo se devuelve en formato <code>str</code> (string) y a cada uno se le agrega un car\u00e1cter de fin de l\u00ednea (<code>\\n</code>). </p> <p>Si se alcanza el final del archivo la funci\u00f3n <code>readline()</code> devuelve un string completamente vac\u00edo.</p> <p>Contador de renglones</p> <p>Se pueden contar los renglones de archivo con ayuda de un bucle <code>while</code>, el cual se abre cuando se detecta el string vac\u00edo:</p> Ejemplo: contador renglones<pre><code>ruta = \"texto.txt\"\nwith open(ruta, \"r\") as archivo:  # modo lectura\n  contenido = True\n  n = 0\n  while contenido:\n    renglon = archivo.readline()\n    print(f\"{renglon}\")\n    if not renglon:\n      contenido = False\n    else:\n      n += 1\n  print(f\"N\u00ba renglones: {n}\")\n</code></pre>","tags":["Archivos"]},{"location":"archivos/archivos/#readlines","title":"<code>readlines()</code>","text":"<p>Este m\u00e9todo es similar al anterior pero lee todos los renglones del archivo juntos y los devuelve agrupados en una lista. Ejemplo uso:</p> <p><pre><code>ruta = \"texto.txt\u201d\nopen(ruta, \"r\") as archivo:\n  lista_renglones = archivo.readlines()    # lee todos los renglones como lista \n  for renglon in lista_renglones:\n    print(renglon)      # presentaci\u00f3n: un rengl\u00f3n por vez\n</code></pre> Este m\u00e9todo tambien a\u00f1ade un fin de carrera (<code>\\n</code>) a cada rengl\u00f3n.</p>","tags":["Archivos"]},{"location":"archivos/archivos/#readable","title":"<code>readable()</code>","text":"<p>Verifica la posibilidad de leer o no un archivo. Es afectado por el modo de apertura elegido. Ejemplos:</p> Verificar legibilidad<pre><code>ruta = \"texto.txt\u201d\nopen(ruta, \"w\") as archivo:\n  legible = archivo.readable()    # devuelve 'False'\n#...\nopen(ruta, \"w+\") as archivo:\n  legible = archivo.readable()    # devuelve 'True'\n</code></pre>","tags":["Archivos"]},{"location":"archivos/archivos/#write","title":"<code>write()</code>","text":"<p>Este m\u00e9todo reescribe (o a\u00f1ade) contenido al archivo. Es afectado tanto por el modo de apertura de archivo como por el puntero del archivo (ver m\u00e9todo <code>seek()</code>).</p> Reemplazo al comienzo - modo 'r+'<pre><code>ruta = \"texto.txt\u201d\narchivo = open(ruta, \"r+\")  # modo lectura con a\u00f1adido\nagregado = \"renglon a\u00f1adido\"\narchivo.write( agregado )   # el contenido reemplaza al primer renglon\narchivo.close()\n</code></pre> Reemplazo al final - modo 'a'<pre><code>ruta = \"texto.txt\u201d\narchivo = open(ruta, \"a\")  # modo a\u00f1adido ('append')\nagregado = \"renglon a\u00f1adido\"\narchivo.write( agregado )   # el contenido se agrega al final del archivo\narchivo.close()\n</code></pre> Sobreescritura total - modo 'w'<pre><code>ruta = \"texto.txt\u201d\narchivo = open(ruta, \"w\")  # modo escritura estricta (tambien se puede hacer con \"w+\")\nnuevo_contenido = \"Mi nuevo texto\"\narchivo.write( nuevo_contenido )   # se borra TODO y se escribe el nuevo contenido\narchivo.close()\n</code></pre> <p>Caracteres escritos</p> <p><code>write()</code> tiene un valor de retorno num\u00e9rico que representa el n\u00famero de caracteres a\u00f1adidos al archivo.</p>","tags":["Archivos"]},{"location":"archivos/archivos/#writable","title":"<code>writable()</code>","text":"<p>Verifica que el archivo est\u00e9 en condiciones de ser escrito. Es afectado por los modos de apertura. </p> Verificar permisos de escritura<pre><code>archivo = open(ruta, \"r\")  # modo lectura con modificacion\nprint(archivo.writable() )    # da 'False'\n\narchivo = open(ruta, \"r+\")  # modo lectura con modificacion\nprint(archivo.writable() )    # da 'True'\n</code></pre>","tags":["Archivos"]},{"location":"archivos/archivos/#encoding","title":"<code>encoding</code>","text":"<p>La funci\u00f3n <code>open()</code> tiene un argumento opcional llamado <code>encoding</code> el cual permite elegir la codificaci\u00f3n para leer y escribir archivos.</p> Codificaci\u00f3n de archivos<pre><code>with open(\"archivo_utf8.txt\",\"w\", encoding=\"utf-8\") as archivo:\n    archivo.write( \"Hola UTF-8\")\n\nwith open(\"archivo_utf16.txt\",\"w\", encoding=\"utf-16\") as archivo:\n    archivo.write( \"Hola UTF-16\")\n\nwith open(\"archivo_utf32.txt\",\"w\", encoding=\"utf-32\") as archivo:\n    archivo.write( \"Hola UTF-32\")\n</code></pre>","tags":["Archivos"]},{"location":"archivos/archivos/#referencias","title":"Referencias","text":"<p>StackOverflow - Difference between modes... </p>","tags":["Archivos"]},{"location":"archivos/json/","title":"Archivos JSON","text":"<p>Los archivos JSON (JavaScript Object Notation) son muy utilizados para guardar informaci\u00f3n en el formato de  los \"objetos\" de JavaScript, muy similares a los diccionarios de Python.</p>","tags":["JSON","Diccionarios","Archivos"]},{"location":"archivos/json/#importacion","title":"Importaci\u00f3n","text":"<p>Python tiene el m\u00f3dulo dedicado json, el cual debe importarse para su uso: Importaci\u00f3n de m\u00f3dulo JSON<pre><code>import json\n</code></pre> Los archivos JSON deben estar codificados en formato <code>UTF-8</code>, <code>UTF-16</code> o <code>UTF-32</code>.</p>","tags":["JSON","Diccionarios","Archivos"]},{"location":"archivos/json/#apertura-y-cierre","title":"Apertura y cierre","text":"<p>La operacion de apertura se hace con la funci\u00f3n <code>open()</code>, igual que con otros tipos de archivo. El cierre de archivo se hace con el m\u00e9todo <code>close()</code>.</p> Apertura y cierre de JSON<pre><code># crear archvio\nruta = \"./datos.json\"\narchivo_json = open(ruta,\"w+\") \n# ....\narchivo_json.close()  \n</code></pre>","tags":["JSON","Diccionarios","Archivos"]},{"location":"archivos/json/#guardado-de-diccionario","title":"Guardado de diccionario","text":"<p>La escritura de archivo se hace con la funci\u00f3n <code>dump()</code> del m\u00f3dulo json. Esta funci\u00f3n da la opci\u00f3n de a\u00f1adir un n\u00famero de espacios para el indentado a la salida. Si no se indica todo el contenido se guarda en un \u00fanico rengl\u00f3n</p> Guardado de diccionarios<pre><code># nombre de archivo de salida\nruta = 'data.json'\n\n#crear diccionario (\"objeto\" de JavaScript)\ndiccionario = {\n    \"Nombre\": \"Aitor\",\n    \"Apellido\":\"Tilla\",\n    \"Edad\": 38,\n    }\n\n# apertura archivo de salida\nwith open(ruta, 'w') as archivo_json:\n    # escribir archivo\n    json.dump(diccionario, archivo_json, indent=4)\n</code></pre> <p>N\u00f3tese que el archivo de salida JSON debe ser creado primero con la funci\u00f3n <code>open()</code> en modo escritura. La funci\u00f3n <code>dump()</code> requiere el descriptor de archivo para funcionar.</p>","tags":["JSON","Diccionarios","Archivos"]},{"location":"archivos/json/#lectura-de-diccionario","title":"Lectura de diccionario","text":"<p>La lectura de los datos de archivo JSON se hace con la funci\u00f3n <code>load()</code> del m\u00f3dulo json. Esta lectura se hace tras la apertura del archivo con la funci\u00f3n <code>open()</code>.</p> Lectura de diccionarios<pre><code># nombre de archivo de entrada\nruta = 'data.json'\n\n#leer diccionario desde archivo JSON\nwith open(ruta) as archivo:\n    mi_data = json.load( archivo )  #lectura del diccionario desde JSON\n</code></pre>","tags":["JSON","Diccionarios","Archivos"]},{"location":"archivos/json/#conversion-de-tipo-de-datos","title":"Conversion de tipo de datos","text":"<p>El m\u00f3dulo JSON incluye funciones para convertir diccionarios (objetos JSON) en textos simples y viceversa. Para ello se usan las funciones <code>loads()</code> y <code>dumps()</code>: </p> Conversi\u00f3n de diccionarios<pre><code>import json\n\n# datos en diccionario, compatible con JSON \ndiccionario = { \n    \"language\": \"es\",\n    \"theme\" : \"light\",\n    \"date\" : \"Jan 19\"\n    }\n\n# conversion a texto\ntexto = json.dumps( diccionario , indent=4)\n\n# conversion a diccionario\ndiccionario_2 = json.loads(texto)\n</code></pre> <p>Repasar tipos datos: diccionarios</p>","tags":["JSON","Diccionarios","Archivos"]},{"location":"archivos/pyyaml/","title":"Archivos YAML","text":"","tags":["PyYAML","YAML","Diccionarios","Listas","Archivos"]},{"location":"archivos/pyyaml/#yaml","title":"YAML","text":"<p>YAML (YAML Ain't Markup Language\u2122) es un formato de archivo muy popular para archivos de configuraciones y tambi\u00e9n se usa para intercambio de datos. Es un formato simple de leer aunque tambi\u00e9n es muy sensible respecto al indentado.</p> <p>P\u00e1gina oficial de YAML</p> <p>Este formato no est\u00e1 implementado de forma nativa en Python, por ello se requiere recurrir a paquetes externos. En esta p\u00e1gina se propone PyYAML.</p>","tags":["PyYAML","YAML","Diccionarios","Listas","Archivos"]},{"location":"archivos/pyyaml/#formato","title":"Formato","text":"<p>Los archivos YAML permiten guardar tanto listas como diccionarios. A continuaci\u00f3n se muestran algunos ejemplos.</p>","tags":["PyYAML","YAML","Diccionarios","Listas","Archivos"]},{"location":"archivos/pyyaml/#listas","title":"Listas","text":"Lista de valores - YAML<pre><code>- 4\n- 9\n- -1\n</code></pre> Lista de valores - Python<pre><code>[4, 9, -1]\n</code></pre>","tags":["PyYAML","YAML","Diccionarios","Listas","Archivos"]},{"location":"archivos/pyyaml/#listas-de-diccionarios","title":"Listas de diccionarios","text":"Lista de diccionarios - YAML<pre><code>- x : 4\n- y : 9\n- z : -1\n</code></pre> Lista de diccionarios - Python<pre><code>[{'x': 4}, {'y': 9}, {'z': -1}]\n</code></pre>","tags":["PyYAML","YAML","Diccionarios","Listas","Archivos"]},{"location":"archivos/pyyaml/#diccionarios","title":"Diccionarios","text":"Diccionario - YAML<pre><code>debug: true     \n\ndata_numerica:   \n- x : 4\n- y : 9\n- z : -1\n</code></pre> Diccionario - Python<pre><code>{'debug': True, 'data_numerica': [{'x': 4}, {'y': 9}, {'z': -1}]}\n</code></pre> <p>N\u00f3tese que el valor <code>true</code> se convierte a booleano <code>True</code> autom\u00e1ticamente.</p>","tags":["PyYAML","YAML","Diccionarios","Listas","Archivos"]},{"location":"archivos/pyyaml/#multiples-objetos","title":"Multiples objetos","text":"<p>Un mismo archivo puede guardar varios objetos de datos: </p> Objetos m\u00faltiples - YAML<pre><code># objeto N\u00ba1 \ndata_numerica:   \n- x : 4\n- y : 9\n- z : -1\n\n---  # separador de objetos\n\n# objeto N\u00ba2 \ndebug: true\n</code></pre>","tags":["PyYAML","YAML","Diccionarios","Listas","Archivos"]},{"location":"archivos/pyyaml/#comentarios","title":"Comentarios","text":"<p>YAML soporta comentarios internos,  los cuales son precedidos por un numeral (<code>#</code>) al comienzo del rengl\u00f3n. Esta es una ventaja frente al formato JSON, el cual no acepta comentarios internos.</p>","tags":["PyYAML","YAML","Diccionarios","Listas","Archivos"]},{"location":"archivos/pyyaml/#pyyaml","title":"PyYAML","text":"<p>PyYAML es el paquete m\u00e1s usado para dar soporte en Python. </p> <p>Sitio de PyYAML</p>","tags":["PyYAML","YAML","Diccionarios","Listas","Archivos"]},{"location":"archivos/pyyaml/#instalacion","title":"Instalacion","text":"<p>El paquete es instalable desde PIP:</p> Instalaci\u00f3n - PIP<pre><code>pip install pyyaml\n</code></pre>","tags":["PyYAML","YAML","Diccionarios","Listas","Archivos"]},{"location":"archivos/pyyaml/#importacion","title":"Importacion","text":"<p>El m\u00f3dulo debe importarse para su uso. Importaci\u00f3n<pre><code>import yaml\n</code></pre></p>","tags":["PyYAML","YAML","Diccionarios","Listas","Archivos"]},{"location":"archivos/pyyaml/#lectura-desde-archivo","title":"Lectura desde archivo","text":"<p>Para leer los archivos hay dos funciones espec\u00edficas llamadas <code>safe_load()</code> y <code>safe_load_all()</code>.</p>","tags":["PyYAML","YAML","Diccionarios","Listas","Archivos"]},{"location":"archivos/pyyaml/#objeto-unico","title":"Objeto \u00fanico","text":"<p>Para leer y decodificar archivos con un \u00fanico objeto de datos se recomienda usar la funci\u00f3n <code>safe_load()</code>:</p> lectura desde archivo - objeto unico<pre><code>ruta = \"data_simple.yml\"\nwith open(ruta,  'r') as archivo:\n    data_archivo = yaml.safe_load(archivo)\n\nprint(data_archivo)\nprint(type(data_archivo))   # 'dict'\n</code></pre> <p>Lectura insegura</p> <p>La funci\u00f3n <code>load()</code> permite la ejecuci\u00f3n de c\u00f3digo malicioso guardado y por ello est\u00e1 marcada como obsoleta. <code>safe_load()</code> es su versi\u00f3n recortada, que tiene menos opciones pero que es mucho m\u00e1s segura de usar.</p> <p>Data \u00fanica</p> <p><code>safe_load()</code> no admite archivos con data m\u00faltiple, porque de intentarse el int\u00e9rprete dar\u00e1 error e interrumpir\u00e1 el programa.</p>","tags":["PyYAML","YAML","Diccionarios","Listas","Archivos"]},{"location":"archivos/pyyaml/#objetos-multiples","title":"Objetos m\u00faltiples","text":"<p>En caso deque el archivo contenga m\u00faltiples objetos de datos se usa la funci\u00f3n <code>safe_load_all()</code>.</p> <p>lectura desde archivo - objetos m\u00faltiples<pre><code>datos = []\nruta = \"data_doble.yml\"\nwith open(ruta,  'r') as archivo:\n    data_archivo = yaml.safe_load_all(archivo)  # tipo salida 'generator'\n    # la data debe extraerse antes de cerrar el archivo\n    for data in data_archivo:    \n        datos.append(data)\n\nprint(datos)\n</code></pre> Esta funci\u00f3n devuelve un objeto <code>generator</code> el cual debe recorrerse para rescatar la informaci\u00f3n antes de cerrar el archivo</p>","tags":["PyYAML","YAML","Diccionarios","Listas","Archivos"]},{"location":"archivos/pyyaml/#conversion-desde-strings","title":"Conversion desde strings","text":"<p>Las funciones <code>safe_load()</code> y <code>safe_load_all()</code> admiten a su entrada datos en formato texto simple.</p>","tags":["PyYAML","YAML","Diccionarios","Listas","Archivos"]},{"location":"archivos/pyyaml/#objeto-unico_1","title":"Objeto \u00fanico","text":"Lectura desde texto simple - objeto \u00fanico<pre><code>nombres_texto = \"\"\"\ndata_numerica:   \n- x : 4\n- y : 9\n- z : -1\n\"\"\"\n\ndata_nombres = yaml.safe_load(nombres_texto)  # diccionario\n</code></pre>","tags":["PyYAML","YAML","Diccionarios","Listas","Archivos"]},{"location":"archivos/pyyaml/#objetos-multiples_1","title":"Objetos m\u00faltiples","text":"Lectura desde texto simple - objetos m\u00faltiples<pre><code>datos_texto = \"\"\"\n# objeto N\u00ba1 \ndata_numerica:   \n    - x : 4\n    - y : 9\n    - z : -1\n---\n# objeto N\u00ba2\ndebug: true\n\"\"\"\n\ndata_nombres = []\ngenerador_data = yaml.safe_load_all(datos_texto)\n\nfor data in generador_data:\n    data_nombres.append(data)\n\n\nprint(data_nombres)\n</code></pre> <p>Indentado</p> <p>Hay que evitar a toda costa el tabular la secuencia <code>---</code> para evitar errores de lectura.</p>","tags":["PyYAML","YAML","Diccionarios","Listas","Archivos"]},{"location":"archivos/pyyaml/#guardado-de-datos","title":"Guardado de datos","text":"<p>Para el guardado de objetos en archivos YAML se usa la funci\u00f3n <code>dump()</code>:</p> guardado de datos<pre><code>data_nombres: dict|list\n\nruta_salida = \"data_salida.yml\"\nwith open(ruta_salida, 'w') as archivo:\n    yaml.dump(data_nombres, archivo)\n</code></pre> <p>Otras opciones: <pre><code>yaml.dump()\nyaml.dump_all()\nyaml.safe_dump()\nyaml.safe_dump_all()\n</code></pre></p>","tags":["PyYAML","YAML","Diccionarios","Listas","Archivos"]},{"location":"archivos/pyyaml/#referencias","title":"Referencias","text":"<p>P\u00e1gina oficial de YAML</p> <p>P\u00e1gina oficial de PyYAML</p> <p>Python Land - Python YAML: How to Load, Read, and Write YAML </p>","tags":["PyYAML","YAML","Diccionarios","Listas","Archivos"]},{"location":"argparse/","title":"M\u00f3dulo Argparse","text":"<p>El m\u00f3dulo argparse es el recomendado para procesar los argumentos de entrada de la rutina principal (<code>main</code>).</p>","tags":["Argumentos","argparse"]},{"location":"argparse/#contenidos","title":"Contenidos","text":"<p>{{ pagetree(siblings) }}</p>","tags":["Argumentos","argparse"]},{"location":"argparse/#referencias","title":"Referencias","text":"<p>El libro de Python - Argparse en Python</p> <p>El m\u00f3dulo Python 3 de la semana - Argparse</p> <p>Documentacion oficial - Argparse</p>","tags":["Argumentos","argparse"]},{"location":"argparse/configuracion/","title":"Configuraci\u00f3n de argumentos","text":"<p>El m\u00e9todo <code>add_argument</code> permite configurar una gran cantidad de opciones de uso para cada argumento, las cuales se pasan como argumentos del m\u00e9todo:</p> par\u00e1metro significado <code>type</code> tipo de valor de entrada - agrega conversi\u00f3n <code>required</code> obligatoriedad del argumento a la entrada (booleano) <code>default</code> valor predefinido salvo indicaci\u00f3n desde comandos <code>choices</code> lista con los valores permitidos a la entrada <code>dest</code> nombre alternativo de la variable <code>help</code> texto de ayuda - se muestra al requerirla por comandos <code>action</code> acciones predefinidas del argumento <code>nargs</code> n\u00famero de valores del argumento <p>Debe se\u00f1alarse que los argumentos posicionales no aceptan todas las opciones listadas.</p>","tags":["Argumentos","argparse"]},{"location":"argparse/configuracion/#renombrado-de-variable","title":"Renombrado de variable","text":"<p>El argumento <code>dest</code> es el que permite cambiarle el nombre a la variable del atributo adentro del programa:</p> Nombre de argumento - configuraci\u00f3n<pre><code>analizador.add_argument(\n    '-a',                    # abreviaci\u00f3n\n    '--argumento-entrada',   # nombre completo\n    dest='x',                # nombre de variable\n    )\n</code></pre> <p>En este ejemplo se le asigna el nombre <code>x</code> al atributo-clave:</p> Nombre de argumento - lectura<pre><code># lectura de argumentos\nvalores_argumentos = analizador.parse_args()\n\n# consulta como diccionario\nvalores = vars(valores_argumentos)    # clave: 'x'\n\n# consulta desde atributo\nx = valores_argumentos.x   # atributo: 'x'\n</code></pre>","tags":["Argumentos","argparse"]},{"location":"argparse/configuracion/#obligatoriedad","title":"Obligatoriedad","text":"<p>El atributo <code>required</code> es el encargado de configurar la obligatoriedad del argumento. </p> <p>Argumento requerido - configuraci\u00f3n<pre><code>analizador.add_argument(\n    '-a',                    \n    '--argumento-entrada',   \n    required=True          # argumento obligatorio\n    )\n</code></pre> En el caso de los argumentos no posicionales, por defecto su valor es <code>False</code>. En cambio, los argumentos posicionales son obligatorios y por ello no disponen de este atributo.</p>","tags":["Argumentos","argparse"]},{"location":"argparse/configuracion/#valor-por-defecto","title":"Valor por defecto","text":"<p>El atributo <code>default</code> asigna un valor predefinido para el argumento para aquellas situaciones donde no se carga un valor de entrada.</p> <p>Valor por defecto - configuraci\u00f3n<pre><code>analizador.add_argument(\n    '-a',                    \n    '--argumento-entrada',   \n    default=0       # '0' de manera predefinida\n    )\n</code></pre> Si no se especifica entonces su valor es <code>None</code>.</p> Valor por defecto - uso<pre><code>py rutina.py -a hola    # 'hola'\npy rutina.py -a 5       # '5'\n\npy rutina.py            # '0'\n</code></pre>","tags":["Argumentos","argparse"]},{"location":"argparse/configuracion/#opciones-prefijadas","title":"Opciones prefijadas","text":"<p>El argumento <code>choices</code> acepta una lista con todos los valores permitidos del argumento.</p> <p>Opciones prefijadas - configuraci\u00f3n<pre><code>analizador.add_argument(\n    '-a',                    \n    '--argumento-entrada',   \n    choices=[\"A\", \"B\", \"C\"]     # valores permitidos    \n    )\n</code></pre> Si el valor ingresado no est\u00e1 incluido en la lista se produce un error.</p> Opciones prefijadas - uso<pre><code># correctos\npy rutina.py -a A      \npy rutina.py -a B\npy rutina.py -a C\n\n# fallidos\npy rutina.py -a a\npy rutina.py -a z\npy rutina.py -a 7\n</code></pre>","tags":["Argumentos","argparse"]},{"location":"argparse/configuracion/#tipo","title":"Tipo","text":"<p>El argumento <code>type</code> define a qu\u00e9 tipo de datos ser\u00e1 convertido el valor de entrada. La conversi\u00f3n es autom\u00e1tica.</p> Tipo de datos<pre><code>analizador.add_argument(\n    '-a',\n    '--argumento-entrada',\n    type=int                # tipo de datos: entero\n    )\n</code></pre> <p>Si el valor de entrada no es convertible por el tipo elegido entonces se produce un error.</p> <p>Ejemplo de uso:</p> <pre><code># correctos\npy rutina.py -a 8      \npy rutina.py -a \"8\"     \n\n# fallidos\npy rutina.py -a 'Hola mundo'    # string\npy rutina.py -a true            # booleano \n</code></pre>","tags":["Argumentos","argparse"]},{"location":"argparse/configuracion/#texto-de-ayuda","title":"Texto de ayuda","text":"<p>El atributo <code>help</code> permite asignar un texto descriptivo que aparecer\u00e1 al usar el argumento <code>--help</code> como entrada de la rutina.</p> Opciones prefijadas<pre><code>analizador.add_argument(\n    '-a',                    \n    '--argumento-entrada',   \n    help=\"Descripci\u00f3n del argumento y su utilizaci\u00f3n.\"    \n    )\n</code></pre> <p>Es de uso opcional.</p>","tags":["Argumentos","argparse"]},{"location":"argparse/configuracion/#acciones","title":"Acciones","text":"<p>El par\u00e1metro <code>action</code> permite configurar distintos tipos de opciones, las cuales se muestran a continuaci\u00f3n.</p>","tags":["Argumentos","argparse"]},{"location":"argparse/configuracion/#guardar-store","title":"Guardar - <code>store</code>","text":"<p>Esta es la opci\u00f3n por default. Guarda el valor de entrada en la variable del argumento.</p> store - configuraci\u00f3n<pre><code>analizador.add_argument(\n    '-a',\n    action='store'\n    )\n</code></pre> store - uso<pre><code>py rutina.py -a 5   # '5'\npy rutina.py        # Error\n</code></pre>","tags":["Argumentos","argparse"]},{"location":"argparse/configuracion/#guardar-constante-store_const","title":"Guardar constante - <code>store_const</code>","text":"<p>Esta opci\u00f3n asigna el valor <code>const</code> como salida s\u00f3lo si el argumento est\u00e1 presente al menos una vez. En caso contrario devuelve <code>None</code>.</p> store_const - configuraci\u00f3n<pre><code>analizador.add_argument(\n    '-a', \n    action='store_const', \n    const='17'\n    )\n</code></pre> store_const - uso<pre><code>py rutina.py -a     # '17'\npy rutina.py -a -a  # '17'\npy rutina.py        # 'None'\n</code></pre>","tags":["Argumentos","argparse"]},{"location":"argparse/configuracion/#verdadero-store_true","title":"Verdadero - <code>store_true</code>","text":"<p>Esta acci\u00f3n crea un argumento booleano que es <code>True</code> si el argumento est\u00e1 presente. En caso contrario da <code>False</code>.</p> <p>Sirve para crear flags de habilitaci\u00f3n de opciones.</p> store_true - configuraci\u00f3n<pre><code>analizador.add_argument(\n    '-a',\n    action='store_true'\n    )\n</code></pre> store_true - uso<pre><code>py rutina.py -a     # 'True'\npy rutina.py        # 'False'\n</code></pre>","tags":["Argumentos","argparse"]},{"location":"argparse/configuracion/#falso-store_false","title":"Falso - <code>store_false</code>","text":"<p>Es el complemento de <code>store_true</code>. Sirve para crear flags de bloqueo de opciones.</p> store_false - configuraci\u00f3n<pre><code>analizador.add_argument(\n    '-a', \n    action='store_true'\n    )\n</code></pre> store_false - uso<pre><code>py rutina.py -a     # 'False'\npy rutina.py        # 'True'\n</code></pre>","tags":["Argumentos","argparse"]},{"location":"argparse/configuracion/#adjuntar-valores-append","title":"Adjuntar valores - <code>append</code>","text":"<p>Esta acci\u00f3n hace que al argumento se le pueda pueda asignar m\u00faltiples valores por separado y los junta todos en una lista. Si el argumento no est\u00e1 presente en la entrada se devuelve <code>None</code>.</p> append - configuraci\u00f3n<pre><code>analizador.add_argument(\n    '-a', \n    action='append'\n    )\n</code></pre> append - uso<pre><code>py rutina.py -a 8           # ['8']\npy rutina.py -a 8 -a hola   # ['8', 'hola']\npy rutina.py                # 'None'\n</code></pre>","tags":["Argumentos","argparse"]},{"location":"argparse/configuracion/#adjuntar-constante-append_const","title":"Adjuntar constante - <code>append_const</code>","text":"<p>Esta acci\u00f3n crea una lista donde se repite el valor de la constante indicada tantas veces como aparezca el argumento. Si el argumento no est\u00e1 presente en la entrada se devuelve <code>None</code></p> append_const - configuraci\u00f3n<pre><code>analizador.add_argument(\n    '-a', \n    action='append_const', \n    const='21'\n    )\n</code></pre> append_const - uso<pre><code>py rutina.py        # 'None'\npy rutina.py -a     # ['21']\npy rutina.py -a -a  # ['21', '21']\npy rutina.py -aa    # ['21', '21']\n</code></pre>","tags":["Argumentos","argparse"]},{"location":"argparse/configuracion/#contar-repeticiones-count","title":"Contar repeticiones - <code>count</code>","text":"<p>La acci\u00f3n <code>count</code> cuenta las repeticiones del argumento especificado, devolviendo la cantidad como entero. Si el argumento no se ingresa entonces se devuelve <code>False</code>. </p> count - configuraci\u00f3n<pre><code>analizador.add_argument(\n    '-a',\n    action='count'\n    )\n</code></pre> count - uso<pre><code>py rutina.py         # 'None'\npy rutina.py  -a     # '1'\npy rutina.py  -a -a  # '2'\npy rutina.py  -aa    # '2'\npy rutina.py  -aaa   # '3'\n</code></pre>","tags":["Argumentos","argparse"]},{"location":"argparse/configuracion/#version-version","title":"Versi\u00f3n - <code>version</code>","text":"<p>El argumento <code>version</code> permite leer la etiqueta de versi\u00f3n actual.</p> version - configuraci\u00f3n<pre><code>analizador.add_argument(\n    '-v', '--version',\n    action='version'\n    )\nanalizador.version=\"v1.0.0\"\n</code></pre> version - uso<pre><code>py rutina.py -v     # 'v1.0.0'\n</code></pre>","tags":["Argumentos","argparse"]},{"location":"argparse/configuracion/#ayuda-help","title":"Ayuda - <code>help</code>","text":"<p>La acci\u00f3n <code>help</code> es la encargada de crear argumentos de ayuda por consola. Muestra los textos de ayuda de todos los otros argumentos, la descripci\u00f3n del programa incluida en el parser, etc.</p> help - configuraci\u00f3n<pre><code>analizador.add_argument(\n    '-a', '--ayuda',\n    action='help',\n    help=\"comando alternativo a 'help'\"\n    )\n</code></pre> help - uso<pre><code>py rutina.py -a\npy rutina.py --ayuda\n</code></pre> <p>La salida por consola es algo similar a esto:</p> salida por consola<pre><code>options:\n-h, --help   show this help message and exit\n-a, --ayuda  alternativa a 'help'\n</code></pre>","tags":["Argumentos","argparse"]},{"location":"argparse/configuracion/#multiples-valores","title":"M\u00faltiples valores","text":"<p>El par\u00e1metro opcional <code>nargs</code> es el encargado de determinar el n\u00famero de valores de entrada permitidos en el argumento. Los valores permitidos son los siguientes:</p> valor significado N (entero) N valores obligatorios - se guardan en una lista <code>?</code> un \u00fanico valor - opcional <code>*</code> cantidad arbitraria - guardado en lista <code>+</code> cantidad arbitraria (al menos uno) - guardado en lista <code>argparse.REMAINDER</code> todos los valores asignados al final - guardado en lista <p>Ejemplo:  Sup\u00f3ngase por ejemplo un argumento que acepta m\u00faltiples valores de entrada y que no son obligatorios:</p> cantidad arbitraria - configuraci\u00f3n<pre><code>analizador.add_argument(\n    '-a', \n    nargs='*'\n    )\n</code></pre> cantidad arbitraria - uso<pre><code>py rutina.py -a 3 14 16   # '['3', '14', '16']'\npy rutina.py -a           # '[]'\npy rutina.py              # 'None'\n</code></pre>","tags":["Argumentos","argparse"]},{"location":"argparse/grupos/","title":"Grupos de argumentos","text":"<p>Los argumentos pueden ser agrupados en base a diferentes criterios. Para ello el parser creado con <code>ArgumentParser</code> dispone de varios m\u00e9todos adicionales para crear nuevos analizadores derivados, cada uno representando un nuevo grupo.</p>","tags":["Argumentos","argparse"]},{"location":"argparse/grupos/#grupos-de-argumentos_1","title":"Grupos de argumentos","text":"<p>Los argumentos se pueden repartir en distintos grupos con ayuda del m\u00e9todo <code>add_argument_group</code>. Con este m\u00e9todo se crean parsers espec\u00edficos para cada grupo a crear y se les asigna un string de descripci\u00f3n: </p> Grupos de argumentos - creaci\u00f3n<pre><code># grupo de entrada\nanalizador_entrada = analizador.add_argument_group(\"entrada\")\n# argumentos de entrada\nanalizador_entrada.add_argument(\"x\")\n\n# grupo de salida\nanalizador_salida = analizador.add_argument_group(\"salida\")\n# argumentos de salida\nanalizador_salida.add_argument(\"y\")\n</code></pre> <p>Los argumentos de los grupos se asignan a cada grupo con el m\u00e9todo <code>add_argument</code>.</p> <p>El uso de los argumentos permanece inalterado. Lo que se altera es la organizaci\u00f3n del texto de ayuda, que ahora reparte la informaci\u00f3n de los argumentos de acuerdo al grupo al que pertenecen:</p> Grupos de argumentos - ayuda<pre><code>usage: rutina.py [-h] x y global\n\noptions:\n  -h, --help  show this help message and exit\n\nentrada:\n  x\n\nsalida:\n  y\n</code></pre> Rutina completa <pre><code>import argparse\n\n# nuevo analizador principal ('parser')\nanalizador = argparse.ArgumentParser()\n\n# grupo de entrada\nanalizador_entrada = analizador.add_argument_group(\"entrada\")\n# argumentos de entrada\nanalizador_entrada.add_argument(\"x\")\n\n# grupo de salida\nanalizador_salida = analizador.add_argument_group(\"salida\")\n# argumentos de salida\nanalizador_salida.add_argument(\"y\")\n\n# lectura de argumentos\nargumentos = analizador.parse_args()\n</code></pre>","tags":["Argumentos","argparse"]},{"location":"argparse/grupos/#argumentos-mutuamente-excluyentes","title":"Argumentos mutuamente excluyentes","text":"<p>Los argumentos que son mutuamente excluyentes se crean en un nuevo objeto derivado del parser original con el m\u00e9todo <code>add_mutually_exclusive_group</code>:</p> Argumentos excluyentes - creaci\u00f3n<pre><code># nuevo analizador principal ('parser')\nanalizador = argparse.ArgumentParser()\n\n# grupo de argumentos mutuamente excl\u00aauyentes\nanalizador_excluyentes = analizador.add_mutually_exclusive_group()\n\n# argumentos contrapuestos\nanalizador_excluyentes.add_argument('-s', '--si',action='store_true')\nanalizador_excluyentes.add_argument('-n', '--no',action='store_false')\n\n# lectura de argumentos\nargumentos = analizador.parse_args()\n</code></pre> <p>de esta manera al intentar ingresar ambos argumentos juntos:</p> Argumentos excluyentes - uso<pre><code>py rutina.py -s -n\n</code></pre> <p>se obtiene un mensaje de error como este:</p> Reporte - argumentos conflictivos<pre><code>nombre_programa: error: argument -n/--no: not allowed with argument -s/--si\n</code></pre> <p>En caso de necesitarse el ingreso de uno de los dos argumentos se agrega el par\u00e1metro <code>required</code> durante la creac\u00edon del grupo:</p> Argumentos excluyentes - requeridos<pre><code>analizador_excluyentes = analizador.add_mutually_exclusive_group(required=True)\n</code></pre> <p>en tal caso, si falta ingresar un argumento se obtiene el mensaje de error correspondiente:</p> Reporte - argumentos faltantes<pre><code>nombre_programa: error: one of the arguments -s/--si -n/--no is required\n</code></pre> Rutina completa <pre><code>import argparse\n\n# nuevo analizador principal ('parser')\nanalizador = argparse.ArgumentParser()\n\n# grupo de argumentos mutuamente excluyentes\nanalizador_excluyentes = analizador.add_mutually_exclusive_group(\n    required=True\n    )\n\n# argumentos contrapuestos\nanalizador_excluyentes.add_argument('-s', '--si',action='store_true')\nanalizador_excluyentes.add_argument('-n', '--no',action='store_false')\n\n# lectura de argumentos\nargumentos = analizador.parse_args()\n</code></pre>","tags":["Argumentos","argparse"]},{"location":"argparse/grupos/#argumentos-anidados","title":"Argumentos anidados","text":"<p>Mediante el anidado de analizadores se pueden crear comandos para el programa. El m\u00e9todo requerido se llama <code>add_subparsers</code>,</p> <pre><code># analizador auxiliar\nsub_analizador = analizador.add_subparsers(\n    help=\"Sub-analizador\",\n    )\n</code></pre> <p>el cual crea un analizador auxiliar de menor jerarqu\u00eda con el cual se implementan los parsers derivados mediante el m\u00e9todo <code>add_parser</code>,  uno por cada nuevo comando a implementar.</p> <p>Por ejemplo, si se busca crear los comandos <code>crear</code>, <code>listar</code> y <code>borrar</code> para crear la rutina actual:</p> <p>Comandos - uso<pre><code>py rutina.py  crear   [opciones]\npy rutina.py  listar  [opciones]\npy rutina.py  borrar  [opciones]\n</code></pre> cada uno de ellos requerir\u00e1 su propio parser derivado del subparser creado previamente:</p> Comandos - creaci\u00f3n<pre><code># creaci\u00f3n de comandos - un parser para cada uno\nanalizador_crear = sub_analizador.add_parser(\n    \"crear\",\n    help=\"Crear objeto\"\n    )\n\nanalizador_listar = sub_analizador.add_parser(\n    \"listar\",\n    help=\"Listar objetos\"\n    )\n\nanalizador_borrar = sub_analizador.add_parser(\n    \"borrar\",\n    help=\"Borra objeto\"\n    )\n</code></pre> <p>Al consultar la ayuda de la rutina:</p> Rutina - ayuda general<pre><code>py rutina.py  -h\n</code></pre> <p>Se listar\u00e1n los comandos disponibles de esta manera:</p> Comandos - salida por consola<pre><code>usage: rutina.py [-h] {crear,listar,borrar} ...\n\npositional arguments:\n  {crear,listar,borrar}\n                        Sub-analizador\n    crear               Crear objeto\n    listar              Listar objetos\n    borrar              Borra objeto\n\noptions:\n  -h, --help            show this help message and exit\n</code></pre> <p>Los argumentos de cada comando se agregan por separado mediante el uso del m\u00e9todo <code>add_argument</code>. Por ejemplo, para asignar argumentos al comando <code>crear</code>  se llama al m\u00e9todo <code>add_argument</code> desde su parser, llamado aqu\u00ed <code>analizador_crear</code>:</p> <p>Comandos - argumentos<pre><code># argumentos del comando 'crear'\nanalizador_crear.add_argument(\n    \"-n\", \"--nombre\",\n    help=\"Nombre del objeto a crear\"\n    )\n\nanalizador_crear.add_argument(\n    \"-s\", \"--sobreescribir\",\n    action=\"store_true\",\n    help=\"Habilita la sobreescritura de objetos preexistentes\"\n    )\n</code></pre> Las opciones de cada comando se consultan por separado. Por  ejemplo, al consultar los argumentos del comando <code>crear</code>:</p> <pre><code>py rutina.py crear -h\n</code></pre> <p>Se obtiene un texto por consola como este:</p> <pre><code>usage: rutina.py crear [-h] [-n NOMBRE] [-s]\n\noptions:\n  -h, --help           show this help message and exit\n  -n, --nombre NOMBRE  Nombre del objeto a crear\n  -s, --sobreescribir  Habilita la sobreescritura de objetos preexistentes\n</code></pre> Rutina completa <pre><code>import argparse\n\n# nuevo analizador principal ('parser')\nanalizador = argparse.ArgumentParser()\n\n# analizador auxiliar\nsub_analizador = analizador.add_subparsers(\n    help=\"Sub-analizador\",\n    )\n\n# creaci\u00f3n de comandos - un parser para cada uno\nanalizador_crear = sub_analizador.add_parser(\n    \"crear\",\n    help=\"Crear objeto\"\n    )\n\nanalizador_listar = sub_analizador.add_parser(\n    \"listar\",\n    help=\"Listar objetos\"\n    )\n\nanalizador_borrar = sub_analizador.add_parser(\n    \"borrar\",\n    help=\"Borra objeto\"\n    )\n\n# Ejemplo: argumentos del comando 'crear'\nanalizador_crear.add_argument(\n    \"-n\", \"--nombre\",\n    help=\"Nombre del objeto a crear\"\n    )\n\nanalizador_crear.add_argument(\n    \"-s\", \"--sobreescribir\",\n    action=\"store_true\",\n    help=\"Habilita la sobreescritura de objetos preexistentes\"\n    )\n\nvalores = analizador.parse_args()\n</code></pre>","tags":["Argumentos","argparse"]},{"location":"argparse/intro/","title":"Uso b\u00e1sico","text":"","tags":["Argumentos","argparse"]},{"location":"argparse/intro/#importacion","title":"Importaci\u00f3n","text":"<p>El m\u00f3dulo se importa para su uso:</p> <pre><code>import argparse\n</code></pre>","tags":["Argumentos","argparse"]},{"location":"argparse/intro/#creacion-del-parser","title":"Creaci\u00f3n del parser","text":"<p>El componente fundamental es el analizador sint\u00e1ctico, el parser. El analizador se crea con la clase <code>ArgumentParser</code>:</p> <pre><code># nuevo analizador ('parser') \nanalizador = argparse.ArgumentParser()\n</code></pre>","tags":["Argumentos","argparse"]},{"location":"argparse/intro/#lectura-de-valores","title":"Lectura de valores","text":"<p>La ejecuci\u00f3n del analizador se realiza con el m\u00e9todo <code>parse_args</code>, el cual devuelve los valores le\u00eddos:</p> <pre><code># lectura de argumentos\nvalores_argumentos = analizador.parse_args()\n</code></pre> <p>El \u00fanico argumento existente por defecto es el de ayuda (<code>help</code>).  El argumento se pasa al ejecutar la rutina:</p> <pre><code>py rutina.py -h         # abreviaci\u00f3n\npy rutina.py --help     # nombre completo\n</code></pre> <p>El texto obtenido por consola es algo como esto:</p> <pre><code>usage: nombre_programa [opciones]\n\noptions:\n  -h, --help     show this help message and exit\n</code></pre> Rutina completa <pre><code># importacion\nimport argparse\n\n# nuevo analizador ('parser') \nanalizador = argparse.ArgumentParser()\n\n# lectura de argumentos\nvalores_argumentos = analizador.parse_args()\n</code></pre>","tags":["Argumentos","argparse"]},{"location":"argparse/intro/#agregar-argumentos-posicionales","title":"Agregar argumentos posicionales","text":"<p>Cada argumento de entrada se crea con el m\u00e9todo <code>add_argument</code> del parser creado:</p> <pre><code># agregar argumentos simples\nanalizador.add_argument(\"x\")\nanalizador.add_argument(\"y\")\n</code></pre> <p>Los valores de los argumentos son leidos por orden de entrada y asignados por orden de creaci\u00f3n:</p> <pre><code>py rutina.py  2  3  # x=2, y=3\n</code></pre> <p>Se asigna el valor 2 a <code>x</code> y el 3 a <code>y</code>.</p> <p>Todos los argumentos creados de esta manera son obligatorios. Si no se especifica alguno se producir\u00e1 un error.</p> Rutina completa <pre><code># importacion\nimport argparse\n\n# nuevo analizador ('parser') \nanalizador = argparse.ArgumentParser()\n\n# agregar argumentos simples\nanalizador.add_argument(\"x\")\nanalizador.add_argument(\"y\")\n\n# lectura de argumentos\nvalores_argumentos = analizador.parse_args()\n</code></pre>","tags":["Argumentos","argparse"]},{"location":"argparse/intro/#lectura-de-valores_1","title":"Lectura de valores","text":"","tags":["Argumentos","argparse"]},{"location":"argparse/intro/#namespace","title":"Namespace","text":"<p>El retorno de <code>parse_args</code> es del tipo <code>argparse.Namespace</code>:</p> <pre><code># lectura de argumentos\nvalores_argumentos = analizador.parse_args()\n</code></pre> <p>La salida por consola es algo como lo siguiente: <pre><code>Namespace(x=2, y=3)\n</code></pre></p>","tags":["Argumentos","argparse"]},{"location":"argparse/intro/#atributos","title":"Atributos","text":"<p>Los valores de los argumentos pueden obtenerse como atributos de la variable de retorno que heredan el nombre de cada argumento:</p> <pre><code># lectura de argumentos\nvalores_argumentos = analizador.parse_args()\n\n# lectura de atributos\nx = argumentos.x\ny = argumentos.y\n</code></pre>","tags":["Argumentos","argparse"]},{"location":"argparse/intro/#diccionario","title":"Diccionario","text":"<p>La lectura en formato diccionario se realiza con la funci\u00f3n <code>vars</code>:</p> <pre><code># lectura de argumentos\nvalores_argumentos = analizador.parse_args()\n\n# conversion a diccionario\ndiccionario_valores = vars(argumentos)\n</code></pre> <p>Por ejemplo en el ejemplo previo:</p> <p><pre><code>py rutina.py  2  3  # x=2, y=3\n</code></pre> El resultado es el pr\u00f3ximo diccionario:</p> <pre><code>{'x': '2', 'y': '3'}\n</code></pre>","tags":["Argumentos","argparse"]},{"location":"argparse/intro/#texto-de-ayuda","title":"Texto de ayuda","text":"<p>El texto de ayuda puede ser publicado desde adentro el programa con ayuda del m\u00e9todo <code>print_usage</code>.</p> <pre><code>analizador.print_usage()\n</code></pre> <p>Su resultado el equivalente al uso del argumento <code>--help</code>.</p>","tags":["Argumentos","argparse"]},{"location":"argparse/parser/","title":"Analizador","text":"","tags":["Argumentos","argparse"]},{"location":"argparse/parser/#ayuda-agregada","title":"Ayuda agregada","text":"<p><code>ArgumentParser</code> posee varios argumentos para mejorar la legibilidad de la ayuda por consola:</p> <pre><code># nuevo analizador ('parser') \nanalizador = argparse.ArgumentParser(\n    prog=\"nombre_programa\",\n    usage='%(prog)s [opciones]',\n    description=\"Descripci\u00f3n del programa\",\n    epilog='Texto al final de la ayuda',\n    )\n</code></pre> <p>El texto obtenido por consola es algo como esto:</p> <pre><code>usage: nombre_programa [opciones]\n\nDescripcion del programa\n\noptions:\n  -h, --help     show this help message and exit\n\nTexto al final de la ayuda\n</code></pre> Rutina completa <pre><code># importacion\nimport argparse\n\n# nuevo analizador ('parser') \nanalizador = argparse.ArgumentParser(\n    prog=\"nombre_programa\",\n    usage='%(prog)s [opciones]',\n    description=\"Descripcion del programa\",\n    epilog='Texto al final de la ayuda',\n    )\n\n# lectura de argumentos\nargumentos = analizador.parse_args()\n</code></pre>","tags":["Argumentos","argparse"]},{"location":"argparse/parser/#prefijos-de-argumentos","title":"Prefijos de argumentos","text":"<p>Por default el prefijo de los argumentos de entrada es <code>-</code>.  <code>prefix_chars</code> permite reemplazar el s\u00edmbolo prefijo de los argumentos de entrada.</p> <p>Esta opci\u00f3n se cambia al llamar la funci\u00f3n <code>ArgumentParser</code>:</p> Prefijos de argumentos - configuraci\u00f3n<pre><code># nuevo analizador ('parser') \nanalizador = argparse.ArgumentParser(\n    prefix_chars=\"+\"\n    )\n\n# argumento con prefijo cambiado\nanalizador.add_argument(\"+x\", '++entrada-x')\n</code></pre> <p>de este modo la entrada de argumentos queda:</p> Prefijos de argumentos - uso<pre><code>py rutina.py  +x 2          # abreviaciones\npy rutina.py  ++entrada-x 2 # nombre completo\n</code></pre> <p>Se permite usar m\u00faltiples simbolos de prefijo alternativos. Por ejemplo, para habilitar los signos <code>-</code>,  <code>+</code> y <code>/</code> se puede escribir simplemente: </p> <p>M\u00faltiples prefijos - configuraci\u00f3n<pre><code># nuevo analizador ('parser') \nanalizador = argparse.ArgumentParser(\n    prefix_chars='-+/'\n    )\n\n# argumento con prefijos variados\nanalizador.add_argument(\"+x\", '++entrada-x')\nanalizador.add_argument(\"/y\", '//entrada-y' )\nanalizador.add_argument(\"-z\", '--entrada-z')\n</code></pre> en este caso la entrada de argumentos queda:</p> M\u00faltiples prefijos - uso<pre><code>py rutina.py  +x 2   /y 3   -z P                            # abreviaciones\npy rutina.py  ++entrada-x  2 //entrada-y 3  --entrada-z  P  # nombre completo\n</code></pre> <p>Es necesario respetar los prefijos elegidos para cada argumento. En caso de necesitarse usar distintos prefijos para un mismo argumento entonces estos deben indicarse expl\u00edcitamente en la definici\u00f3n. Ejemplo:</p> M\u00faltiples prefijos por argumento<pre><code># argumento con prefijos variados\nanalizador.add_argument(\n      \"+x\", '++entrada-x',\n      \"/x\", '//entrada-x',\n      \"-x\", '--entrada-x',\n      )\n</code></pre> Rutina completa <pre><code>import argparse\n\n# nuevo analizador ('parser') \nanalizador = argparse.ArgumentParser(\n    prefix_chars='-+/'\n    )\n\n# argumento con prefijos variados\nanalizador.add_argument(\"+x\", '++entrada-x')\nanalizador.add_argument(\"/y\", '//entrada-y' )\nanalizador.add_argument(\"-z\", '--entrada-z')\n\n# lectura de argumentos\nargumentos = analizador.parse_args()\nvalores = vars(argumentos)\nprint(valores)\n</code></pre>","tags":["Argumentos","argparse"]},{"location":"argparse/parser/#argumentos-desde-archivo","title":"Argumentos desde archivo","text":"<p>Si los argumentos deben leerse desde archivo se agrega durante la creaci\u00f3n del parser el par\u00e1metro <code>fromfile_prefix_chars</code> y se le asigna un car\u00e1cter indicador, por ejemplo el arroba (<code>@</code>):</p> Argumentos desde archivo - configuraci\u00f3n<pre><code># nuevo analizador ('parser') \nanalizador = argparse.ArgumentParser(\n    fromfile_prefix_chars='@'   # prefijo de archivos\n    )\n\n# argumentos opcionales\nanalizador.add_argument('-x')\nanalizador.add_argument('-y')\nanalizador.add_argument('-z')\n</code></pre> <p>entonces al programa se le pasa el nombre de archivo precedido por el arroba:</p> Argumentos desde archivo - lectura<pre><code>py rutina.py @valores.txt\n</code></pre> <p>Si el archivo de texto trae los valores guardados en este formato:</p> archivo con argumentos<pre><code>-x=8\n-y=hola\n-z=mundo\n</code></pre> <p>entonces el programa podr\u00e1 leer todos los argumentos juntos: <pre><code>{'x': '8', 'y': 'hola', 'z': 'mundo'}\n</code></pre></p> Rutina completa <pre><code>import argparse\n\n# nuevo analizador ('parser') \nanalizador = argparse.ArgumentParser(\n    fromfile_prefix_chars='@'\n    )\n\nanalizador.add_argument('-x')\nanalizador.add_argument('-y')\nanalizador.add_argument('-z')\n\n# lectura de argumentos\nargumentos = analizador.parse_args()\nvalores = vars(argumentos)\nprint(valores)\n</code></pre>","tags":["Argumentos","argparse"]},{"location":"argparse/tipos_args/","title":"Tipos de argumentos","text":"","tags":["Argumentos","argparse"]},{"location":"argparse/tipos_args/#argumentos-posicionales","title":"Argumentos posicionales","text":"<p>Los argumentos posicionales son aquellos que deben ingresarse en el mismo orden de definici\u00f3n para poder ser le\u00eddos. A estos argumentos se les asigna un nombre y no van precedidos por ning\u00fan s\u00edmbolo de prefijo.</p> Argumentos posicionales - creaci\u00f3n<pre><code># agregar argumentos simples\nanalizador.add_argument(\"x\")\nanalizador.add_argument(\"y\")\n</code></pre> <p>Los argumentos posicionales son de uso obligatorio.</p> Argumentos posicionales - uso<pre><code>py rutina.py  2  3  \n</code></pre> <p>Los argumentos posicionales son listados por el comando de ayuda bajo la secci\u00f3n <code>positional arguments</code>:</p> Argumentos posicionales - ayuda<pre><code>usage: nombre_programa [opciones]\n\npositional arguments:\n  x\n  y\n\noptions:\n  -h, --help     show this help message and exit\n</code></pre>","tags":["Argumentos","argparse"]},{"location":"argparse/tipos_args/#argumentos-opcionales-no-posicionales","title":"Argumentos opcionales (no posicionales)","text":"<p>Los argumentos no posicionales son aquellos que requieren ser indicados precedidos por su nombre o su abreviaci\u00f3n. Son no posicionales porque no necesitan ser ingresados con un orden preestablecido.  Estos argumentos son opcionales de manera predefinida</p> <p>El m\u00e9todo <code>add_argument</code> admite definir dos notaciones para los argumentos: un nombre completo, t\u00edpicamente precedida por dos guiones (<code>--</code>) y una abreviaci\u00f3n, precedida por un gui\u00f3n (<code>-</code>):</p> <p>Argumentos no posicionales - configuraci\u00f3n<pre><code>analizador.add_argument(\n    '-a',                   # abreviaci\u00f3n\n    '--argumento-entrada'   # nombre completo\n    )\n</code></pre> Estos dos argumentos pueden ser ingresados sin respetar su orden.</p> <p>El valor del argumento se podr\u00e1 consultar en base al nombre del argumento, pero sin sus prefijos y con las correcciones necesarias para respetar las reglas de Python en cuanto a nombres se refiere.</p> <p>En este ejemplo: <code>--argumento-entrada</code> se convierte a <code>argumento_entrada</code>:</p> Argumentos no posicionales - lectura<pre><code># lectura de argumentos\nvalores_argumentos = analizador.parse_args()\n\n# consulta como diccionario\nvalores = vars(valores_argumentos)    # clave: 'argumento_entrada'\n\n# consulta desde atributo\nx = valores_argumentos.argumento_entrada   # atributo: 'argumento_entrada'\n</code></pre> <p>Al imprimir la ayuda estos argumentos se listan bajo la secci\u00f3n <code>options</code>:</p> Argumentos no posicionales - ayuda<pre><code>usage: rutina.py [-h] [-a ARGUMENTO_ENTRADA]  x y\n\noptions:\n  -h, --help            show this help message and exit\n  -a, --argumento-entrada ARGUMENTO_ENTRADA\n</code></pre>","tags":["Argumentos","argparse"]},{"location":"basicos/comenzando/","title":"Comenzando con Python","text":"","tags":["Bash","Comentarios","Instalacion","Interprete"]},{"location":"basicos/comenzando/#instalacion","title":"Instalaci\u00f3n","text":"<p>Python utiliza un int\u00e9rprete espec\u00edfico para hacer funcionar los programas.  La forma m\u00e1s habitual de uso es instalarlo localmente.</p> <p>En sistemas Windows la forma m\u00e1s sencilla de instalaci\u00f3n es mediante su instalador. Descarga desde el sitio oficial de Python</p> <p>En sistemas GNU/Linux el int\u00e9rprete de Python suele venir preinstalado. En caso de requerirse la instalaci\u00f3n o la actualizaci\u00f3n esto puede hacerse desde el gestor de paquetes de la distribuci\u00f3n o por consola.</p> <p>Ejemplo: </p> Instalaci\u00f3n - Fedora<pre><code>sudo dnf install python   # instalaci\u00f3n\nsudo dnf update  python   # actualizaci\u00f3n\n</code></pre>","tags":["Bash","Comentarios","Instalacion","Interprete"]},{"location":"basicos/comenzando/#archivos-y-ejecucion","title":"Archivos y Ejecuci\u00f3n","text":"<p>Los programas escritos en lenguaje Python se guardan en archivos de texto con extensi\u00f3n <code>.py</code>.</p> <p>Para ejecutar las rutinas mediante el int\u00e9rprete desde la consola  se usa el comando <code>python</code>:</p> <p>ejecutar rutina Python<pre><code>python  nombre_archivo.py\npython3 nombre_archivo.py \n</code></pre> La versi\u00f3n m\u00e1s usada actualmente de Python es la versi\u00f3n 3; sin embargo todav\u00eda existe c\u00f3digo legacy (no mantenible) en la versi\u00f3n 2. Seg\u00fan el sistema operativo y la versi\u00f3n de Python instalada puede requerirse un comando o el otro.</p> <p>Abreviaci\u00f3n comando</p> <p>Desde la versi\u00f3n 3.10 se a\u00f1adi\u00f3 el comando <code>py</code> como abreviaci\u00f3n del comando del int\u00e9rprete:</p> <p>ejecutar rutina Python - abreviado<pre><code>py nombre_archivo.py\n</code></pre> Si el comando <code>py</code> no existe entonces se puede crear un alias en consola antes de usarlo:</p> crear alias 'py'<pre><code>alias py=python\nalias py=python3\n</code></pre>","tags":["Bash","Comentarios","Instalacion","Interprete"]},{"location":"basicos/comenzando/#escribir-en-pantalla","title":"Escribir en pantalla","text":"<p>El primer programa m\u00e1s habitual es el 'HelloWorld!', un programa que escribe un mensaje en consola. En Python los mensajes se escriben en pantalla con la funci\u00f3n <code>print()</code>:</p> Hola mundo<pre><code>print(\"\u00a1Hola Mundo!\")\nprint('Mi primera rutina en Python')\n</code></pre> <p>Python verifica la indentaci\u00f3n (es decir, los espacios a izquierda) de las instrucciones para determinar las jerarqu\u00edas y los controles de flujo dentro de los programas (esto se ver\u00e1 m\u00e1s adelante). Por ello debe tenerse cuidado de no dejar distintos espacios a izquierda de las instrucciones excepto cuando estas lo requieren. </p> <p>Ejemplo: un error debido a un indentado no consistente Error indentado<pre><code>print(\"\u00a1Hola Mundo!\")\n  print('Mi primera rutina en Python') # da IndentationError\n</code></pre></p>","tags":["Bash","Comentarios","Instalacion","Interprete"]},{"location":"basicos/comenzando/#comentarios","title":"Comentarios","text":"<p>Los comentarios de una l\u00ednea son precedidos por el s\u00edmbolo numeral (<code>#</code>). Comentarios simples<pre><code># Comentario, una linea\n</code></pre> Los comentarios de m\u00faltiples l\u00edneas empiezan precedidos con tres comillas y terminan en tres comillas (<code>\u201c\u201d\u201d\u201d</code>): </p> <p>Comentarios multil\u00ednea - comillas<pre><code>\"\"\"\nUn comentario, \nvarias lineas\n\"\"\"\n</code></pre> Usar triple comilla simple (<code>'''</code>) antes y despu\u00e9s de los comentarios tambi\u00e9n sirve para documentar:</p> Comentarios multil\u00ednea - comillas simples<pre><code>'''\nUn comentario, \nvarias lineas\n'''\n</code></pre>","tags":["Bash","Comentarios","Instalacion","Interprete"]},{"location":"basicos/comenzando/#scripts-ejecutables","title":"Scripts ejecutables","text":"<p>Para convertir los archivos de Python en scripts ejecutables se puede incluir dentro del mismo archivo de programa un 'shebang' de modo an\u00e1logo al usado en los scripts de Bash: Rutinas ejecutables<pre><code>#!/usr/bin/env python   # ruta al interprete Python (Linux)\nprint(\"\u00a1Hola Mundo!\")\n</code></pre> Este realiza el llamado al int\u00e9rprete de Python desde el mismo archivo. El shebang debe apuntar a un int\u00e9rprete de Python instalado en el sistema para que el script funcione.</p> <p>De este modo se puede ejecutar la rutina del archivo desde la consola directamente, poniendo punto y barra adelante del nombre: Autoejecuci\u00f3n<pre><code>./nombre_archivo.py\n</code></pre> Tambi\u00e9n se podr\u00e1 ejecutar la rutina con doble click sobre el archivo; sin embargo esto puede no abrir la terminal (o cerrarla muy r\u00e1pidamente).</p> <p>Permisos de ejecuci\u00f3n</p> <p>Es posible que se requiera darle permisos de ejecuci\u00f3n al archivo. Esto puede hacerse desde la terminal con el comando chmod o bien afectando las propiedades con clik derecho en el entorno gr\u00e1fico del sistema operativo.</p> <p>Asignar permisos de ejecucion desde la terminal: Habilitar autoejecuci\u00f3n<pre><code>chmod +x nombre_archivo.py\n</code></pre></p>","tags":["Bash","Comentarios","Instalacion","Interprete"]},{"location":"basicos/compilacion/","title":"Compilaci\u00f3n","text":"<p>Con el fin de crear archivos ejecutables hay varias herramientas para compilar el c\u00f3digo, es decir para crear archivos ejecutables. Algunas de ellas son:</p> <ul> <li>py2exe;</li> <li>pyinstaller;</li> <li>Codon;</li> <li>etc.</li> </ul> <p>Cada una de ellas tiene sus propiedades, distintos tipos de licencia, distintos sistemas operativos de destino, etc.</p> <p>Uso interpretado</p> <p>Si bien es posible crear los ejecutables en base a c\u00f3digo Python lo m\u00e1s habitual es el uso por interpretado.</p>","tags":["Compilacion"]},{"location":"basicos/consola/","title":"Uso en Consola","text":"<p>Las instrucciones de Python se puede ejecutar escribiendo en la terminal en tiempo real.  Para ello se invoca al int\u00e9rprete de Python desde la terminal usada:</p> Uso en consola - Apertura del int\u00e9rprete<pre><code>python\npy\n</code></pre> <p>Entonces se imprime la informaci\u00f3n de la actual versi\u00f3n de Python y del sistema operativo actual.  Cada nueva linea de la terminal comienza con <code>&gt;&gt;&gt;</code>  indicando que el int\u00e9rprete de Python est\u00e1 abierto  y  las instrucciones se cierran pulsando la tecla <code>ENTER</code>.</p> Uso en consola - Instruccion a instruccion<pre><code>&gt;&gt;&gt; instrucccion_1\n&gt;&gt;&gt; instruccion_2\n&gt;&gt;&gt; ....\n</code></pre> <p>Ejemplo: definir una variable en vivo y sumarle 1</p> <p><pre><code>&gt;&gt;&gt; x=3   # asignacion\n&gt;&gt;&gt; x+1   # incremento\n</code></pre> Resultado en pantalla: <pre><code>&gt;&gt;&gt; x=3\n&gt;&gt;&gt; x+1\n4\n</code></pre></p> <p>Para salir del int\u00e9rprete hay que escribir <code>exit()</code> \u00f3 <code>Ctrl + Z</code> (en Linux)</p> Uso en consola - Salida<pre><code>&gt;&gt;&gt; exit()\n</code></pre> <p>Evidentemente, la escritura de rutinas en la consola de Python es muy poco pr\u00e1ctica para crear rutinas, a\u00fan si estas son sencillas. Sin embargo,  la consola es una buena opci\u00f3n para  hacer cuentas matem\u00e1ticas sencillas, probar peque\u00f1as instrucciones,  etc.</p>","tags":["Bash","Interprete"]},{"location":"basicos/documentacion/","title":"Documentaci\u00f3n - MarkDown","text":"<p>Markdown  es un formato muy utilizado para documentar c\u00f3digo de software  en archivos con extensi\u00f3n <code>.md</code>. Este formato facilita crear codigos de texto remarcados seg\u00fan el lenguaje usado. </p> <p>Usando triple comilla inclinada rodeando el bloque de c\u00f3digo y la palabra <code>python</code> (o <code>py</code>) como se muestra: </p> <p>C\u00f3digo en MarkDown - formato<pre><code>  ```python\n  # C\u00f3digo Python\n  # ...\n  ```\n</code></pre> entonces el int\u00e9rprete de MarkDown da estilo al bloque:</p> C\u00f3digo en MarkDown - resultado<pre><code># C\u00f3digo Python\n# ...\n</code></pre> <p>Este proyecto de documentaci\u00f3n presente usa extensivamente el formato markdown y lo convierte a p\u00e1gina web con ayuda del framework MkDocs, el cual est\u00e1 escrito principalmente en Python.  Visitar mis apuntes sobre Markdown y MkDocs.</p>","tags":["Documentacion","Markdown"]},{"location":"biblioteca/","title":"Modulos","text":"<p>En esta secci\u00f3n se listan algunos de los m\u00f3dulos est\u00e1ndar de Python. </p>"},{"location":"biblioteca/#contenidos","title":"Contenidos","text":"<p>{{ pagetree(siblings)}}</p>"},{"location":"biblioteca/asyncio/","title":"Ejecuci\u00f3n Asincr\u00f3nica - M\u00f3dulo Asyncio","text":"<p>Asyncio (asynchronous I/O) es el m\u00f3dulo encargado de implementar los mecanismos de ejecuci\u00f3n asincr\u00f3nica. La ejecuci\u00f3n asincr\u00f3nica consiste en repartir aquellas rutinas del programa que dependan de recursos no siempre disponibles (respuestas de servidores externos, entradas de usuario, etc) de modo que \u00e9stas puedan ejecutarse de manera independientes unas de otras a medida que los recursos est\u00e9n disponibles. De esta manera se aprovecha mejor el tiempo cuando los recursos requeridos est\u00e1n ocupados minimizando los tiempos muertos. </p> <p>Asyncio tambi\u00e9n incluye gesti\u00f3n de streams , manejo de colas ,etc.</p>","tags":["Hilos","Paralelismo","Procesos","asyncio"]},{"location":"biblioteca/asyncio/#importacion","title":"Importacion","text":"<p>El m\u00f3dulo debe importarse cada vez que se requiera su uso:</p> <pre><code>import asyncio\n</code></pre>","tags":["Hilos","Paralelismo","Procesos","asyncio"]},{"location":"biblioteca/asyncio/#corrutinas","title":"Corrutinas","text":"<p>La ejecuci\u00f3n as\u00edncrona se basa en corrutinas. Las corrutinas son funciones no bloqueantes, es decir que si no pueden continuar su ejecuci\u00f3n \u00e9stas quedan en suspenso y mientras tanto se pueden ejecutar otras corrutinas que s\u00ed dispongan de las condiciones para ejecutarse.</p>","tags":["Hilos","Paralelismo","Procesos","asyncio"]},{"location":"biblioteca/asyncio/#definicion-y-ejecucion-simple","title":"Definici\u00f3n y ejecuci\u00f3n simple","text":"<p>Las corrutinas se definen como funciones comunes, excepto que son precedidas con la sentencia <code>async</code>:</p> <p>Corrutinas<pre><code>import asyncio\nfrom datetime import datetime\n\n# definicion de corrutina\nasync def corrutina(nombre :str , duracion: int):\n    print(f\"Nombre: {nombre}, inicio: {datetime.now()}, duracion: {duracion}s\")\n    await asyncio.sleep(duracion)   # NO bloquea la ejecucion de otras corrutinas\n    print(f\"Nombre: {nombre}, fin: {datetime.now()}\")\n\n\n# ejecucion de corrutina\nasyncio.run(corrutina(\"A\",1))\n</code></pre> La funci\u00f3n <code>run()</code> ordena la ejecuci\u00f3n de la corrutina desde la rutina principal del programa.</p>","tags":["Hilos","Paralelismo","Procesos","asyncio"]},{"location":"biblioteca/asyncio/#ejecucion-secuencial","title":"Ejecuci\u00f3n secuencial","text":"<p>Si se intenta ejecutar varias corrutinas con la funci\u00f3n  <code>run()</code> entonces \u00e9stas se ejecutar\u00e1n en sucesi\u00f3n, es decir cada una esperar\u00e1 a la finaliazaci\u00f3n de la anterior para comenzar:</p> Corrutinas - Ejecuci\u00f3n sucesiva<pre><code>asyncio.run(corrutina(\"A\",1))\nasyncio.run(corrutina(\"B\",1))\nasyncio.run(corrutina(\"C\",1))\nasyncio.run(corrutina(\"D\",1))\n</code></pre> <p><code>run()</code> se recomienda para ejecutar los puntos de acceso de m\u00e1ximo nivel. Las corrutinas pueden ser ejecutadas dentro de otras corrutinas con ayuda de la sentencia <code>await</code>:</p> Corrutinas - Ejecuci\u00f3n sucesiva<pre><code>async def principal():\n    await corrutina(\"A\", 1)\n    await corrutina(\"B\", 1)\n    await corrutina(\"C\", 1)\n    await corrutina(\"D\", 1)\n\n\nasyncio.run(principal())\n</code></pre> <p>await</p> <p>La sentencia <code>await</code> (esperar) espera a que la corrutina indicada finalice y devuelva su retorno para poder continuar.</p> <p>La sentencia <code>await</code> s\u00f3lo puede usarse dentro de las corrutinas, en caso contrario se produce un <code>SyntaxError</code>.</p>","tags":["Hilos","Paralelismo","Procesos","asyncio"]},{"location":"biblioteca/asyncio/#ejecucion-concurrente","title":"Ejecucion concurrente","text":"<p>La ejecuci\u00f3n concurrente hace que las corrutinas comiencen todas al mismo tiempo y se espere a que todas est\u00e9n completas para finalizar la ejecuci\u00f3n.</p> <p>Para poder ejecutar las corrutinas de forma concurrente se usa la funci\u00f3n <code>gather()</code>:</p> Corrutinas - Ejecuci\u00f3n concurrente<pre><code>async def corrutinas_concurrentes():\n    await asyncio.gather(\n        corrutina(\"A\", 1),\n        corrutina(\"B\", 2),\n        corrutina(\"C\", 3),\n        )\n\n\n# orden de ejecucion asincrona\nasyncio.run(corrutinas_concurrentes())\n</code></pre> <p>Con <code>await</code> se espera a que todas las corrutinas terminen de ejecutarse para poder continuar. </p> <p>Funci\u00f3n sleep()</p> <p>El \u1e3fodulo asyncio implementa su propia versi\u00f3n de la funci\u00f3n <code>sleep()</code>. Esta versi\u00f3n, a diferencia de la implementaci\u00f3n en el m\u00f3dulo time, no bloquea la ejecuci\u00f3n del programa sino que deja la corrutina en suspenso hasta el final del retardo. </p> <p>Funci\u00f3n sleep()<pre><code>await asyncio.sleep(tiempo)   \n</code></pre> Esta funci\u00f3n se usa siempre dentro de corrutinas y se invoca con la cl\u00e1usula <code>await</code> que permite el retorno a la corrutina tras la espera.</p>","tags":["Hilos","Paralelismo","Procesos","asyncio"]},{"location":"biblioteca/asyncio/#tareas","title":"Tareas","text":"<p>Con la funci\u00f3n <code>create_task()</code> se pueden crear m\u00faltiples tareas, cada una de las cuales ejecutar\u00e1 una corrutina interna.</p> Tareas<pre><code>async def principal():\n\n    tarea1 = asyncio.create_task( corrutina(\"A\", 3) )\n    tarea2 = asyncio.create_task( corrutina(\"B\", 1) )\n\n    await tarea1\n    await tarea2\n\n\nasyncio.run(principal())\n</code></pre> <p>Las tareas son usadas para programar corrutinas concurrentemente. \u00c9stas se programan autom\u00e1ticamente para ser ejecutadas en breve.</p> <p>Las tareas deben ser esperadas con <code>await</code>. Si la corrutina interna levanta un error entonces \u00e9ste se propagar\u00e1 a la tarea. </p> <p>Las tareas se pueden cancelar con el metodo <code>cancel()</code>. Al interrumpirse la tarea se elevar\u00e1 un error del tipo <code>CancelledError</code>. Si una tarea ya est\u00e1 ejecut\u00e1ndose cuando se intenta cancelarla entonces \u00e9sta se interrumpir\u00e1 al llegar al pr\u00f3ximo <code>await</code>.</p>","tags":["Hilos","Paralelismo","Procesos","asyncio"]},{"location":"biblioteca/asyncio/#taskgroup","title":"TaskGroup()","text":"<p>Con la clase <code>TaskGroup()</code> se pueden agrupar m\u00faltiples tareas en un unico grupo para ejecutarlas de forma concurrente:</p> Tareas con TaskGroup()<pre><code>async def principal():\n    async with asyncio.TaskGroup() as grupo:\n        # tareas internas - ejecucion concurrente\n        tarea1 = asyncio.create_task( corrutina(\"A\", 3) )\n        tarea2 = asyncio.create_task( corrutina(\"B\", 1) )\n\n        await tarea1\n        await tarea2\n\n\nasyncio.run(principal())\n</code></pre> <p>La cl\u00e1usula <code>with</code> asegura el cierre del grupo y la liberaci\u00f3n de recursos al terminar, lo cual es considerado una buena pr\u00e1ctica.</p>","tags":["Hilos","Paralelismo","Procesos","asyncio"]},{"location":"biblioteca/asyncio/#timeouts-tiempo-limite","title":"Timeouts - tiempo limite","text":"<p><code>timeout()</code> pone un tope al tiempo de espera para completar las corrutinas internas, cuya ejecuci\u00f3n es concurrente.</p> <p>El tiempo de espera se indica en segundos.</p> Tareas con timeout()<pre><code>async def principal():\n    async with asyncio.timeout(5):  # tiempo espera m\u00e1ximo: 5 segundos\n        # tareas internas - ejecuci\u00f3n concurrente\n        tarea1 = asyncio.create_task( corrutina(\"A\",  3) )\n        tarea2 = asyncio.create_task( corrutina(\"B\",  1) )\n        tarea3 = asyncio.create_task( corrutina(\"C\", 10) ) # tiempo espera excesivo\n\n        await tarea1\n        await tarea2\n        await tarea3\n\n\nasyncio.run(principal())\n</code></pre> <p>Si las tareas internas no se ejecutan dentro del tiempo l\u00edmite \u00e9stas se cancelan y se eleva el error <code>TimeoutError</code>.  </p> <p>Si el tiempo especificado es <code>None</code> el tiempo de espera es indefinido. El tiempo puede redefinirse con <code>Timeout.reschedule()</code></p>","tags":["Hilos","Paralelismo","Procesos","asyncio"]},{"location":"biblioteca/asyncio/#loop-de-eventos","title":"Loop de Eventos","text":"<p>Los bucles de eventos son APIs de bajo nivel del m\u00f3dulo, las cuales son la base de </p> <p>Este es un ejemplo de uso donde se usan varios m\u00e9todos habituales del loop de eventos:</p> Uso del loop de eventos<pre><code>from datetime import datetime\nimport asyncio\n\nasync def corrutina(nombre :str , duracion: int):\n    # consulta del loop actual\n    bucle = asyncio.get_event_loop()\n    print(bucle)\n\n    print(f\"Nombre: {nombre}, inicio: {datetime.now()}, duracion: {duracion}s\")\n    await asyncio.sleep(duracion)   \n    print(f\"Nombre: {nombre}, fin: {datetime.now()}\")\n\n# nuevo bucle as\u00edncrono\nloop = asyncio.new_event_loop()\n\n# ejecucion secuencial, hasta terminar\nloop.run_until_complete(corrutina(\"A\", 1))\nloop.run_until_complete(corrutina(\"B\", 3))\n\n# Cierre de bucle manual\nloop.close()\n</code></pre> <p>M\u00e1s del buvle de eventos de Python: documentacion oficial</p>","tags":["Hilos","Paralelismo","Procesos","asyncio"]},{"location":"biblioteca/asyncio/#multithreading","title":"Multithreading","text":"<p>Supongase el ejemplo de la siguiente funci\u00f3n:</p> <pre><code>from datetime import datetime\nimport time\n\ndef rutina(nombre :str , duracion: int=4):\n\n    print(f\"Nombre: {nombre}, inicio: {datetime.now()}, duracion: {duracion}s\")\n    time.sleep(duracion)      # bloquea la ejecucion concurrente\n    print(f\"Nombre: {nombre}, fin: {datetime.now()}\")\n    return duracion\n</code></pre> <p>\u00c9sta puede ser llamada desde una corrutina de varias maneras. Una de ellas es mediante la funci\u00f3n <code>to_thread()</code>:</p> Multithreading - to_thread()<pre><code># definicion de corrutina\nasync def principal():\n    resultado = await asyncio.to_thread(rutina, nombre=\"Y\", duracion=2) \n    print(resultado)    # '2'\n\n\n# ejecucion de corrutina\nasyncio.run(principal())\n</code></pre> <p>Otra forma es el m\u00e9todo <code>run_in_executor()</code> del la clase <code>get_event_loop()</code>:</p> Multithreading - run_in_executor()<pre><code># definicion de corrutina\nasync def principal():\n    bucle = asyncio.get_event_loop()    # bucle actual\n    resultado = await bucle.run_in_executor(None, rutina, \"X\", 3)   \n    print(resultado)    # '3'\n\n\n# ejecucion de corrutina\nasyncio.run(principal())\n</code></pre> <p>Asimismo ambas formas pueden usarse juntas dentro de <code>gather()</code>:</p> Multithreading - gather<pre><code># definicion de corrutina\nasync def principal():\n    resultado = await asyncio.gather(\n        bucle.run_in_executor(None, rutina, \"X\", 3),     \n        asyncio.to_thread(rutina, nombre=\"Y\", duracion=2) \n        )\n    print(resultado)        # '[3,2]'\n\n\n# ejecucion de corrutina\nasyncio.run(principal())\n</code></pre> <p>El m\u00e9todo <code>run_in_executor()</code>delega la ejecuci\u00f3n a otro thread, lo cual permite activar el procesamiento paralelo por parte del procesador. La funci\u00f3n de entrada no debe ser corrutina sino que debe ser una funci\u00f3n normal.</p>","tags":["Hilos","Paralelismo","Procesos","asyncio"]},{"location":"biblioteca/asyncio/#manejo-de-errores","title":"Manejo de errores","text":"<p>Se usan habitualmente las cl\u00e1usulas <code>try</code> y <code>except</code> dentro de las corrutinas.</p> <p>En caso de manejarse un bucle de eventos, el m\u00e9todo <code>set_exception_handler()</code> del loop de eventos permite tambi\u00e9n el manejo de todas las corrutinas dentro del loop.</p> <p>Propagaci\u00f3n de errores</p> <p>Los errores producidos en las corrutinas se propagan a las rutinas y corrutinas superiores. Por ello es fundamental implementar el manejo de errores para evitar errores y fallos cr\u00edticos en el programa.</p>","tags":["Hilos","Paralelismo","Procesos","asyncio"]},{"location":"biblioteca/asyncio/#limitaciones-de-asyncio","title":"Limitaciones de asyncio","text":"<ul> <li>No es apta para tareas con uso intensivo de CPU.</li> <li>Las excepciones no manejadas dentro de las corrutinas no obligan a la salida inmediata del sistema, por ello suelen ser dif\u00edciles de debuggear.</li> <li>Las corrutinas usan un \u00fanico hilo y no admiten por s\u00ed mismas el uso de multiples hilos.</li> </ul>","tags":["Hilos","Paralelismo","Procesos","asyncio"]},{"location":"biblioteca/asyncio/#buenas-practicas","title":"Buenas Pr\u00e1cticas","text":"<ul> <li>Usar <code>asyncio.run()</code> es la forma recomendada de ejecutar funciones de alto nivel debido a su simplicidad.</li> <li>Manejar las excepciones previene que los errores se propaguen a la rutina principal</li> <li><code>async with</code> para manejo de recursos.</li> <li>Limitar tareas concurrentes: funciones <code>asyncio.Semaphore</code> y <code>asyncio.BoundedSemaphore</code>.</li> <li>Usar  <code>asyncio.gather()</code> para ejecutar m\u00faltiples corrutinas simult\u00e1neas.</li> </ul>","tags":["Hilos","Paralelismo","Procesos","asyncio"]},{"location":"biblioteca/asyncio/#subprocesos","title":"Subprocesos","text":"<p>El m\u00f3dulo <code>asyncio</code> incluye su propias utilidades para gestionar los subprocesos en caso de requerirse su uso.</p> <p>p\u00e1gina oficial de Python</p>","tags":["Hilos","Paralelismo","Procesos","asyncio"]},{"location":"biblioteca/asyncio/#videos-recomendados","title":"Videos recomendados","text":"","tags":["Hilos","Paralelismo","Procesos","asyncio"]},{"location":"biblioteca/asyncio/#referencias","title":"Referencias","text":"<p>Documentacion oficial de Python</p> <p>Gyata AI - Mastering Asyncio in Python</p>","tags":["Hilos","Paralelismo","Procesos","asyncio"]},{"location":"biblioteca/logging/","title":"Modulo Logging - Informacion de Errores","text":"<p>Los logs o reportes funcionan como una alternativa superadora al uso de la funci\u00f3n <code>print()</code> para dar informaci\u00f3n acerca del funcionamiento del sistema, permitiendo registrar valores de par\u00e1metros, registrar fallos de programa, fecha y hora de eventos, etc. creando mensajes con jerarqu\u00edas asignables. Tambi\u00e9n habilita la creaci\u00f3n de archivos de logs, env\u00edo de reportes al sistema operativo, etc.</p>"},{"location":"biblioteca/logging/#importacion","title":"Importaci\u00f3n","text":"Importaci\u00f3n del m\u00f3dulo<pre><code>import logging\n</code></pre>"},{"location":"biblioteca/logging/#configuracion-de-logs","title":"Configuraci\u00f3n de logs","text":"<p>Los reportes deben configurarse antes de su uso. Para ello se recurre la funci\u00f3n <code>basicConfig()</code>. </p> Configuraci\u00f3n de reportes - A consola<pre><code>logging.basicConfig(\n    level=logging.INFO, # m\u00ednimo nivel de log a publicar\n    format=\"%(asctime)s - %(levelname)s - %(message)s\", #info incorporada\n    )\n</code></pre> <p><code>level</code> es el argumento que indica el m\u00ednimo nivel de reporte a presentar de ah\u00ed en adelante, en tanto que <code>format</code> define qu\u00e9 informaci\u00f3n incluir en el reporte: </p> <ul> <li><code>%(asctime)s</code>     : fecha y hora local del reporte</li> <li><code>%(levelname)s</code>   : nivel de error reportado</li> <li><code>%(message)s</code>     : reporte explicativo del desarrollador (ver m\u00e1s adelante)</li> </ul> <p>Se presupone la salida de los reportes por terminal. Esto puede reemplazarse indicando par\u00e1metros de archivo de salida:</p> Configuraci\u00f3n de reportes - A archivo<pre><code>logging.basicConfig(\n    level=logging.INFO, # m\u00ednimo nivel de log a publicar\n    format=\"{asctime} - {levelname} - {message}\",\n    filename=\"app.log\", # nombre archivo\n    encoding=\"utf-8\",   # codificacion\n    filemode=\"a\",       # modo agregado\n    style=\"{\",\n    datefmt=\"%Y-%m-%d %H:%M\",\n    )\n</code></pre> <p>Orden de configuraci\u00f3n</p> <p>Si hay varios llamados sucesivos a <code>basicConfig()</code> entonces el primer llamado es el que define el  comportamiento del logger.</p>"},{"location":"biblioteca/logging/#opciones-de-salida-manejadores","title":"Opciones de salida - manejadores","text":"<p>Hay un par\u00e1metro adicional que permite configurar m\u00faltiples salidas en simult\u00e1neo llamado <code>handlers</code>, al cual se le asignan todos los manejadores de inter\u00e9s:</p> <p>Configuraci\u00f3n de reportes - Multiples salidas<pre><code>logging.basicConfig(\n    level=logging.INFO, # m\u00ednimo nivel de log a publicar\n    format=\"%(asctime)s - %(levelname)s - %(message)s\", #info incorporada\n    handlers=[\n         # salida por consola\n        logging.StreamHandler(), \n        # salida por archivo\n        logging.FileHandler(\n            filename=\"reporte.log\",\n            mode=\"a\",\n            encoding=\"utf-8\",\n            delay=True,\n            ),  \n        ],\n\n    )\n</code></pre> El m\u00f3dulo <code>logging</code> ofrece para manejar reportes por consola la funci\u00f3n <code>StreamHandler()</code>, en tanto que para manejar archivos ofrece <code>FileHandler()</code>. Hay otras funciones para manejar reportes mediante sockets (<code>SocketHandler</code> y <code>DatagramHandler</code> ), mediante colas (<code>QueueHandler</code>), etc.</p> <p>M\u00e1s sobre los handlers disponibles y sus opciones: documentacion oficial </p>"},{"location":"biblioteca/logging/#niveles-de-logs","title":"Niveles de logs","text":"<p>Los niveles de reportes permiten clasificar los mensajes de reportes en base a una jerarqu\u00eda de eventos, permitiendo filtrar los reportes en base al objetivo del reporte. Por ejemplo, para desarrollo es \u00fatil crear un reporte completo donde se incorporen mensajes informativos que releven incluso el buen funcionamiento del programa, en tanto que para el uso por el usuario final conviene reportar solamente los fallos ya producidos y posiblemente tambi\u00e9n las advertencias lanzadas preventivamente.</p> <p>Los niveles de reportes implementados son los siguientes:</p> opci\u00f3n valor num\u00e9rico descripci\u00f3n NOTSET 0 (Se consulta a loggers previos para definir el comportamiento) DEBUG 10 Informaci\u00f3n detallada, normalmente usada para debug. INFO 20 Confirmaci\u00f3n de funcionamiento esperado. WARNING 30 El software funciona a\u00fan, pero puede haber problemas a futuro. ERROR 40 Problema serio que anula una funcionalidad del software. CRITICAL 50 Error serio que impide al software continuar funcionando."},{"location":"biblioteca/logging/#creacion-de-logs","title":"Creaci\u00f3n de logs","text":"<p>Cada nivel de reporte tiene su propia funci\u00f3n emisora, al que se le puede asignar un mensaje explicativo. Uso b\u00e1sico: </p> Creaci\u00f3n de reportes<pre><code>logging.debug(\"Texto de DEBUG\")\nlogging.info(\"Texto de INFO\")\nlogging.warning(\"Texto de WARNING\")\nlogging.error(\"Texto de ERROR\")\nlogging.critical(\"Texto de CRITICAL\")\n</code></pre> <p>Cabe resaltarse que los logs se emiten al llamar a la funci\u00f3n emisora elegida.</p> Creaci\u00f3n de reportes<pre><code>retorno = funcion()\nif retorno == None:\n    logging.info(f\"Sin valor de retorno - OK\")\nelse:\n    logging.error(f\"Tipo de dato recibido: {type(retorno)}\")\n</code></pre>"},{"location":"biblioteca/logging/#uso-aplicado-decoradores-de-logging","title":"Uso aplicado: decoradores de logging","text":"<p>Una forma c\u00f3moda de aplicar el logging a las funciones es mediante el uso de decoradores, lo cual permite usar la misma rutina de logging a m\u00faltiples funciones. M\u00e1s sobre decoradores</p> <p>TIP N\u00ba1: Decorador logger para excepciones</p> <p>Este primer ejemplo usa un decorador simple, dentro del cual se hace manejo de excepciones mediante <code>try</code> - <code>except</code>.</p> Definici\u00f3n<pre><code>def logger_excepcion(funcion_entrada):\n    def funcion_envolvente(*args, **kwargs):\n        try:\n            retorno = funcion_entrada(*args, **kwargs)\n            logging.info(f\"Funcion '{funcion_entrada.__name__}' - Sin excepciones producidas\")\n        except Exception as ex:\n            logging.error(f\"Funcion '{funcion_entrada.__name__}' - Excepci\u00f3n: '{type(ex).__name__}'\")\n    return funcion_envolvente\n</code></pre> Uso<pre><code>@logger_excepcion\ndef dividir(a, b):\n    return(a / b)\n\n\ndividir( 4, 7)\ndividir( 7, 4)\ndividir( 1, 0.5 )\ndividir( 1, 0)      # \"ERROR - Funcion 'dividir' - Excepci\u00f3n: 'ZeroDivisionError'\"\n</code></pre> <p>TIP N\u00ba2: Decorador logger para verificar tipos de retorno</p> <p>Este segundo ejemplo usa un decorador con argumentos, de manera de poder especificar el tipo de retorno deseado para cada funci\u00f3n.</p> Definici\u00f3n<pre><code>def logger_retorno(tipo:type=None):\n    def _logger_retorno(funcion_entrada):\n        def funcion_envolvente(*args, **kwargs):\n            retorno = funcion_entrada(*args, **kwargs)\n            if type(retorno) == tipo:\n                logging.info(f\"Funcion '{funcion_entrada.__name__}' - Sin problemas de retorno\")\n            else:\n                logging.warning(f\"Funcion '{funcion_entrada.__name__}' - Tipo de retorno incorrecto: '{type(retorno).__name__}'\")\n        return funcion_envolvente\n    return _logger_retorno\n</code></pre> Uso<pre><code>@logger_retorno(int)\ndef suma(x, y):\n    return x + y\n\n\nsuma(1, 1)\nsuma(3,2)\nsuma(\"hola\", \"mundo\")   # \"WARNING - Funcion 'suma - Tipo de retorno incorrecto: 'str'\"\nsuma(9.2 , 7)           # \"WARNING - Funcion 'suma - Tipo de retorno incorrecto: 'float'\"\n</code></pre>"},{"location":"biblioteca/logging/#referencias","title":"Referencias","text":"<p>Documentacion oficial</p>"},{"location":"biblioteca/os/","title":"M\u00f3dulo OS - Comandos del Sistema Operativo","text":"<p>El m\u00f3dulo de interacci\u00f3n con el sistema operativo se llama os. \u00c9ste debe importarse para su uso:</p> importaci\u00f3n<pre><code>import os\n</code></pre>"},{"location":"biblioteca/os/#tratar-con-directorios","title":"Tratar con directorios","text":"<p>\u00c9ste incluye un surtido de funciones predeterminadas para ejercer acciones con ayuda del sistema operativo.</p> <p>Ejemplo:</p> Operaciones con rutas de archivo<pre><code>os.getcwd()     # Ver directorio actual de trabajo\nos.chdir( ruta )    # Cambiar directorio actual de trabajo\nos.listdir()    # Archivos y subcarpetas del directorio actual\n</code></pre>"},{"location":"biblioteca/os/#ejecutar-comandos","title":"Ejecutar comandos","text":"<p>Tambi\u00e9n incluye la funci\u00f3n system() que permite ejecutar los comandos de la terminal, pero su funcionamiento depende del sistema operativo. Ejemplo con comandos Linux /Bash:</p> Comandos con os.system()<pre><code>os.system(\u201cls -l\u201d)  # Da una lista de todos los archivos y carpetas visibles\nos.system(\u201cls -la\u201d) # Lista tambi\u00e9n todos los archivos y carpetas ocultos\n</code></pre>"},{"location":"biblioteca/os/#eliminar-archivos","title":"Eliminar archivos","text":"<p>Se puede pedir la eliminaci\u00f3n de un archivo mediante la funci\u00f3n remove(): eliminar archivo<pre><code>os.remove(ruta_archivo)\n</code></pre></p>"},{"location":"biblioteca/regex/","title":"Expresiones Regulares (RegEx) - Modulo RE","text":""},{"location":"biblioteca/regex/#modulo-re","title":"Modulo re","text":"<p>Python tiene un m\u00f3dulo dedicado para detectar y trabajar con secuencias llamado re. Este m\u00f3dulo debe importarse para su uso:</p> <pre><code>import re\n</code></pre>"},{"location":"biblioteca/regex/#funciones","title":"Funciones","text":"<p>El modulo re incluye m\u00faltiples funciones para trabajar con la detecci\u00f3n de patrones, las cuales se explican a continuaci\u00f3n. Estas funciones aceptan tanto el uso de secuencias fijas como de patrones regulares.</p>"},{"location":"biblioteca/regex/#sintaxis-y-opciones","title":"Sintaxis y opciones","text":"<p>La mayor\u00eda de las funciones del m\u00f3dulo tienen el siguiente formato: <pre><code>&lt;retorno&gt; = re.&lt;funcion&gt;(&lt;patron&gt;, &lt;texto&gt;, &lt;opcion&gt;)\n</code></pre> El pat</p> <p>La opci\u00f3n de entrada agrega modificaciones a la detecci\u00f3n del patr\u00f3n. Su indicaci\u00f3n no es obligatoria y puede tomar varios valores predefinidos por el m\u00f3dulo. Por ejemplo, la opci\u00f3n <code>re.I</code> (re.IGNORECASE) no distingue mayusculas de min\u00fasculas.</p> <p>Opciones habituales:</p> Opcion significado <code>re.A</code> s\u00f3lo compara caracteres ASCII <code>re.I</code> no discrimina mayusculas de minusculas <code>re.L</code> depende de la configuraci\u00f3n regional <code>re.M</code> varias lineas <code>re.S</code> si el patron incluye puntos estos son opcionales <code>re.U</code> compara caracteres Unicode <code>re.X</code> (verbose)  (?) <p>A continuaci\u00f3n se explican las funciones del m\u00f3dulo. </p>"},{"location":"biblioteca/regex/#match","title":"<code>match()</code>","text":"<p><code>match()</code> busca una secuencia justo al comienzo de un string:</p> <p>match() - uso<pre><code>&lt;retorno&gt; = re.match(&lt;patron&gt;, &lt;texto&gt;, &lt;opcion&gt;)\n</code></pre> <code>match()</code> devuelve un objeto <code>re.Match()</code> cuando encuentra el patr\u00f3n y sino devuelve <code>None</code>.  <code>re.Match()</code> tiene un m\u00e9todo llamado <code>span()</code> que indica los indices de inicio a fin de la secuencia en forma de tupla.  Se lo llama as\u00ed:</p> match() - indices de secuencia<pre><code>&lt;retorno&gt;.span()\n</code></pre> <p>Ejemplo: <pre><code>import re\n\npatron = \"leccion\"\n\ntexto1 = \"leccion 1: regex\"\ntexto2 = \"esta no es la leccion 1 sino la leccion 3\"\n\nretorno1 = re.match(patron, texto1, re.I)    # Devuelve 're.Match()'\nretorno2 = re.match(patron, texto2, re.I)    # Devuelve None\n</code></pre></p> <p>Si el patr\u00f3n fue detectado el retorno de la funcion <code>match()</code> ser\u00e1 un objeto de tipo <code>re.Match</code> y de \u00e9l se puede leer el resultado y su ubicaci\u00f3n con ayuda de los m\u00e9todos <code>group()</code> y <code>span()</code>.  El m\u00e9todo <code>span()</code> devuelve los indices de inicio y fin del primer patr\u00f3n detectado, en tanto que el m\u00e9todo <code>group()</code> devuelve el segmento del texto que cumple con el patr\u00f3n.</p> <pre><code>print(retorno1.group())     # patron detectado: leccion\nprint(retorno1.span())      # rango letras: (0,7)\n</code></pre> <p>Si en cambio el patr\u00f3n no fue detectado el retorno de <code>match()</code> ser\u00e1 <code>None</code> e intentar usar los m\u00e9todos <code>group()</code> y <code>span()</code> dar\u00e1 error.  Por ello es importante verificar el tipo de datos que arroja la funci\u00f3n antes de intentar extraer una secuencia  de salida. </p> <p>Continuando con el ejemplo previo: <pre><code>retorno = retorno1      # hay coincidencia\n# retorno = retorno2    # no hay coincidencia\n\nif type(retorno)==re.Match:\n    print(\"patron encontrado!\")\n    print(\"valor:    \",retorno.group())     # da 'leccion'\n    print(\"ubicacion:\" ,retorno.span())     # da '(0, 7)'\nelse:\n    print(\"patron no detectado\")    \n</code></pre></p>"},{"location":"biblioteca/regex/#search","title":"<code>search()</code>","text":"<p>Busca la primera coincidencia de una secuencia en cualquier lugar del string indicado:</p> search()<pre><code>&lt;retorno&gt; = re.search(&lt;patron&gt;, &lt;texto&gt;, &lt;opcion&gt;)\n</code></pre> <p><code>search()</code> devuelve un objeto <code>re.Match()</code> cuando encuentra el patr\u00f3n (igual que la funcion <code>match()</code>) y sino devuelve None.</p> <p>Ejemplo:</p> <p><pre><code>import re\n\npatron = \"leccion\"\n\ntexto1 = \"leccion 1: regex\"\ntexto2 = \"esta no es la leccion 1 sino la leccion 3\"\ntexto3 = \"aqui no se ense\u00f1a nada\"\n\nretorno1 = re.search(patron, texto1, re.I)    # Devuelve 're.Match()'\nretorno2 = re.search(patron, texto2, re.I)    # Devuelve 're.Match()'\nretorno3 = re.search(patron, texto3, re.I)    # Devuelve 'None'\n</code></pre> Al igual que con la funci\u00f3n <code>match()</code>, con el m\u00e9todo <code>span()</code> se obtienen los indices de inicio y fin del primer patr\u00f3n detectado, en tanto que con el m\u00e9todo <code>group()</code> se devuelve el resultado de la busqueda:</p> <p><pre><code>print(retorno1.span()  )  # '(0, 7)'\nprint(retorno1.group() )  # 'leccion'\nprint(retorno2.span()  )  # '(14, 21)'\nprint(retorno2.group() )  # 'leccion'\n</code></pre> Nuevamente hay que prestar atenci\u00f3n al tipo de retorno de la funci\u00f3n <code>search()</code> para evitar errores en la ejecuci\u00f3n en caso de no detectarse el patr\u00f3n buscado.</p>"},{"location":"biblioteca/regex/#findall","title":"<code>findall()</code>","text":"<p>Busca todas las coincidencias  de una secuencia en un string findall()<pre><code>&lt;retorno&gt; = re.findall(&lt;patron&gt;, &lt;texto&gt;, &lt;opcion&gt;)\n</code></pre> Devuelve una lista con todas coincidencias con el patr\u00f3n indicado. Si no hay coincidencias la lista queda vac\u00eda.</p> <p>Ejemplo: <pre><code>import re\n\npatron = \"leccion\"\n\ntexto1 = \"leccion 1: regex\"\ntexto2 = \"esta no es la leccion 1 sino la leccion 3\"\ntexto3 = \"aqui no se ense\u00f1a nada\"\n\nretorno1 = re.findall(patron, texto1, re.I)  # devuelve '['leccion']'\nretorno2 = re.findall(patron, texto2, re.I) # devuelve '['leccion', 'leccion']'\nretorno3 = re.findall(patron, texto3, re.I) # devuelve '[]'\n</code></pre></p>"},{"location":"biblioteca/regex/#split","title":"<code>split()</code>","text":"<p>Parte un string en trozos limitados por un caracter o secuencia patr\u00f3n indicado: split()<pre><code>&lt;retorno&gt; = re.split(&lt;patron&gt;, &lt;texto&gt;,&lt;opcion&gt;)\n</code></pre> El valor de retorno es una lista con el texto dividido y el patr\u00f3n eliminado. <pre><code>import re\n\npatron = \"leccion\"\n\ntexto1 = \"leccion 1: regex\"\ntexto2 = \"esta no es la leccion 1 sino la leccion 3\"\n\nretorno1 = re.split(patron, texto1, re.I)    # Devuelve \"['', ' 1: regex']\"\nretorno2 = re.split(patron, texto2, re.I)    # Devuelve \"['esta no es la ', ' 1 sino la ', ' 3']\"\n</code></pre> N\u00f3tese c\u00f3mo la palabra \"leccion\" fue eliminada y como en la lista de retorno puede haber textos vac\u00edos.</p>"},{"location":"biblioteca/regex/#sub","title":"<code>sub()</code>","text":"<p>Reemplaza una secuencia por otra dentro de un string todas las veces que aparezca. <pre><code>&lt;retorno&gt; = re.sub(&lt;patron&gt;, &lt;sustituto&gt;,&lt;texto&gt;)\n</code></pre> Ejemplo:</p> <pre><code>import re\n\ntexto1 = \"leccion 1: regex\"\ntexto2 = \"esta no es la leccion 1 sino la leccion 3.1\"\ntexto3 = \"leccion 2.UNO\"\n\nretorno1 = re.sub(\"1\", \"UNO\", texto1) # Devuelve \"leccion UNO: regex\"\nretorno2 = re.sub(\"1\", \"UNO\", texto2) # Devuelve \"esta no es la leccion UNO sino la leccion 3.UNO\"\nretorno3 = re.sub(patron , sustituto , texto3) # Devuelve \"leccion 2.UNO\"  (No cambia nada)\n</code></pre>"},{"location":"biblioteca/regex/#patrones-regulares","title":"Patrones regulares","text":"<p>Los patrones regulares son expresiones que sirven para describir combinaciones gen\u00e9ricas de caracteres que cumplan ciertas condiciones. Las expresiones tienen una notaci\u00f3n estandarizada por lo que pueden aplicarse en distintos lenguajes de programaci\u00f3n con iguales resultados.</p> <p>En el caso de Python los patrones regulares se definen antecedidos por la letra 'r':</p> <p><pre><code>&lt;patron&gt; = r\"&lt;patron_regex&gt;\"\n</code></pre> Estos patrones se ingresan en las funciones explicadas previamente como argumento para modificar los datos de entrada: filtrar, cortar , reemplazar, etc.</p>"},{"location":"biblioteca/regex/#patron-para-cifras-numericas","title":"Patr\u00f3n para cifras num\u00e9ricas","text":"<p>Este patr\u00f3n sirve para detectar una o varias cifras num\u00e9ricas contiguas <pre><code>patron_cifras = r\"[0-9]+\" \n</code></pre></p> <p>Uso: aislar el primer n\u00famero de un texto</p> <pre><code>entrada = \"imag_025\"\n\npatron_cifras  = r\"[0-9]+\" \n\nretorno = re.search(patron_cifras, entrada)\ndetectado= retorno.group()      # devuelve '025'\nrango = retorno.span()          # indices: '(5, 8)'\n</code></pre>"},{"location":"biblioteca/regex/#patron-para-fotos-digitales","title":"Patr\u00f3n para fotos digitales","text":"<p>Este patr\u00f3n sirve para filtrar archivos de c\u00e1maras digitales , smartphones, etc. </p> <p><pre><code>patron_foto = r\"^[0-9]+_[0-9]+\\.[A-Za-z]+$\"\n</code></pre> El nombre de archivo suele ser  un numero compuesto por la fecha con un gui\u00f3n bajo en el medio. Por ejemplo, una foto hecha el 23 de junio del 2022 , hora 06:59:12 probablemente tendr\u00e1 por nombre de archivo: <pre><code>archivo = \"20220623_065912.jpg\" #foto camara digital /smartphone\n</code></pre></p> <p>Uso: filtrar nombres de archivo de c\u00e1maras (sin renombrar)</p> <pre><code>import re\n\narchivo1 = \"20220623_065912.jpg\" #foto camara digital /smartphone\narchivo2 = \"20220623065912.jpg\" # falta el guion\narchivo3 = \"RTY220623_A65912.jpg\" # hay letras\narchivo4 = \"/carpetaPOSIX/20220623_065912.jpg\" # ruta POSIX (Unix / Linux)\narchivo5 = \"\\carpetaWINDOWS\\20220623_065912.jpg\" # ruta Windows\n\npatron_foto = r\"^[0-9]+_[0-9]+\\.[A-Za-z]+$\"\n# partes (en orden):\n# '[0-9]'   : s\u00f3lo numeros\n# '_'       : guion\n# '[0-9]'   : s\u00f3lo numeros\n# '.'       : un punto\n# '[A-Za-z]': s\u00f3lo letras may\u00fasculas y min\u00fasculas\n\nprint(re.findall(patron_foto, archivo1))    # ['20220623_065912.jpg']\nprint(re.findall(patron_foto, archivo2))    # []\nprint(re.findall(patron_foto, archivo3))    # []\nprint(re.findall(patron_foto, archivo4))    # []\nprint(re.findall(patron_foto, archivo5))    # []\n</code></pre>"},{"location":"biblioteca/regex/#patron-para-e-mails","title":"Patr\u00f3n para E-mails","text":"<pre><code>patron_email = r\"^[A-Za-z0-9_.+-]+@[A-Za-z0-9]+\\.[A-Za-z0-9-.]+$\"\n</code></pre> <p>Uso: filtrado de direcciones de correo inv\u00e1lidas</p> <pre><code>import re\n\nemail1 = \"yo@miserver.net\" \nemail2 = \"yo@miserver\" \nemail3 = \"yo_miserver.net\" \nemail4 = \"no_responder@spammers.net\" \nemail5 = \"no_responder.mi_spam@spammers.net\" \n\npatron_email = r\"^[A-Za-z0-9_.+-]+@[A-Za-z0-9]+\\.[A-Za-z0-9-.]+$\"\n\nprint(re.findall(patron_email, email1))    # ['yo@miserver.net']\nprint(re.findall(patron_email, email2))    # []\nprint(re.findall(patron_email, email3))    # []\nprint(re.findall(patron_email, email4))    # ['no_responder@spammers.net']\nprint(re.findall(patron_email, email5))    # ['no_responder.mi_spam@spammers.net']\n</code></pre>"},{"location":"biblioteca/regex/#referencias","title":"Referencias","text":"<p>M\u00f3dulo RE - Documentacion oficial</p> <p>Regex101: Dise\u00f1o y an\u00e1lisis interactivo</p> <p>Cheat Sheet</p> <p>RegEx 101: Gu\u00eda de supervivencia para entender y usar expresiones regulares</p>"},{"location":"biblioteca/sys/","title":"Sys - Par\u00e1metros y funciones del sistema","text":"<p>En este resumen se explican algunas de las funcionalidades del m\u00f3dulo sys.</p>"},{"location":"biblioteca/sys/#importacion","title":"Importaci\u00f3n","text":"<p>El m\u00f3dulo debe ser importado para su uso:</p> Importaci\u00f3n<pre><code>import sys\n</code></pre>"},{"location":"biblioteca/sys/#interprete-python-sistema-operativo","title":"Int\u00e9rprete Python, sistema operativo","text":""},{"location":"biblioteca/sys/#platform","title":"<code>platform</code>","text":"<p>Indica el sistema operativo detectado:</p> Identificar plataforma<pre><code>plataforma = sys.platform\n</code></pre> <p>Valores posibles:</p> Sistema operativo valor Windows <code>win32</code> Windows/Cygwin <code>cygwin</code> Linux <code>linux</code> AIX <code>aix</code> macOS <code>darwin</code>"},{"location":"biblioteca/sys/#platformstartwith","title":"<code>platform.startwith()</code>","text":"<p>Este subm\u00e9todo permite confinar c\u00f3digo espec\u00edfico para cada plataforma posible:</p> C\u00f3digo exclusivo por plataforma<pre><code>if sys.platform.startswith('freebsd'):\n    # rutina especifica para FreeBSD\nelif sys.platform.startswith('linux'):\n    # rutina especifica para Linux\nelif sys.platform.startswith('aix'):\n    # rutina especifica para AIX\n</code></pre>"},{"location":"biblioteca/sys/#version-version_info","title":"<code>version</code> , <code>version_info</code>","text":"<p>Dan informaci\u00f3n completa sobre el actual int\u00e9rprete de Python: versi\u00f3n, fecha, licencia, etc. Data de versi\u00f3n<pre><code># info de version de Python \nsys.version         # data en string\nsys.version_info    # data en tupla \n</code></pre></p>"},{"location":"biblioteca/sys/#platlibdir","title":"<code>platlibdir</code>","text":"<p>Devuelve las rutas a las bibliotecas del sistema: Ruta a las bibliotecas especificas<pre><code>sys.platlibdir  # ruta a las bibliotecas especificas de la plataforma\n</code></pre></p>"},{"location":"biblioteca/sys/#path-exec_prefix-executable-prefix","title":"<code>path</code>, <code>exec_prefix</code>, <code>executable</code>, <code>prefix</code>","text":"<p>Devuelven las rutas del entorno Python que se est\u00e1 ejecutando actualmente, el cual puede ser el global del sistema (el predefinido del sistema) o un entorno virtual: <pre><code>sys.path    # variable de entorno PYTHONPATH  actual (lista de rutas) \nsys.exec_prefix     # directorio de los archivos Python usados \nsys.executable      # ruta del ejecutable Python actual\nsys.prefix    # directorio para archivos Python independientes de la plataforma\n</code></pre></p>"},{"location":"biblioteca/sys/#hilos","title":"Hilos","text":""},{"location":"biblioteca/sys/#thread_info","title":"<code>thread_info</code>","text":"Data de hilos<pre><code># Informacion del hilo actual: tipo hilo, tipo bloqueo, etc\nsys.thread_info\n</code></pre>"},{"location":"biblioteca/sys/#argumentos-de-entrada","title":"Argumentos de entrada","text":""},{"location":"biblioteca/sys/#entrada-de-argumentos","title":"Entrada de argumentos","text":"<p>Los argumentos de entrada son los valores que se asignan a continuaci\u00f3n del nombre del programa al llamarlo: Ventana de comandos<pre><code>py nombre_programa  argumento_1  argumento_2  ...\n</code></pre> En tanto que los banderines (flags) se asignan luego del nombre del programa en la ventana de comandos:</p> Banderines en ventana de comandos<pre><code>py nombre_programa -FLAG1 -FLAG2 ...\n</code></pre>"},{"location":"biblioteca/sys/#argv","title":"<code>argv</code>","text":"<p>Los argumentos de entrada se leen con el metodo <code>argv</code>:</p> <p>Lectura de argumentos<pre><code>argumentos = sys.argv  # 'argument values'\n\nargumentos          # (lista completa)\nargumentos[0]       # (nombre del script Python)\nargumentos[1]       # 1\u00ba argumento\nargumentos[2]       # 2\u00ba argumento\n</code></pre> Todos los argumentos recibidos se leen como variables string.</p>"},{"location":"biblioteca/sys/#banderines","title":"Banderines","text":"<p>Los banderines (flags) registran las opciones que se pasan por la ventana de comandos y que afectan a la ejecuci\u00f3n del int\u00e9rprete de Python.</p>"},{"location":"biblioteca/sys/#uso","title":"Uso","text":"<p>Este es el formato de uso de los </p> Opciones de Python<pre><code>py -opcion_corta  rutina.py  argumento_rutina\npy --opcion_larga  rutina.py  argumento_rutina\n</code></pre> <p>Por ejemplo, para agregar la opci\u00f3n verbose (texto de reporte espandido) se agregan las opciones <code>-v</code> o <code>--verbose</code>:</p> Opciones de Python<pre><code>py -v  rutina.py  argumento_rutina\npy --verbose  rutina.py  argumento_rutina\n</code></pre>"},{"location":"biblioteca/sys/#flags","title":"<code>flags</code>","text":"<p>Los flags recibidos se leen con el objeto de solo lectura <code>flags</code>:</p> <p>Lectura de banderines (todos)<pre><code>sys.flags           # diccionario con todos los flags detectables\n</code></pre> Dicho objeto tiene un flag espec\u00edfico para cada opci\u00f3n de entrada posible:</p> Lectura de banderines espec\u00edficos<pre><code># banderines especificos \nsys.flags.debug     # s\u00f3lo flag de debugueo\nsys.flags.inspect   # s\u00f3lo flag de inspeccion\nsys.flags.optimize  # s\u00f3lo flag de optimizacion\n# (etc)\n</code></pre> <p>Las opciones implementadas son las siguientes:</p> Atributos Opci\u00f3n (por consola) <code>debug</code> <code>-d</code> <code>inspect</code> <code>-i</code> <code>interactive</code> <code>-i</code> <code>isolated</code> <code>-I</code> <code>optimize</code> <code>-O</code> o <code>-OO</code> <code>dont_write_bytecode</code> <code>-B</code> <code>no_user_site</code> <code>-s</code> <code>no_site</code> <code>-S</code> <code>ignore_environment</code> <code>-E</code> <code>verbose</code> <code>-v</code> <code>bytes_warning</code> <code>-b</code> <code>quiet</code> <code>-q</code> <code>hash_randomization</code> <code>-R</code> <code>dev_mode</code> <code>-X dev</code>(Modo de desarrollo de Python) <code>utf8_mode</code> <code>-X utf8</code>"},{"location":"biblioteca/sys/#uso-de-memoria","title":"Uso de memoria","text":""},{"location":"biblioteca/sys/#getsizeof","title":"<code>getsizeof()</code>","text":"<p>La funci\u00f3n <code>getsizeof()</code> mide la longitud en bytes del objeto que se le asigne como argumento, sean variables, datos, etc:</p> Bytes de datos<pre><code>texto = \"soy un texto\"\npeso_bytes = sys.getsizeof(texto) \n</code></pre>"},{"location":"biblioteca/sys/#getallocatedblocks","title":"<code>getallocatedblocks()</code>","text":"<p><code>getallocatedblocks()</code> indica cu\u00e1ntos bloques de memoria RAM le fueron asignados al programa actual por parte del int\u00e9rprete. Bloques de RAM<pre><code># bloques de memoria asignados al programa actual\nprint(sys.getallocatedblocks())\n</code></pre></p>"},{"location":"biblioteca/sys/#salida-del-programa","title":"Salida del programa","text":""},{"location":"biblioteca/sys/#exit","title":"<code>exit()</code>","text":"<p>La funci\u00f3n <code>exit()</code> ordena el cierre del proceso actual.  Cierre de proceso<pre><code>sys.exit() \n</code></pre> Puede asignarse un n\u00famero entero como retorno para comunicarle a los programas externos. Por ejemplo: el <code>-1</code> suele ser indicativo de error. Cierre de programa con valor de retorno<pre><code>retorno: int = -1       # uso  clasico: -1 -&gt; error del programa\nsys.exit([retorno]) \n</code></pre> Para funcionar correctamente el llamado debe hacerse desde el hilo principal del proceso actual. Esto es pertinente cuando se divide la rutina actual en varios hilos o threads para la ejecuci\u00f3n paralela del c\u00f3digo.</p>"},{"location":"biblioteca/sys/#is_finalizing","title":"<code>is_finalizing()</code>","text":"<p>La funci\u00f3n <code>is_finalizing()</code> verifica si el programa ya se est\u00e1 cerrando.</p> Verificaci\u00f3n de cierre<pre><code>cerrando = sys.is_finalizing()  \n</code></pre>"},{"location":"biblioteca/sys/#hooks-trace-profile","title":"Hooks, trace, profile","text":"<p>(Estudio y explicaci\u00f3n pendiente)</p>"},{"location":"biblioteca/sys/#referencias","title":"Referencias","text":"<p>Documentaci\u00f3n oficial</p>"},{"location":"biblioteca/tempfile/","title":"Tempfile - Archivos Temporales","text":"<p>Python tiene un m\u00f3dulo espec\u00edfico para manejar archivos y directorios temporales. Este m\u00f3dulo se llama temptfile, el cual debe ser importado para su uso: </p> <pre><code>import tempfile\n</code></pre>"},{"location":"biblioteca/tempfile/#archivos-con-nombre","title":"Archivos con nombre","text":"<p>Los archivos temporales se crean con la funci\u00f3n NamedTemporaryFile():</p> <p><pre><code># Crear un archivo temporal con nombre \narchivo_temporal = tempfile.NamedTemporaryFile( \n        mode   = \"w+b\", # modo de apertura\n        prefix = \"\",    # parte del nombre de archivo\n        suffix = \"\",    # extensi\u00f3n de archivo\n        delete = True   # si se cierra el archivo se elimina el archivo\n        )\n</code></pre> Esta funcion crea un descriptor de archivo , el cual no tiene contenido. Los par\u00e1metros mode, delete y prefix son opcionales y se pueden omitir. En cambio suffix puede ser necesario para especificar el formato de los datos mediante la extensi\u00f3n de archivo.</p> <p>Para conocer el nombre de archivo asignado  y poder interactuar con \u00e9l se usa el m\u00e9todo  .name:</p> <p><pre><code>nombre_archivo = archivo_temporal.name\n</code></pre> Cabe se\u00f1alar que el nombre de archivo incluye caracteres aleatorios entre lso campos prefix y suffix, por ello \u00e9stos no son obligatorios. El archivo no puede ser renombrado una vez creado.</p> <p>La asignaci\u00f3n de datos se realiza con el m\u00e9todo .write(): <pre><code>nombre_archivo.write( contenido)\n</code></pre></p> <p>El archivo temporal se elimina tan pronto se produzca el cierre del archivo temporal. Para alterar este comportamiento existe el par\u00e1metro delete:</p> <p><pre><code># Crear un archivo temporal con nombre \narchivo_temporal = tempfile.NamedTemporaryFile(delete = False)\n</code></pre> En este caso el archivo temporal seguir\u00e1 existiendo hasta su eliminaci\u00f3n por el sistema operativo o hasta el reinicio del sistema. Para programar la eliminaci\u00f3n del archivo se puede recurrir a la funcion unlink() del m\u00f3dulo os: <pre><code>import os\n\nos.unlink(archivo_temporal.name)\n</code></pre></p> <p>Ejemplo aplicado: guardar un archivo de imagen PNG como archivo temporal</p> <ol> <li> <p>Creaci\u00f3n de archivo temporal</p> <pre><code># Crear un archivo temporal con nombre \narchivo_temporal = tempfile.NamedTemporaryFile( prefix=\"\", suffix=\".png\")\n</code></pre> </li> <li> <p>Asignaci\u00f3n de datos</p> <p>A. Uso de la funci\u00f3n open() para leer data binaria:</p> <pre><code># apertura archivo en modo lectura binaria\narchivo_disco = open('imagen.png', \"rb\")\ndata = archivo_disco.read()\n\n# Asignacion de data al archivo\narchivo_temporal.write( data )\narchivo_temporal.seek(0)\n</code></pre> <p>B. Delegar la transferencia de datos a bibliotecas espec\u00edficas. Ejemplo: OpenCV <pre><code>import cv2 as cv    # importacion OpenCV\n\nimg = cv.imread('imagen.png') #lectura desde disco\ncv.imwrite(archivo_temporal.name, img) # escritura en RAM\n</code></pre> Importante: Para usar esta opci\u00f3n se necesita especificar correctamente el par\u00e1metro suffix al crear el archivo temporal</p> </li> </ol>"},{"location":"biblioteca/tempfile/#ubicacion-de-archivos-temporales-en-el-sistema","title":"Ubicacion de archivos temporales en el sistema","text":"<p>En GNU/Linux los archivos temporales se encuentran dentro del directorio /tmp. \u00c9stos pueden listarse en consola con dos comandos:</p> <pre><code>cd  /tmp\nls\n</code></pre> <p>En el caso de Windows los archivos temporales sol\u00edan encontrarse en la carpeta 'Temp' dentro de la carpeta de Windows. La lista desde consola se hace con:</p> <p><pre><code>cd 'C:\\Windows\\Temp'\nls\n</code></pre> Windows 10 movi\u00f3 la ruta de los archivos temporales a la carpeta '\\AppData\\Local' dentro de la carpeta del usuario actual:  <pre><code>C:\\Users\\nombre_usuario\\AppData\\Local\\Temp\n</code></pre></p>"},{"location":"biblioteca/tempfile/#enlaces-utiles","title":"Enlaces \u00fatiles:","text":"<p>Documentaci\u00f3n oficial - Modulo Tempfile</p> <p>DelfStack - C\u00f3mo crear archivos temporales en Python</p> <p>Aprender Linux - directorio TMP de Linux todo lo que necesita saber</p>"},{"location":"blog/","title":"Novedades","text":""},{"location":"blog/2024/12/13/versi%C3%B3n-10/","title":"Versi\u00f3n 1.0","text":"<ul> <li>Blog y soporte para RSS implementado.</li> </ul>"},{"location":"blog/2025/05/23/versi%C3%B3n-2/","title":"Versi\u00f3n 2","text":""},{"location":"blog/2025/05/23/versi%C3%B3n-2/#version-210","title":"Versi\u00f3n 2.10","text":"<ul> <li> <p>Secci\u00f3n Anexos creada:</p> <ul> <li>Subsecci\u00f3n IP y Redes creada;</li> <li>Anexo de permisos de usuario movido desde Pathlib;</li> </ul> </li> <li> <p>Secci\u00f3n Contenedores:</p> <ul> <li>Sobreescritura de comandos (<code>CMD</code> y <code>ENTRYPOINT</code>) reexplicados.</li> <li>Argumentos de contrucci\u00f3n (<code>ARG</code>) explicados.</li> <li>Variables de entorno explicadas.</li> <li>Networks explicadas.</li> <li>Port mapping agregado.</li> <li>Variables de entorno reexplicadas.</li> <li>Contenidos b\u00e1sicos revisados y reordenados.</li> <li>Nuevos demos.</li> <li>Secretos explicados.</li> <li>Profiles explicados.</li> <li>Dockerignore explicado.</li> <li>Secci\u00f3n <code>include</code> explicada.</li> <li>Seccion de im\u00e1genes \u00fatiles creada:<ul> <li>Imagenes SQL y NO-SQL agregada.</li> </ul> </li> </ul> </li> <li> <p>Secci\u00f3n Poetry:</p> <ul> <li>Entrypoints (comandos custom) explicados.</li> <li>Empaquetado publicado;</li> <li>Contenidos mejor repartidos;</li> <li>Empaquetado agregado (resumido);</li> <li>Agregado de dependencias mejorado.</li> </ul> </li> <li> <p>Secci\u00f3n Paralelismo renombrada como Ejecuci\u00f3n paralela</p> </li> </ul>"},{"location":"blog/2025/05/23/versi%C3%B3n-2/#version-29","title":"Versi\u00f3n 2.9","text":"<ul> <li> <p>Secci\u00f3n Paralelismo:      Procesos</p> <ul> <li>Tuberias (<code>pipe</code>) y colas (<code>queue</code>) explicadas;</li> </ul> </li> <li> <p>Secci\u00f3n Traducciones:</p> <ul> <li>Secci\u00f3n creada;</li> <li>Paquete i18n reexplicado;</li> </ul> </li> <li> <p>Secci\u00f3n Contenedores:</p> <ul> <li>Seccion creada</li> <li>Primeros contenidos:</li> <li>Introducci\u00f3n, primeros pasos;</li> <li>Imagenes de Python;</li> <li><code>CMD</code>, <code>ENTRYPOINT</code>;</li> <li>Variables de entorno;</li> <li>Volumenes;</li> </ul> </li> <li> <p>Secci\u00f3n Excepciones y Testing:</p> <ul> <li>Doctests agregados;</li> </ul> </li> </ul>"},{"location":"blog/2025/05/23/versi%C3%B3n-2/#version-28","title":"Versi\u00f3n 2.8","text":"<ul> <li>Secci\u00f3n Paralelismo: <ul> <li>Subsecci\u00f3n Procesos creada;</li> <li>Procesos y forks explicados;</li> <li>Elementos de sincronismo  <code>Lock</code>, <code>Event</code> explicados;</li> <li>Variables compartidas <code>Value</code> y <code>Array</code> explicados;</li> </ul> </li> </ul>"},{"location":"blog/2025/05/23/versi%C3%B3n-2/#version-27","title":"Versi\u00f3n 2.7","text":"<ul> <li> <p>Secci\u00f3n Excepciones y Testing creada:</p> <ul> <li>Cl\u00e1usula <code>assert</code> explicada;</li> <li>Cl\u00e1usula <code>raise</code> explicada;</li> <li><code>try</code>, <code>except</code> y derivados mejor explicados;</li> <li>Excepciones personalizadas agregadas;</li> </ul> </li> <li> <p>Secci\u00f3n Etiquetas anulada;</p> </li> </ul>"},{"location":"blog/2025/05/23/versi%C3%B3n-2/#version-26","title":"Versi\u00f3n 2.6","text":""},{"location":"blog/2025/05/23/versi%C3%B3n-2/#contenidos","title":"Contenidos","text":"<ul> <li>Poetry agregado.</li> </ul>"},{"location":"blog/2025/05/23/versi%C3%B3n-2/#version-25","title":"Versi\u00f3n 2.5","text":""},{"location":"blog/2025/05/23/versi%C3%B3n-2/#contenidos_1","title":"Contenidos","text":"<ul> <li>Secci\u00f3n 'Entornos virtuales' creada;</li> <li>Explicaci\u00f3n de entornos locales corregida;</li> <li>Explicaci\u00f3n de venv corregida;</li> <li>Operadores bit a bit, de pertenencia y de identidad agregados.</li> </ul>"},{"location":"blog/2025/05/23/versi%C3%B3n-2/#version-24","title":"Versi\u00f3n 2.4","text":""},{"location":"blog/2025/05/23/versi%C3%B3n-2/#contenidos_2","title":"Contenidos","text":"<ul> <li>Secci\u00f3n 'Pathlib' creada. Contenido corregido</li> <li>Listas de comprension reubicadas</li> <li>Listas: explicacion retocada.</li> <li>Secci\u00f3n 'Argparse' creada.</li> <li>Secci\u00f3n de funci\u00f3n <code>main</code> creada.</li> </ul>"},{"location":"blog/2025/05/23/versi%C3%B3n-2/#version-23","title":"Versi\u00f3n 2.3","text":""},{"location":"blog/2025/05/23/versi%C3%B3n-2/#cambios-de-interfaz","title":"Cambios de interfaz","text":"<ul> <li>Tema autom\u00e1tico agregado</li> <li>Plugin Pagetree (\u00edndices autom\u00e1ticos) incorporado </li> <li>Archivos de blog unificados</li> </ul>"},{"location":"blog/2025/05/23/versi%C3%B3n-2/#contenidos_3","title":"Contenidos","text":"<ul> <li>Secci\u00f3n 'Archivos' reordenada y corregida</li> <li>Paquete PyYAML reubicado y corregido</li> <li>Secci\u00f3n 'Datos' (sobre tipos de datos en Python) creada.</li> <li>Secci\u00f3n 'Funciones' creada y mejorada.</li> </ul>"},{"location":"blog/2025/05/23/versi%C3%B3n-2/#version-22","title":"Versi\u00f3n 2.2","text":""},{"location":"blog/2025/05/23/versi%C3%B3n-2/#nuevos-contenidos","title":"Nuevos contenidos","text":"<ul> <li>M\u00f3dulo calendar resumido y explicado;</li> </ul>"},{"location":"blog/2025/05/23/versi%C3%B3n-2/#correcciones","title":"Correcciones","text":"<ul> <li>M\u00f3dulo datetime con correcciones menores</li> <li>M\u00e9todos especiales (dunder) mejor explicados.</li> <li>Clases: mejor explicaci\u00f3n y UML agregado.</li> <li>Principios SOLID: mejor organizados y con diagramas UML agregados.</li> </ul>"},{"location":"blog/2025/05/23/versi%C3%B3n-2/#version-21","title":"Versi\u00f3n 2.1","text":""},{"location":"blog/2025/05/23/versi%C3%B3n-2/#reordenamiento-de-contenidos","title":"Reordenamiento de contenidos","text":"<ul> <li>Secci\u00f3n 'Tiempo y fechas' creada;</li> <li>M\u00f3dulo time resumido y explicado;</li> <li>M\u00f3dulo datetime explicado;</li> <li>Videos de youtube ahora enbebidos:</li> <li>Secci\u00f3n de Recursos en la barra de menu.</li> </ul>"},{"location":"blog/2025/05/23/versi%C3%B3n-2/#version-20","title":"Versi\u00f3n 2.0","text":""},{"location":"blog/2025/05/23/versi%C3%B3n-2/#reordenamiento-de-contenidos_1","title":"Reordenamiento de contenidos","text":"<ul> <li>Secci\u00f3n Clases: contenido reordenado</li> <li>Secci\u00f3n Paralelismo creada</li> <li>Seccion Funciones creada</li> </ul>"},{"location":"blog/2025/05/23/versi%C3%B3n-2/#tags-implementados","title":"Tags implementados","text":""},{"location":"clases/","title":"Clases","text":"<p>Las clases son objetos que poseen atributos y funcionalidad integrados:</p> <ul> <li>Los atributos son valores guardados de los par\u00e1metros, es decir son variables internas de la clase.</li> <li>La funcionalidad de la clase es representada por m\u00e9todos, que son funciones espec\u00edficas de la clase. </li> </ul> <p>Las clases son el componente fundamental de la Programaci\u00f3n Orientada a Objetos (POO), que es uno de los paradigmas ma\u015b importantes de la programaci\u00f3n.</p> <p>Pilar de Python</p> <p>El lenguaje Python construye todos sus elementos predefinidos: variables, tipos de datos, funciones, etc. en base a clases. Es por esto que las variables, tipos de datos, etc. tienen \"m\u00e9todos\" incorporados, lo cual es un elemento distintivo respecto a otros lenguajes m\u00e1s primitivos como C, C++, etc.</p>"},{"location":"clases/#contenidos","title":"Contenidos","text":"<p>{{  pagetree(siblings) }}</p>"},{"location":"clases/abstracciones/","title":"Clases abstractas","text":"","tags":["Clases","ABC","POO"]},{"location":"clases/abstracciones/#abstraccion","title":"Abstracci\u00f3n","text":"<p>La abstracci\u00f3n consiste en ocultar los detalles innecesarios y mostrar solamente las funcionalidades necesarias.</p> <p>En la pr\u00e1ctica la abstracci\u00f3n se realiza encapsulando los atributos y funcionalidades espec\u00edficos adentro de funcionalidades m\u00e1s generales y por tanto m\u00e1s sencillos de manejar.</p>","tags":["Clases","ABC","POO"]},{"location":"clases/abstracciones/#clases-abstractas_1","title":"Clases Abstractas","text":"<p>Las clases abstractas sirven como plantilla para crear otras clases. En estas clases se enumeran los m\u00e9todos y sus respectivos argumentos que deber\u00e1n ser implementados de manera obligatoria por sus clases derivadas. </p> <p>No se permite crear instancias directamente desde la clase abstracta, sino que se necesita crear subclases de la clase abstracta y a partir de ellas se crean las instancias.</p> <p>Las clases abstractas ayudan a \"maquetar\" el sistema de clases de los programas permitiendo un mejor dise\u00f1o y una mejor mantenibilidad de los programas. Esto se vincula con los principios SOLID de dise\u00f1o.</p>","tags":["Clases","ABC","POO"]},{"location":"clases/abstracciones/#definicion","title":"Definici\u00f3n","text":"<p>Para crear clases abstractas deben importarse la clase <code>ABC</code> y el decorador <code>abstractclassmethod</code> desde el m\u00f3dulo <code>abc</code>: <pre><code>from abc import ABC, abstractclassmethod\n</code></pre></p> <p>La clase <code>ABC</code> es una clase abstracta que sirve de referencia para crear las dem\u00e1s como subclases. Por otra parte el decorador <code>abstractclassmethod</code> permite crear m\u00e9todos abstractos,  los cuales deben usarse o redefinirse s\u00ed o s\u00ed  respetando adem\u00e1s los argumentos de entrada indicados.</p> <p>Clase abstracta<pre><code># Superclase abstracta\nclass Persona(ABC):\n\n    # inicializador abstracto: se invoca o se reemplaza\n    @abstractclassmethod\n    def __init__(self, nombre, edad, actividad):\n        self.nombre = nombre\n        self.edad   = edad  \n        self.actividad = actividad\n\n    #metodo abstracto vac\u00edo: debe redefinirse por las subclases SI O SI\n    @abstractclassmethod\n    def hacer_actividad(self):\n        pass                    # no hace nada             \n\n    # metodo opcional con comportamiento ya definido\n    def presentarse(self):\n        print(f\"Me llamo {self.nombre} y tengo {self.edad} a\u00f1os\")\n</code></pre> Lo interesante de crear un m\u00e9todo abstracto es que \u00e9ste obliga a las subclases a asignarle un comportamiento (polimorfismo) so pena de arrojar error.</p> Subclases de clase abstracta<pre><code># Subclases de la clase abstracta\nclass Estudiante(Persona):\n    def __init__(self, nombre, edad, actividad):\n        # uso inicializador abstracto\n        super().__init__(nombre,edad, actividad)\n\n    #polimorfismo sobre metodo abstracto (obligatorio)\n    def hacer_actividad(self):\n        print(f\"Estoy estudiando: {self.actividad}\")\n\n\nclass Trabajador(Persona):\n    def __init__(self, nombre, edad, actividad):\n        # uso inicializador abstracto\n        super().__init__(nombre,edad, actividad)    \n\n    #polimorfismo sobre metodo abstracto (obligatorio)\n    def hacer_actividad(self):\n        print(f\"Estoy trabajando en: {self.actividad}\")\n</code></pre> <p>Las clases derivadas de la clase abstracta se usan normalmente: Uso de subclases<pre><code>#instancias de las clases 'hijas'\nyo = Estudiante(\"Meh\",\"35\", \"developing\")  \nyo.presentarse() \nyo.hacer_actividad()    # uso metodo modificado\n\ntu = Trabajador(\"Tuh\",\"40\", \"SCRUM Mastering\")   \ntu.presentarse()\ntu.hacer_actividad()    # uso metodo modificado\n</code></pre></p> <p>Error: instancias directas</p> <p>La clase abstracta no admite instancias directas: <pre><code># instancia de clase abstracta\nyo = Persona(\"Meh\",\"35\")    # da ERROR\n</code></pre></p>","tags":["Clases","ABC","POO"]},{"location":"clases/clases/","title":"Introducci\u00f3n a las clases","text":"","tags":["Clases","UML","Mermaid"]},{"location":"clases/clases/#definicion","title":"Definici\u00f3n","text":"<p>La definici\u00f3n de la clase es la encargada de definir la estructura interna de la nueva clase, es decir de darle \"formato\", y de indicar sus funcionalidades. Utiliza la cl\u00e1usula <code>class</code>:</p> Clases - Definici\u00f3n<pre><code>class NombreClase:\n    # inicializaci\u00f3n\n    def __init__(self, param1, param2, ...):\n        # variables internas: 'atributos'\n        self.atributo1 = param1     \n        self.atributo2 = param2\n</code></pre> <p>La palabra <code>self</code> es un elemento auxiliar que apunta a las nuevas \"variables\" creadas en base a la clase, llamadas instancias u objetos.</p>","tags":["Clases","UML","Mermaid"]},{"location":"clases/clases/#instancias-objetos","title":"Instancias (objetos)","text":"<p>Para crear instancias  se llama a la definici\u00f3n de la clase  y se asignan valores a todos los par\u00e1metros en orden,  excepto a <code>self</code> (\u00e9ste se omite):</p> <p>Clases - Instancia<pre><code>nueva_instancia = NombreClase(valor_1, valor_2, ...)\n</code></pre> Recordar que <code>self</code> funciona como un comod\u00edn que hace referencia a cada nueva instancia.</p> <p>En Python a las instancias de clase tambi\u00e9n se las llama objetos.</p> <p>Objetos en Python</p> <p>Un aspecto interesante de Python es que todos sus elementos  (variables, tipos de datos, funciones, etc)  son implementados a partir de las clases,  es decir son objetos. Es por este motivo que  a las funciones asociadas  a cada tipo de variable se las llama m\u00e9todos.</p> <p>Jergas - Py vs JS </p> <p>No confundir la jerga (terminolog\u00eda) de Python con la jerga de JavaScript (JS): en el universo de JS los \"objetos\" son las colecciones de pares clave-valor,  equivalentes a los diccionarios de Python.</p>","tags":["Clases","UML","Mermaid"]},{"location":"clases/clases/#atributos","title":"Atributos","text":"<p>Los atributos son las \"variables\" internas que se crean dentro de cada instancia de la clase.</p>","tags":["Clases","UML","Mermaid"]},{"location":"clases/clases/#atributos-publicos","title":"Atributos p\u00fablicos","text":"<p>Los atributos de la clase son p\u00fablicos por defecto, es decir pueden ser accedidos directamente por su nombre:</p> <pre><code>nombre_instancia.atributo = valor\nvariable = nombre_instancia.atributo\n</code></pre> <p>getters y setters</p> <p>En Python se prefiere evitar  los m\u00e9todos 'get' y  'set' para lectura y escritura de atributos, por ello lo habitual es declarar p\u00fablicos los atributos de inter\u00e9s para el acceso externo  y dejar privados los atributos con data interna de los m\u00e9todos. </p> <p>Este h\u00e1bito contrasta con otros lenguajes donde s\u00ed se habit\u00faa crear metodos espec\u00edficos para leer y escribir la data interna (ejemplo: JavaScript).</p>","tags":["Clases","UML","Mermaid"]},{"location":"clases/clases/#atributos-privados","title":"Atributos privados","text":"<p>Para hacer que los atributos de la clase sean \"privados\"  y por tanto s\u00f3lo puedan ser accedidos desde otros m\u00e9todos de la misma clase se les antepone en su definici\u00f3n dos guiones bajos (<code>__</code>):</p> Clases - atributos privados<pre><code>class NombreClase:\n    def __init__(self, param1 , param2, ...):   \n        #inicializaci\u00f3n (obligatoria)\n        self.atributo1    = param1  # atributo p\u00fablico      \n        self.__atributo2  = param2  # atributo privado\n</code></pre> <p>Si se intenta acceder a un atributo privado desde afuera de los m\u00e9todos de la clase no se disparar\u00e1 un error;  en cambio se crear\u00e1 un atributo alterno con el mismo nombre.  Por este motivo hay que evitar a toda costa el intentar acceder a los atributos privados desde afuera. </p>","tags":["Clases","UML","Mermaid"]},{"location":"clases/clases/#eliminar-atributos","title":"Eliminar atributos","text":"<p>Los atributos pueden ser eliminados llamando al deleter  <code>del</code>:</p> <pre><code>del nombre_instancia.atributo\n</code></pre> <p>S\u00f3lo se eliminar\u00e1 el atributo en la instancia elegida. Todas las dem\u00e1s preservar\u00e1n su atributo intacto.</p>","tags":["Clases","UML","Mermaid"]},{"location":"clases/clases/#metodos","title":"M\u00e9todos","text":"<p>Los m\u00e9todos son las \"funciones\" internas de las que podr\u00e1n disponer las instancias de las clases.</p>","tags":["Clases","UML","Mermaid"]},{"location":"clases/clases/#metodos-publicos","title":"M\u00e9todos p\u00fablicos","text":"<p>Para utilizar los atributos  de cada instancia de clase  se a\u00f1aden los m\u00e9todos,  que se definen as\u00ed:</p> Clases - Definici\u00f3n (con m\u00e9todos)<pre><code>class NombreClase:\n    # inicializaci\u00f3n\n    def __init__(self, param1 , param2, ...):\n        # variables internas: 'atributos'\n        self.atributo1 = param1     \n        self.atributo2 = param2\n\n    # funciones incorporadas: 'm\u00e9todos'\n    def metodo1(self):\n        #c\u00f3digo 1\n\n    def metodo2(self):\n        #c\u00f3digo 2\n</code></pre> <p>Los m\u00e9todos se definen de manera muy similar a las funciones, pero incorporando como primer argumento el objeto <code>self</code>.</p>","tags":["Clases","UML","Mermaid"]},{"location":"clases/clases/#metodos-privados","title":"M\u00e9todos privados","text":"<p>Es posible crear metodos privados defini\u00e9ndolos con dos giones adelante, igual que se hace con los atributos:</p> Clases - M\u00e9todos privados<pre><code>class NombreClase:\n    # inicializaci\u00f3n\n    def __init__(self, param1 , param2, ...):   \n        # codigo inicializacion\n\n    def publico(self):\n        self.__privado(self)\n        # codigo publico\n\n    def __privado(self):\n        # codigo privado\n</code></pre> <p>Si se intenta acceder a un metodo privado desde afuera de la clase se producir\u00e1 un error. </p> <p>Los m\u00e9todos privados son \u00fatiles para hacer rutinas auxiliares de los m\u00e9todos p\u00fablicos de la clase.</p>","tags":["Clases","UML","Mermaid"]},{"location":"clases/clases/#diagramas-uml","title":"Diagramas UML","text":"<p>Los diagramas UML permiten representar a las clases y sus elementos internos de manera gr\u00e1fica. A continuaci\u00f3n se muestra la sintaxis usada para crear diagramas UML con Mermaid.js en Markdown:</p> <pre><code>---\ntitle: UML - Clases\n---\nclassDiagram\n    NombreClase : +atributo1\n    NombreClase : +atributo2\n    NombreClase : +metodo1()\n    NombreClase : +metodo2()</code></pre> <pre><code>    ``` mermaid \n    ---\n    title: UML - Clases\n    ---\n    classDiagram\n        NombreClase : +atributo1\n        NombreClase : +atributo2\n        NombreClase : +metodo1()\n        NombreClase : +metodo2()\n    ```\n</code></pre> <p>El signo <code>+</code> indica que los atributos y los m\u00e9todos creados son p\u00fablicos.  Los m\u00e9todos y atributos privados se indican con el signo <code>-</code>:</p> <pre><code>---\ntitle: UML - Clases\n---\nclassDiagram\n    NombreClase : +atributo_publico\n    NombreClase : -atributo_privado\n    NombreClase : +metodo_publico()\n    NombreClase : -metodo_privado()</code></pre> <pre><code>    ``` mermaid \n    ---\n    title: UML - Clases\n    ---\n    classDiagram\n        NombreClase : +atributo_publico\n        NombreClase : -atributo_privado\n        NombreClase : +metodo_publico()\n        NombreClase : -metodo_privado()\n    ```\n</code></pre>","tags":["Clases","UML","Mermaid"]},{"location":"clases/clases/#referencias","title":"Referencias","text":"<p>Stack Overflow - What's the pythonic way to use getters and setters</p> <p>HecktorProfe - Herencia m\u00faltiple</p> <p>BarcelonaGeeks - Agregaci\u00f3n y Composici\u00f3n</p> <p>DiagramasUML - Diagrama de clases</p>","tags":["Clases","UML","Mermaid"]},{"location":"clases/metodos_especiales/","title":"M\u00e9todos Especiales (dunder)","text":"<p>Los m\u00e9todos especiales son m\u00e9todos  reservados del lenguaje Python  para definir o modificar el comportamiento de las clases  ante determinadas condiciones  u operadores. Los m\u00e9todos especiales van marcados con doble guion a ambos lados de su nombre, por eso se los llama dunder (double underscore).</p> <p>En este ejemplo se muestran algunos de los m\u00e9todos especiales m\u00e1s usados: </p> M\u00e9todos especiales<pre><code>class Persona:\n    # Inicializador de instancias\n    def __init__(self, nombre,edad):     \n        self.nombre = nombre\n        self.edad = edad\n\n    # Conversion a texto todo el contenido\n    def __str__(self):      \n        return f'Persona(nombre={self.nombre}), edad={self.edad}'\n\n    # Crea un formato para representar la clase como texto\n    def __repr__(self):     \n        return f\"Persona('{self.nombre}','{self.edad}')\"\n\n    # Metodos para la sobrecarga de operadores\n    # Ejemplo: suma de clases\n    def __add__(self, otro):        \n        nuevo_valor= self.edad + otro.edad  \n        return Persona(self.nombre+otro.nombre, nuevo_valor)\n</code></pre> <p>Ejemplo de uso:</p> <pre><code># Creacion objeto (instancia)\nyo = Persona('Sam', 138)\n\n# lectura del objeto como texto\ntexto = yo\nprint(texto)               \n\n# representacion del objeto en formato texto\nrepre = repr(yo)\nprint(repre)\n\n# Reconstruccion del objeto desde texto\nresultado = eval(repre)     # funcion  eval()\nprint(resultado.nombre)\nprint(resultado.edad)\n\n# \"Suma\" de clases \ntu = Persona('Ana', 89)\ntu_y_yo = tu + yo\nprint(tu_y_yo)\n</code></pre>","tags":["Clases","Sobrecarga"]},{"location":"clases/metodos_especiales/#sobrecarga-de-operadores","title":"Sobrecarga de operadores","text":"","tags":["Clases","Sobrecarga"]},{"location":"clases/metodos_especiales/#introduccion","title":"Introducci\u00f3n","text":"<p>La sobrecarga de operadores es la capacidad de los lenguajes para ejecutar diferentes operaciones al usar un mismo operador, dependiendo del tipo de operandos que sean afectados.</p> <p>Por ejemplo, el operador <code>+</code> (\"suma\")  se comporta de distinta manera ante variables de tipo <code>int</code>, <code>float</code> y <code>str</code>:</p> <p>Sobrecarga de operadores - Suma<pre><code># suma de enteros\nentero = 3 + 1              # '4'\n\n# suma de flotantes   \nflotante = 1.21 + 2.5       # '3.71'\n\n# concatenaci\u00f3n de strings\ntexto = \"Hola \" + \"Mundo\"   # 'Hola Mundo'         \n</code></pre> En este ejemplo,  las instrucciones del procesador  involucradas para la suma de flotantes  son distintas a las necesarias para la suma de enteros. M\u00e1s a\u00fan, la \"suma\" entre strings ni siquiera es una suma aritm\u00e9tica  sino que es una concatenaci\u00f3n (copia de datos al final). En cualquier caso, el int\u00e9rprete  \"elige\" qu\u00e9 operaciones ejecutar  para cada operador seg\u00fan qu\u00e9 tipos de variables afecte.</p> <p>Sin embargo, el int\u00e9rprete no puede adivinar  qu\u00e9 instrucciones ejecutar  ante variables que no tengan un comportamiento predefinido. Por ejemplo, si se define una clase  para manejar vectores de dos dimensiones:</p> Clase para vectores<pre><code>class Vector2D:\n    def __init__(self, x=0, y=0):\n        \"\"\"Crea un vector de dos dimensiones.\"\"\"\n        # componentes internos: x e y\n        self.x = x\n        self.y = y\n</code></pre> <p>el int\u00e9rprete no sabe qu\u00e9 hacer en caso de intentarse la suma entre objetos de esta clase:</p> Suma de vectores - No implementada<pre><code>v = Vector2D( 3,  1 )\nw = Vector2D( 1, -3 )\n\nt = v + w       # error\n</code></pre> <p>y entonces se dispara una excepci\u00f3n:</p> <pre><code>TypeError: unsupported operand type(s) for +: 'Vector2D' and 'Vector2D'\n</code></pre>","tags":["Clases","Sobrecarga"]},{"location":"clases/metodos_especiales/#implementacion","title":"Implementaci\u00f3n","text":"<p>En el ejemplo previo se necesita implementar  la suma vectorial, que deber\u00e1 ejecutarse con el operador <code>+</code>.</p> <p>La operaci\u00f3n de suma se implementa con ayuda  del m\u00e9todo especial <code>__add__</code>:</p> Clase para vectores - Suma vectorial<pre><code>class Vector2D:\n    def __init__(self, x=0, y=0):\n        \"\"\"Crea un vector de dos dimensiones.\"\"\"\n        # componentes internos: x e y\n        self.x = x\n        self.y = y\n\n    def __add__(self, otro):\n        \"\"\"Habilita la suma vectorial con el operador '+'. \"\"\"\n        # Implemento la suma componente a componente\n        x = self.x + otro.x\n        y = self.y + otro.y\n        # Creo un nuevo vector con el resultado\n        return Vector2D(x, y)\n</code></pre> <p>Como la operaci\u00f3n de suma se realiza entre dos objetos, la m\u00e9todo toma como referencia al primer elemento (<code>self</code>)  e incorpora como argumento al segundo  (<code>otro</code>).</p> <p>Una vez implementado el m\u00e9todo, con el se calculan los valores del nuevo vector  y se crea un vector nuevo como retorno.</p> <p>Suma de vectores - Implementada<pre><code>v = Vector2D( 3,  1 )\nw = Vector2D( 1, -3 )\n\nt = v + w       # 't.x=4', 't.y=-2'\n</code></pre> Ahora el int\u00e9rprete sabe como ejecutar esta suma.</p> <p>A continuaci\u00f3n se enumeran  algunos de los m\u00e9todos especiales implementados en Python  para definir el comportamiento  de los operadores.</p> <p>Operadores unarios vs operadores binarios</p> <ul> <li>Los operadores unarios son aquellos  que afectan a un solo elemento.  Sus m\u00e9todos reservados requieren solamente el argumento <code>self</code>.</li> <li>Los operadores binarios son aquellos  que afectan a dos elementos en simult\u00e1neo. Sus m\u00e9todos reservados requieren un argumento adicional.</li> </ul> <p>Argumentos inmutables</p> <p>No se puede cambiar el n\u00famero de argumentos de los m\u00e9todos especiales.  Esto significa que  no se puede reescribir a un operador unario como si fuera binario y viceversa.</p>","tags":["Clases","Sobrecarga"]},{"location":"clases/metodos_especiales/#operadores-aritmeticos","title":"Operadores aritm\u00e9ticos","text":"Operador M\u00e9todo <code>+</code> <code>__add__</code> <code>-</code> <code>__sub__</code> <code>*</code> <code>__mul__</code> <code>**</code> <code>__pow__</code> <code>/</code> <code>__truediv__</code> <code>//</code> <code>__floordiv__</code> <code>%</code> <code>__mod__</code>","tags":["Clases","Sobrecarga"]},{"location":"clases/metodos_especiales/#operadores-logicos","title":"Operadores l\u00f3gicos","text":"Operador M\u00e9todo <code>and</code> <code>__and__</code> <code>or</code> <code>__or__</code> <code>not</code> <code>__not__</code> <p>N\u00f3tese que el operador <code>not</code> es unario.</p>","tags":["Clases","Sobrecarga"]},{"location":"clases/metodos_especiales/#operadores-bit-a-bit","title":"Operadores bit a bit","text":"Operador M\u00e9todo <code>and</code>, <code>&amp;</code> <code>__and__</code> <code>or</code>, <code>|</code> <code>__or__</code> <code>^</code> <code>__xor__</code> <code>~</code> <code>__invert__</code> <code>&lt;&lt;</code> <code>__lshift__</code> <code>&gt;&gt;</code> <code>__rshift__</code> <p>N\u00f3tese que el operador <code>~</code> es unario.</p>","tags":["Clases","Sobrecarga"]},{"location":"clases/metodos_especiales/#operadores-relacionales","title":"Operadores relacionales","text":"Operador M\u00e9todo <code>==</code> <code>__eq__</code> <code>!=</code> <code>__ne__</code> <code>&lt;</code> <code>__lt__</code> <code>&lt;=</code> <code>__le__</code> <code>&gt;</code> <code>__gt__</code> <code>&gt;=</code> <code>__ge__</code>","tags":["Clases","Sobrecarga"]},{"location":"clases/metodos_especiales/#metodos-especiales","title":"M\u00e9todos especiales","text":"","tags":["Clases","Sobrecarga"]},{"location":"clases/metodos_especiales/#__str__","title":"<code>__str__</code>","text":"<p>Este m\u00e9todo permite representar la data interna de la instancia de clase  como texto (<code>str</code>).  Esta representaci\u00f3n es informal y est\u00e1 pensada para dar informaci\u00f3n pr\u00e1ctica al desarrollador.  </p> <p>Esta informaci\u00f3n se consulta con la funci\u00f3n <code>str()</code>:</p> <pre><code>texto = str(objeto)\n</code></pre>","tags":["Clases","Sobrecarga"]},{"location":"clases/metodos_especiales/#__repr__","title":"<code>__repr__</code>","text":"<p>Este m\u00e9todo tambi\u00e9n permite representar la data interna como texto.  A diferencia de <code>__str__</code>, esta informaci\u00f3n debe seguir un formato espec\u00edfico  para poder ser usada por la funci\u00f3n <code>eval()</code>:</p> <pre><code>texto = eval(objeto)\n</code></pre>","tags":["Clases","Sobrecarga"]},{"location":"clases/metodos_especiales/#__init__","title":"<code>__init__</code>","text":"<p><code>__init__</code> es el m\u00e9todo constructor o inicializador. Es el encargado de darle estructura al nuevo objeto.</p> <p><code>__init__</code> siempre es llamado despues que <code>__new__</code>. </p>","tags":["Clases","Sobrecarga"]},{"location":"clases/metodos_especiales/#__new__","title":"<code>__new__</code>","text":"<p>El m\u00e9todo <code>__new__</code> es el encargado de crear las nuevas instancias de la clase. Este m\u00e9todo rara vez es sobreescrito.</p> <p><pre><code>class Clase:\n    def __new__(cls):\n        # Crea la nueva instancia\n        instancia = super().__new__(cls)\n        # devuelve el objeto como retorno\n        return instancia\n</code></pre> El argumento <code>cls</code> representa a la nueva instancia, en contraposici\u00f3n a <code>self</code> que se apunta a s\u00ed mismo. </p> <p>Para funcionar correctamente,  <code>__new__</code> debe crear la nueva instancia (<code>super().__new__(cls)</code>) y retornarla. </p> <p>Argumentos</p> <p>A <code>__new__</code> debe asign\u00e1rsele  los mismos argumentos adicionales  que a <code>__init__</code> para que la ejecuci\u00f3n sea correcta:</p> <pre><code>class Clase:\n    def __new__(cls, *args, **kwargs):      # argumentos gen\u00e9ricos\n        instancia = super().__new__(cls)\n        return instancia\n\n    def __init__(self, argumento_1, argumento_2):\n        pass\n</code></pre> <p><code>__new__</code> siempre es llamado antes que <code>__init__</code>. </p>","tags":["Clases","Sobrecarga"]},{"location":"clases/metodos_especiales/#__call__","title":"<code>__call__</code>","text":"<p>Este m\u00e9todo permite utilizar a los objetos de la clase como si fueran funciones. </p> <p>As\u00ed es la definici\u00f3n:</p> M\u00e9todo __call__ - Definici\u00f3n y uso<pre><code>class Llamable:\n    def __call__(self):\n        print( \"\u00bfMe llamabais?\" )\n\n\nobjeto = Llamable()     # creacion de instancia\nobjeto()                # llamado como si fuera una funci\u00f3n\n</code></pre> <p>Este m\u00e9todo puede manejar atributos y argumentos como cualquier otro. Con ayuda de este m\u00e9todo pueden crearse familias de objetos utilizables como funciones:</p> M\u00e9todo __call__ - Ejemplo<pre><code>class Multiplicador:\n    def __init__(self, valor):\n        self.__valor = valor\n\n    def __call__(self, arg):\n        return self.__valor * arg \n\n\n# instancias con distintos valores de inicializaci\u00f3n\ndoble     = Multiplicador(2)\ntriple    = Multiplicador(3)\ncuadruple = Multiplicador(4)\n\n# uso\nv1 = doble(9)\nv2 = triple(9)\nv3 = cuadruple(9)\n</code></pre>","tags":["Clases","Sobrecarga"]},{"location":"clases/metodos_especiales/#__dict__","title":"<code>__dict__</code>","text":"<p>Este m\u00e9todo ayuda a leer los valores de los atributos internos convertidos a diccionario. En \u00e9l se respetan los nombres de los atributos, que pasan a ser las claves del diccionario devuelto.</p> M\u00e9todo __dict__ - Ejemplo<pre><code># coordenadas X, Y y Z como clase\nclass Coords:\n    def __init__(self):\n        self.x=3\n        self.y=4\n        self.z=-1\n\n\n# instancia de clase\ncoord = Coords()\n#  Lectura de diccionario interno\nprint(coord.__dict__)\n</code></pre>","tags":["Clases","Sobrecarga"]},{"location":"clases/metodos_especiales/#dir","title":"<code>dir()</code>","text":"<p>Esta funci\u00f3n permite consultar los m\u00e9todos implementados de la clase pasada por argumento.</p>","tags":["Clases","Sobrecarga"]},{"location":"clases/metodos_especiales/#referencias","title":"Referencias","text":"<p>Bigcode.es - M\u00e9todos Especiales y Sobrecarga de Operadores en Python</p> <p>GeeksForGeeks - <code>__call__</code> in Python</p> <p>GeeksForGeeks - <code>__init__</code> vs <code>__new__</code></p>","tags":["Clases","Sobrecarga"]},{"location":"clases/poo/","title":"Programacion Orientada a Objetos (POO)","text":"<p>La programaci\u00f3n orientada objetos es un paradigma de programaci\u00f3n que se basa en el uso extensivo de las clases, creando objetos (las instancias de clase) que aglomeran la informaci\u00f3n interna y traen integradas sus funcionalidades espec\u00edficas.</p> <p>Las dos propiedades fundamentales  de la programaci\u00f3n orientada a objetos  son la herencia y el polimorfismo. La herencia  permite definir una clase  que copiar\u00e1 los elementos internos de la clase de referencia en tanto que  el polimorfismo  permite implementar variantes de las funcionalidades originales. </p>","tags":["Clases","POO","UML","Mermaid"]},{"location":"clases/poo/#herencia","title":"Herencia","text":"<p>Una clase puede servir de referencia para otras clases. Si la clase de referencia (superclase) tiene definidos una serie de atributos y de m\u00e9todos entonces la clase \"hija\" (subclase) tambi\u00e9n tendr\u00e1 definidos  esos mismos m\u00e9todos y atributos.</p>","tags":["Clases","POO","UML","Mermaid"]},{"location":"clases/poo/#sintaxis","title":"Sintaxis","text":"<p>Las subclases hacen referencia a su superclase en su definici\u00f3n, la cual se indica como argumento:</p> Herencia - Sintaxis (m\u00e9todo super)<pre><code># Clase padre\nclass Superclase:\n    def __init__(self, valor):\n        self.valor_original = valor      # atributo\n\n    def metodo_original(self):      # metodo        \n        print(\"Soy el m\u00e9todo de la clase padre\")    \n\n\n# Clase hija\nclass Subclase( Superclase ):\n    def __init__(self, x, y):\n        self.valor_agregado = y     # atributo a\u00f1adido\n        super().__init__(x)         # m\u00e9todo para heredar atributos\n\n    def metodo_agregado(self):      # metodo de la subclase\n        print(\"Soy el m\u00e9todo exclusivo de la clase hija\") \n</code></pre> <p>El m\u00e9todo <code>super</code> es el encargado de  llamar al constructor de la clase padre  desde la clase hija  y as\u00ed poder  heredar los atributos de \u00e9sta.  Esto tambi\u00e9n puede hacerse mediante el nombre de la superclase, invocando a su m\u00e9todo <code>__init__</code>:</p> <p>Herencia - Sintaxis (llamado a superclase)<pre><code># Clase hija\nclass Subclase( Superclase ):\n    def __init__(self, x, y):\n        self.valor_agregado = y     # atributo a\u00f1adido\n        Superclase.__init__(x)      # m\u00e9todo para heredar atributos\n</code></pre> Si en la clase hija no se a\u00f1aden atributos no es necesario llamar al constructor (\u00e9ste se hereda):</p> Herencia - Sintaxis (constructor por default)<pre><code># Clase hija\nclass Subclase( Superclase ):\n    pass            # herencia autom\u00e1tica\n</code></pre>","tags":["Clases","POO","UML","Mermaid"]},{"location":"clases/poo/#uso","title":"Uso","text":"<p>Los objetos creados con la clase hija <code>Subclase</code> tienen acceso a los m\u00e9todos de la clase padre <code>Superclase</code>:</p> Herencia - Uso<pre><code>instancia = Subclase( 4 , -2 )\ninstancia.metodo_original()\ninstancia.metodo_agregado()\nprint(f\"Valores: x={instancia.valor_original}, y={instancia.valor_agregado}\")\n</code></pre>","tags":["Clases","POO","UML","Mermaid"]},{"location":"clases/poo/#diagrama-uml","title":"Diagrama UML","text":"<p>A continuaci\u00f3n se muestra el formato en UML para representar la herencia entre clases:</p> <pre><code>---\ntitle: UML - Herencia\n---\nclassDiagram\n    Superclase : +valor_original\n    Superclase : +metodo_original()\n\n    Superclase &lt;|-- Subclase : herencia\n\n    Subclase : +valor_agregado\n    Subclase : +metodo_agregado()</code></pre> <pre><code>```mermaid\n---\ntitle: UML - Herencia\n---\nclassDiagram\n    SuperClase : +valor_original\n    SuperClase : +metodo_original()\n\n    SuperClase &lt;|-- SubClase : herencia\n\n    Subclase : +valor_agregado\n    Subclase : +metodo_agregado()\n```\n</code></pre> <p>donde las clases se vinculan con una flecha vac\u00eda, la cual apunta a la clase base (padre).</p>","tags":["Clases","POO","UML","Mermaid"]},{"location":"clases/poo/#herencia-multiple","title":"Herencia m\u00faltiple","text":"<p>Una misma subclase puede heredar m\u00e9todos y atributos de varias superclases al mismo tiempo.</p> <p>Ejemplo: Herencia m\u00faltiple - Sintaxis (constructor por default)<pre><code># Superclase 'A'\nclass A:\n    def __init__(self):\n        self.x = 0\n    def procedencia(self):\n        print(\"Este m\u00e9todo proviene de A\")\n\n\n# Superclase 'B'\nclass B:\n    def __init__(self):\n        self.y = 0\n    def procedencia(self):\n        print(\"Este m\u00e9todo proviene de B\")\n\n\n# Subclase 'C' , hija de A y B\nclass C(B, A):      \n    pass            # herencia autom\u00e1tica (no a\u00f1ade nada)\n</code></pre></p> <p>La clase C hereda atributos y m\u00e9todos de ambas clases padre. Si hay alg\u00fan m\u00e9todo o atributo con mobres coincidentes entre padres entonces la clase hija mantendr\u00e1 la versi\u00f3n del primer padre en asignarse.</p> <p>Herencia m\u00faltiple - Uso<pre><code># Se crea un objeto de la subclase\ninstancia = C()\n\n# Los atributos de A y B son accesibles\ninstancia.x = 7\ninstancia.y = 10\n# Los m\u00e9todos heredados tienen igual nombre --&gt; se mantiene el primero\ninstancia.procedencia()     # Da: \"Este m\u00e9todo proviene de B\"\n</code></pre> En el ejemplo, el m\u00e9todo <code>procedencia</code> existe tanto en A como en B. Como B se asign\u00f3 primero como clase padre su versi\u00f3n del m\u00e9todo prevalece. </p> <p>Si se deseara a\u00f1adir m\u00e1s atributos a la subclase y usar el m\u00e9todo <code>super</code> est\u00e1 el problema de superposici\u00f3n de inicializadores. La alternativa es llamar a los inicializadores como m\u00e9todo de las superclases.</p> <p>Ejemplo:</p> Herencia m\u00faltiple - Sintaxis (llamado a superclase)<pre><code># Subclase 'C' , hija de A y B\nclass C(B, A):      \n    def __init__(self):     \n        B.__init__(self)    # Inicializador de superclase 'B'\n        A.__init__(self)    # Inicializador de superclase 'A'\n</code></pre> <p>La representaci\u00f3n de la herencia m\u00faltiple en el diagrama UML es la misma que en el caso de la herencia simple:</p> <pre><code>---\ntitle: UML - Herencia m\u00faltiple\n---\nclassDiagram\n    A : +x\n    B : +y\n\n    A &lt;|-- C\n    B &lt;|-- C</code></pre> <pre><code>```mermaid\n---\ntitle: UML - Herencia m\u00faltiple\n---\nclassDiagram\n    A : +x\n    B : +y\n\n    A &lt;|-- C\n    B &lt;|-- C\n```\n</code></pre>","tags":["Clases","POO","UML","Mermaid"]},{"location":"clases/poo/#metodos-y-funciones-utiles","title":"M\u00e9todos y funciones \u00fatiles","text":"","tags":["Clases","POO","UML","Mermaid"]},{"location":"clases/poo/#isinstance","title":"<code>isinstance()</code>","text":"<p>La funci\u00f3n <code>isinstance()</code>  verifica si hay relaci\u00f3n entre un objeto (instancia)  y una clase especificada.</p> <p>Modo de uso: <pre><code>retorno = isinstance( objeto, clase )\n</code></pre></p> <p>En base al ejemplo previo: C es subclase de A y de ambas se crean instancias llamadas a y c:</p> <pre><code>a = A()\nc = C()\n\nprint(isinstance(c, C))     # 'True'\nprint(isinstance(a, A))     # 'True'\n\nprint(isinstance(c, A))     # 'True' (debido a la herencia)\nprint(isinstance(a, C))     # 'False'\n</code></pre>","tags":["Clases","POO","UML","Mermaid"]},{"location":"clases/poo/#issubclass","title":"<code>issubclass()</code>","text":"<p>La funci\u00f3n <code>issubclass()</code> verifica si hay relaci\u00f3n entre un objeto (instancia) y una clase especificada</p> <p>Modo de uso: <pre><code>retorno = issubclass( Subclase, Superclase)\n</code></pre></p> <p>En el ejemplo previo:</p> <pre><code>print(issubclass(C, A))     # 'True': C es subclase de A\nprint(issubclass(A, C))     # 'False': A es SUPERclase de C\n\nprint(issubclass(B, A))     # 'False': A y B NO est\u00e1n vinculados\n</code></pre>","tags":["Clases","POO","UML","Mermaid"]},{"location":"clases/poo/#mro","title":"<code>mro()</code>","text":"<p>El m\u00e9todo <code>mro</code> (method resolution order) de las clases permite consultar el orden de prioridad de las superclases. La superclase m\u00e1s importante se indica primero.</p> <p><pre><code>print(Clase.mro())  # orden del m\u00e1s relevante al \u00faltimo\n</code></pre> En general las clases padre son las m\u00e1s importantes, luego vienen las clases abuelo, etc. Y ante igual jerarqu\u00eda se le da prioridad a la primera clase en indicarse.</p>","tags":["Clases","POO","UML","Mermaid"]},{"location":"clases/poo/#polimorfismo","title":"Polimorfismo","text":"<p>El polimorfismo es el potencial de la subclase para reescribir las propiedades heredadas de la superclase. </p> <p>Supongamos el caso de dos clases, una es hija de la otra y ambas definen un m\u00e9todo con igual nombre llamado <code>calculo</code>.</p> <p><pre><code>class Superclase:\n    def __init__(self, valor):\n        self.valor = valor\n    def calculo(self, x):               # Definicion de un m\u00e9todo\n        print(f\"{self.valor * x} \")     # Producto\n\n\nclass Subclase( Superclase ):\n    def calculo(self, x):               # reescritura del m\u00e9todo heredado\n        print(f\"{self.valor ** x} \")    # Potencia\n</code></pre> Obs\u00e9rvese como el m\u00e9todo <code>calculo</code> puede ser reescrito en la clase hija en tanto que para la clase padre mantiene su f\u00f3rmula original:  <pre><code>p = Superclase(4)\np.calculo(3)    # Producto: da 12\n\nq = Subclase(4)\nq.calculo(3)        # Potencia: da 64\n</code></pre></p> <p>Con el nombre de clase las instancias pueden acceder tanto a los m\u00e9todos de las clases padre como a los m\u00e9todos de las clases hijas.</p> <p>Sintaxis: <pre><code>Clase.metodo( instancia, argumentos)    \n</code></pre></p> <p>En el ejemplo previo:</p> <pre><code>p = Superclase(4)       # instancia de clase padre\nSuperclase.calculo(p, 3)    # Producto: da 12\nSubclase.calculo(p, 3)      # Potencia: da 64\n\nq = Subclase(4)         # instancia de clase hija\nSuperclase.calculo(q, 3)    # Producto: da 12\nSubclase.calculo(q, 3)      # Potencia: da 64\n</code></pre>","tags":["Clases","POO","UML","Mermaid"]},{"location":"clases/poo/#referencias","title":"Referencias","text":"<p>Stack Overflow - What's the pythonic way to use getters and setters</p> <p>HecktorProfe - Herencia m\u00faltiple</p> <p>BarcelonaGeeks - Agregaci\u00f3n y Composici\u00f3n</p> <p>DiagramasUML - Diagrama de clases</p>","tags":["Clases","POO","UML","Mermaid"]},{"location":"clases/property/","title":"Decorador 'Property'","text":"<p>El decorador property es un tipo reservado de decoradores que permite crear m\u00e9todos de acceso, escritura y eliminaci\u00f3n que comparten nombre y que no requerir\u00e1n el uso de par\u00e9ntesis.</p> <p>El desarrollador trabajar\u00e1 con estos m\u00e9todos modificados  por el decorador property como si fueran atributos.</p> <p>Un aspecto interesante de los m\u00e9todos afectados por property es la posibilidad de combinar el procesamiento de los datos internos de la clase con la manipulaci\u00f3n de alg\u00fan atributo espec\u00edfico.  Lo habitual es afectar atributos privados.</p>","tags":["Clases","Decoradores","Property"]},{"location":"clases/property/#definicion","title":"Definici\u00f3n","text":"<p>Se crean hasta tres m\u00e9todos con igual nombre pero que cambian de argumentos y decoradores:</p> <ul> <li> <p>El m\u00e9todo de lectura  (getter)  se implementa agreg\u00e1ndole justo encima de la definici\u00f3n del m\u00e9todo el decorador <code>property</code>  y debe tener la cl\u00e1usula <code>return</code> para devolver el valor del atributo interno deseado;</p> </li> <li> <p>El m\u00e9todo de escritura  (setter) incluye como decorador el nombre del m\u00e9todo seguido de <code>.setter</code>  y el m\u00e9todo debe tener un argumento para ingresar el nuevo valor;</p> </li> <li> <p>El m\u00e9todo de eliminaci\u00f3n (deleter)  tiene como decorador el nombre del m\u00e9todo seguido de <code>.deleter</code>.  Este m\u00e9todo elimina el atributo privado que se le indique con la cl\u00e1usula <code>del</code>.</p> </li> </ul> <p>Sintaxis:</p> M\u00e9todos 'Property' - Definici\u00f3n<pre><code>class Persona:\n    def __init__(self, nombre):\n        self.__myname = nombre      # atributo privado\n\n    # Decorador 'Property'\n    @property                   # metodo \"getter\": acceso\n    def nombre(self):               \n        return self.__myname        \n\n    @nombre.setter              # metodo \"setter\": escritura\n    def nombre(self, nuevo_nombre):     \n        self.__myname = nuevo_nombre   \n\n    @nombre.deleter             # metodo \"deleter\": eliminacion\n    def nombre(self):                   \n        del self.__myname\n</code></pre>","tags":["Clases","Decoradores","Property"]},{"location":"clases/property/#uso","title":"Uso","text":"<p>Los m\u00e9todos creados se ven y se usan como si fueran atributos p\u00fablicos:</p> M\u00e9todos 'Property' - Uso<pre><code># creacion de instancia\nyo = Persona(\"Yoh\")\n\n# Los m\u00e9todos son accedidos como si fueran atributos\nname = yo.nombre        # lectura\nyo.nombre = \"Meh\"       # escritura\ndel yo.nombre           # eliminaci\u00f3n\n</code></pre>","tags":["Clases","Decoradores","Property"]},{"location":"clases/relaciones/","title":"Relaciones entre Clases","text":"","tags":["Clases","POO","UML","Mermaid"]},{"location":"clases/relaciones/#tipos-de-relaciones","title":"Tipos de relaciones","text":"<ul> <li>Composici\u00f3n</li> <li>Agregaci\u00f3n</li> <li>Asociaci\u00f3n</li> <li>Dependencia</li> <li>Herencia</li> </ul>","tags":["Clases","POO","UML","Mermaid"]},{"location":"clases/relaciones/#composicion","title":"Composici\u00f3n","text":"<p>Las clases se pueden componer unas con otras: </p> <pre><code># Clase interior\nclass Interna:\n    def __init__(self):\n        self.valor = 0\n\n    def metodo(self):\n        print(f\"Valor interno: {self.valor}\")\n\n# Clase exterior\nclass Compuesta:\n    def __init__(self):\n        self.interno = Interna()\n</code></pre> <p>En este caso  las dos clases se instancian juntas creando sus respectivos objetos,  pero uno de estos objetos queda contenido adentro del otro.</p> <pre><code>instancia = Compuesta()           # creaci\u00f3n objeto compuesto\ninstancia.interno.valor = 15       # acceso a atributos internos \ninstancia.interno.metodo()         # acceso a m\u00e9todos internos\n# instancia.metodo()              # da ERROR\n</code></pre> <p>Una desventaja de la composici\u00f3n es la eliminaci\u00f3n del objeto interno si el objeto externo se elimina.</p> <p>La composici\u00f3n se representa en los diagramas UML con una l\u00ednea terminada en un rombo lleno que apunta a la clase compuesta:</p> <pre><code>---\ntitle: UML - Composici\u00f3n\n---\nclassDiagram\n    Interna --* Compuesta : composicion</code></pre> <pre><code>```mermaid\n---\ntitle: UML - Composici\u00f3n\n---\nclassDiagram\n    Interna --* Compuesta : composicion\n```\n</code></pre>","tags":["Clases","POO","UML","Mermaid"]},{"location":"clases/relaciones/#agregado-agregacion","title":"Agregado (\"agregacion\")","text":"<p>Esta opci\u00f3n es una alternativa a la composici\u00f3n.  Esta consiste en crear la instancia de la clase interna primero y luego pasarla como argumento para crear la clase exterior:</p> <pre><code># clase interior\nclass Interna:\n    def __init__(self):\n        self.valor = 0\n\n    def metodo(self):\n        print(f\"Valor interno: {self.valor}\")\n\n# clase exterior\nclass Agregada:\n    def __init__(self, referencia):\n        self.objeto = referencia\n\n# objeto de la clase interna\ninstancia_interna = Interna()   \n# clase interna como argumento para la otra\ninstancia_agregada = Agregada(instancia_interna)\n# acceso a atributos y m\u00e9todos\ninstancia_agregada.objeto.valor = 15        \ninstancia_agregada.objeto.metodo()\n</code></pre> <p>De esta manera los dos objetos tienen existencia independiente el uno del otro: si uno es eliminado, el otro seguir\u00e1 existiendo.</p> <p>En el diagrama UML, la agregaci\u00f3n se representa con una l\u00ednea terminada en un rombo vac\u00edo que apunta a la clase exterior:</p> <pre><code>---\ntitle: UML - Agregado\n---\nclassDiagram\n    Interna --o Agregada : agregacion</code></pre> <pre><code>```mermaid\n---\ntitle: UML - Agregado\n---\nclassDiagram\n    Interna --o Agregada : agregacion\n```\n</code></pre>","tags":["Clases","POO","UML","Mermaid"]},{"location":"clases/relaciones/#dependencia","title":"Dependencia","text":"<p>Hay una relaci\u00f3n de dependencia cuando una clase depende de otra para poder funcionar.</p> <p>La dependencia se representa en UML como una flecha fina que apunta de la clase dependiente a la clase requerida:</p> <pre><code>---\ntitle: UML - Dependencia\n---\nclassDiagram\n    Dependiente --&gt; Requerida : dependencia</code></pre> <pre><code>```mermaid\n---\ntitle: UML - Dependencia\n---\nclassDiagram\n    Dependiente --&gt; Requerida : dependencia\n```\n</code></pre>","tags":["Clases","POO","UML","Mermaid"]},{"location":"clases/relaciones/#asociacion","title":"Asociaci\u00f3n","text":"<p>La asociaci\u00f3n es una relaci\u00f3n sem\u00e1ntica entre dos clases. Las clases est\u00e1n vinculadas entre s\u00ed pero no hay una jerarqu\u00eda entre ellas.</p> <p>La asociaci\u00f3n se representa con una l\u00ednea simple.</p> <pre><code>---\ntitle: UML - Asociaci\u00f3n\n---\nclassDiagram\n    Clase 1 -- Clase 2 : asociaci\u00f3n</code></pre> <pre><code>```mermaid\n---\ntitle: UML - Asociaci\u00f3n\n---\nclassDiagram\n    Clase 1 -- Clase 2 : asociaci\u00f3n\n```\n</code></pre>","tags":["Clases","POO","UML","Mermaid"]},{"location":"clases/relaciones/#herencia","title":"Herencia","text":"<p>La herencia es una relaci\u00f3n jer\u00e1rquica donde una clase (superclase) sirve de referencia a la otra (subclase), hered\u00e1ndole sus atributos y sus m\u00e9todos. </p> <p>Es la relaci\u00f3n que habilita las propiedades de herencia y polimorfismo explicadas en el cap\u00edtulo de POO.</p> <p>Se representa con una flecha vac\u00eda apuntando a la clase de mayor jerarqu\u00eda, es decir la superclase.</p> <pre><code>---\ntitle: UML - Herencia\n---\nclassDiagram\n    SuperClase &lt;|-- SubClase : herencia</code></pre> <pre><code>```mermaid\n---\ntitle: UML - Herencia\n---\nclassDiagram\n    SuperClase &lt;|-- SubClase : herencia\n```\n</code></pre>","tags":["Clases","POO","UML","Mermaid"]},{"location":"clases/relaciones/#referencias","title":"Referencias","text":"<p>Stack Overflow - What's the pythonic way to use getters and setters</p> <p>HecktorProfe - Herencia m\u00faltiple</p> <p>BarcelonaGeeks - Agregaci\u00f3n y Composici\u00f3n</p> <p>DiagramasUML - Diagrama de clases</p>","tags":["Clases","POO","UML","Mermaid"]},{"location":"clases/singleton/","title":"Singleton","text":"<p>Singleton es considerado un patr\u00f3n de dise\u00f1o. Se trata de un tipo de clases que crean una \u00fanica instancia a lo largo de todo el programa.</p>"},{"location":"clases/singleton/#definicion","title":"Definici\u00f3n","text":"<p>Este tipo de clases requiere definir el m\u00e9todo <code>__new__</code> y crear un atributo adicional con valor <code>None</code>, que en este ejemplo se llama <code>_instance</code>:</p> Instancia \u00fanica - definici\u00f3n b\u00e1sica<pre><code>class Singleton:\n\n    _instance = None    # atributo compartido\n\n    def __new__(cls):\n        if not cls._instance:\n            print(\"creacion de instancia Singleton\")\n            cls._instance = super(Singleton, cls).__new__(cls)\n        else:\n            print(\"instancia repetida\")\n        return cls._instance\n</code></pre> <p>Lo usual es agregar argumentos gen\u00e9ricos al m\u00e9todo <code>__new__</code> y definir el m\u00e9todo <code>__init__</code>: </p> Instancia \u00fanica - definici\u00f3n t\u00edpica<pre><code>class Singleton:\n\n    _instance = None    # atributo compartido\n\n    def __new__(cls, *args, **kwargs):\n        if not cls._instance:\n            print(\"creacion de instancia Singleton\")\n            cls._instance = super(Singleton, cls).__new__(cls)\n        else:\n            print(\"instancia repetida\")\n        return cls._instance\n\n    def __init__(self, argumento_1, argumento_2):\n        pass\n</code></pre>"},{"location":"clases/singleton/#uso","title":"Uso","text":"<p>Si se intentara crear ma\u015b de una instancia lo que se obtendr\u00e1 como salida es una referencia a la primera instancia creada:</p> Instancia \u00fanica - llamado<pre><code># todas las instancias son la misma\ninstancia_1 = Singleton()\ninstancia_2 = Singleton()\n\nprint(instancia_2 is instancia_1)   # 'True'\n</code></pre> <p>Esto puede verificarse en base a la direcci\u00f3n del objeto creado, el cual coincidir\u00e1 en todas las instancias creadas:</p> Instancia \u00fanica - direcci\u00f3n<pre><code>print(instancia_1)  # '&lt;__main__.Singleton object at 0x7efc2cb474d0&gt;'\nprint(instancia_2)  # '&lt;__main__.Singleton object at 0x7efc2cb474d0&gt;'\n</code></pre>"},{"location":"clases/singleton/#ejemplo","title":"Ejemplo","text":"<p>En este ejemplo se crea una clase que guarda en su interior un nombre.</p> <pre><code>class Unico:\n\n    _creado = None\n\n    def __new__(cls,  *args, **kwargs):\n        if not cls._creado:\n            cls._creado = super(Unico, cls).__new__(cls)\n        return cls._creado\n\n    def __init__(self, nombre):\n        self.nombre=nombre\n\n\n# dos llamados a la clase\ninstancia_1 = Unico(\"Simona\")\ninstancia_2 = Unico(\"Alexio\")\n</code></pre> <p>Se corrobora que el valor asignado al nombre es el mismo para todas las instancias.</p> <pre><code>print(instancia_1.nombre)   # 'Alexio'\nprint(instancia_2.nombre)   # 'Alexio'\n</code></pre>"},{"location":"clases/singleton/#referencias","title":"Referencias","text":"<p>MouredevTV (YouTube) - Singleton</p>"},{"location":"clases/solid/","title":"Principios SOLID","text":"","tags":["Clases","ABC","POO","UML"]},{"location":"clases/solid/#introduccion","title":"Introducci\u00f3n","text":"<p>Los principios SOLID son una gu\u00eda de principios cuya aplicaci\u00f3n busca lograr las siguientes ventajas:</p> <ul> <li>Mantenibilidad</li> <li>Reusabilidad</li> <li>Legibilidad</li> <li>Extensibilidad</li> </ul> <p>SOLID son las siglas de los siguientes principios:</p> <ol> <li>SRP: Principio de Responsabilidad \u00danica</li> <li>OCP: Principio de Abierto/Cerrado</li> <li>LSP: Principio de Sustitucion de Liskov</li> <li>ISP: Principio de Segregacion de Interfaz</li> <li>DIP: Principio de Inversion de Dependencias</li> </ol> <p>La aplicaci\u00f3n de estos principios ayuda a mejorar la calidad del c\u00f3digo; sin embargo no es una tarea trivial y debe sopesarse en cada proyecto sus ventajas e inconvenientes.</p> <p>En esta secci\u00f3n se explica cada uno de estos principios.</p>","tags":["Clases","ABC","POO","UML"]},{"location":"clases/solid/#referencias","title":"Referencias","text":"<p>Soy Dalto - Curso de POO desde Cero (Completo)</p>","tags":["Clases","ABC","POO","UML"]},{"location":"clases/solid/dip/","title":"DIP - Principio de Inversion de Dependencias","text":"<p>Este principio busca cumplir dos requisitos:</p> <ul> <li>Los m\u00f3dulos de alto nivel no deben depender de los modulos de bajo nivel. Ambos deben depender de abstracciones;</li> <li>Los detalles deben depender de las abstracciones y no al rev\u00e9s. </li> </ul> <p>En general, las clases de alto nivel se encargar\u00e1n de las generalidades en tanto que las clases de bajo nivel se dedicar\u00e1n a tareas espec\u00edficas.</p> <p>Por ejemplo, sup\u00f3ngase una clase para un corrector ortogr\u00e1fico que depende de una clase de bajo nivel representando un diccionario.</p> <pre><code>---\ntitle: No DIP\n---\nclassDiagram\n\n    Diccionario --* CorrectorOrtografico \n\n    Diccionario: +verificar_palabra(palabra)\n\n    CorrectorOrtografico: +corregir_texto(texto)</code></pre> <p>En este ejemplo la clase compuesta <code>CorrectorOrtografico</code> depende de la clase <code>Diccionario</code> y de sus detalles de implementaci\u00f3n, haciendo que la clase compuesta pueda tener errores si la clase interna cambia. Por otra parte,  si fuera necesario introducir otra clase adentro de la composici\u00f3n  (por ejemplo, una clase <code>ServicioWeb</code> )  tambi\u00e9n podr\u00edan introducirse errores debido a las posibles variantes de implementaci\u00f3n respecto a <code>Diccionario</code>.</p> <p>Este es el c\u00f3digo implementado:</p> DIP (No implementado)<pre><code># MAL: 'CorrectorOrtografico' (alto nivel) depende de 'Diccionario' (bajo nivel)\n\n# clase bajo nivel\nclass Diccionario:\n    def verificar_palabra(self, palabra):\n        pass \n\n# clase alto nivel \nclass CorrectorOrtografico:\n    def __init__(self):\n        # composicion con una clase de menor nivel\n        self.diccionario = Diccionario()\n\n    def corregir_texto(self, texto):\n        pass\n\n\n# Uso de la clase de alto nivel\ncorrector = CorrectorOrtografico(Diccionario())\n</code></pre> <p>La soluci\u00f3n basada en el principio DIP consiste en crear una clase abstracta <code>VerificadorOrtografico</code> que sirva de base para todas las clases aplicadas:</p> <p><pre><code>---\ntitle: DIP\n---\nclassDiagram\n    VerificadorOrtografico --* CorrectorOrtografico\n    VerificadorOrtografico &lt;|-- Diccionario \n    VerificadorOrtografico &lt;|-- ServicioWeb\n    Diccionario &lt;-- CorrectorOrtografico \n    ServicioWeb &lt;-- CorrectorOrtografico  \n\n    VerificadorOrtografico: +verificar_palabra(palabra)\n\n    CorrectorOrtografico: +corregir_texto(texto)</code></pre> de esta forma las clases que conforman la composici\u00f3n (<code>CorrectorOrtografico</code>, <code>Diccionario</code> y <code>ServicioWeb</code>) pasan a tener la misma jerarqu\u00eda entre ellas y cualquier cambio en las especificaciones de la clase abstracta corrige autom\u00e1ticamente a todas estas clases por igual.</p> <p>Este es el c\u00f3digo implementado:</p> DIP<pre><code>from abc import ABC, abstractmethod\n\n# clase abstracta de referencia\nclass VerificadorOrtografico(ABC):\n    @abstractmethod\n    def verificar_palabra(self, palabra):\n        pass\n\n\n# TODAS las otras clases se basan en la clase abstracta\n\n# clase bajo nivel\nclass Diccionario(VerificadorOrtografico):\n    def verificar_palabra(self, palabra):\n        pass\n\n\n# clase alto nivel (extra)\nclass ServicioWeb(VerificadorOrtografico):\n    def verificar_palabra(self, palabra):\n        pass\n\n\n# clase alto nivel\nclass CorrectorOrtografico:\n    def __init__(self, verificador: VerificadorOrtografico):\n        # agregacion con una clase abstracta\n        # el argumento est\u00e1 \"moldeado\" por una clase abstracta y por ello aceptar\u00e1 a cualquiera de sus clases hijas\n        self.verificador = verificador\n\n    def corregir_texto(self, texto):\n        pass\n\n\n# Uso de la clase de alto nivel\ncorrector = CorrectorOrtografico(Diccionario())\ncorrector = CorrectorOrtografico(ServicioWeb())\n</code></pre>","tags":["Clases","ABC","POO","UML"]},{"location":"clases/solid/isp/","title":"ISP - Principio de Segregacion de Interfaz","text":"<p>\"Ningun usuario debe ser obligado a usar interfaces que no necesite\". Hay que eliminar las dependencias que no se necesiten.</p> <p>Interfases en Python</p> <p>Python no usa la creacion de interfases, como sucede con otros lenguajes. En Python las interfases son impl\u00edcitas.</p> <p>Supongase que hay dos clases llamadas <code>Humano</code> y <code>Robot</code>  que representan las actividades de conjunto: comer, dormir y trabajar. Estas actividades son representadas por m\u00e9todos de una superclase abstracta llamada <code>Actividades</code>:</p> ISP (No implementado)<pre><code># NO ISP\n# Clase abstracta gen\u00e9rica describiendo multiples actividades\nclass Actividades(ABC):\n    def trabajar(self):\n        print(\"Trabajando\")\n\n    def comer(self):\n        print(\"Comiendo\")\n\n    def dormir(self):\n        print(\"Durmiendo\")\n\n# Los humanos trabajan, comen y duermen\nclass Humano( Actividades ):\n\n# ERROR:\n# Los robots no comen ni duermen pero heredan estas actividades\nclass Robot( Actividades ):\n</code></pre> <p>El diagrama UML equivalente es el siguiente:</p> <pre><code>---\ntitle: No ISP\n---\nclassDiagram\n\n    Actividades: +trabajar()\n    Actividades: +comer()\n    Actividades: +dormir()\n\n    Actividades &lt;|-- Humano\n    Actividades &lt;|-- Robot</code></pre> <p>Se observa que la clase <code>Robot</code> hereda los m\u00e9todos <code>comer</code> y <code>dormir</code>, los cuales no tienen sentido para esta clase dado que los robots no comen ni duermen.</p> <p>Para prevenir este problema primero se crean varias clases abstractas separadas para declarar cada m\u00e9todo utilizable por las clases:</p> ISP - Clases abstractas<pre><code>from abc import ABC, abstractclassmethod\n\nclass Trabajador(ABC):\n    @abstractclassmethod\n    def trabajar(self):\n        pass\n\nclass Comedor(ABC):\n    @abstractclassmethod\n    def comer(self):\n        pass\n\nclass Durmiente(ABC):\n    @abstractclassmethod\n    def dormir(self):\n        pass\n</code></pre> <p>Cada clase utiliza herencia simple o m\u00faltiple heredando solamente las superclases abstractas que necesita y luego redefine sus m\u00e9todos:</p> <p>ISP - Herencias selectivas<pre><code># Los humanos trabajan, comen y duermen --&gt; heredan todos\nclass Humano(Trabajador, Comedor, Durmiente):\n    def comer(self):\n        print(\"El humano est\u00e1 comiendo\")\n\n    def trabajar(self):\n        print(\"El humano est\u00e1 trabajando\")\n\n    def dormir(self):\n        print(\"El humano est\u00e1 durmiendo\")\n\n\n# Los robots no comen ni duermen --&gt; No heredan lo que no necesitan\nclass Robot(Trabajador):\n    def trabajar(self):\n        print(\"El ROBOT est\u00e1 trabajando\")\n</code></pre> De esta manera cada clase s\u00f3lo tiene acceso a los m\u00e9todos que tienen sentido para ella. As\u00ed queda el diagrama de clases:</p> <pre><code>---\ntitle: ISP\n---\nclassDiagram\n\n    Trabajador: +trabajar()\n    Comedor: +comer()\n    Durmiente: +dormir()\n\n    Trabajador &lt;|-- Humano\n    Comedor &lt;|-- Humano\n    Durmiente &lt;|-- Humano\n\n    Trabajador &lt;|-- Robot</code></pre> <p>Se verifica que los objetos creados con estas clases heredan solamente los m\u00e9todos requeridos por cada una:</p> <p>ISP - Instancias<pre><code># instancias de prueba\nhumano = Humano()\nrobot  = Robot()\n\n# m\u00e9todos accesibles para cada objeto\nhumano.comer()\nhumano.trabajar()\nhumano.dormir()\n\nrobot.trabajar()\n\n# m\u00e9todos inexistentes\n# robot.comer()         # da error (no est\u00e1 definido)\n# robot.dormir()        # da error (no est\u00e1 definido)\n</code></pre> En resumen: creando varios m\u00e9todos abstractos en clases separadas se previenen problemas de herencia.</p>","tags":["Clases","ABC","POO","UML"]},{"location":"clases/solid/lsp/","title":"LSP - Principio de Sustituci\u00f3n de Liskov","text":"<p>Este principio especifica que toda clase debe ser sustituible por su clase base. Esta regla comprende tanto los casos en que hay herencia de m\u00e9todos como tambi\u00e9n los casos en que hay composici\u00f3n o agregaci\u00f3n de clases.</p> <p>Toda subclase hereda todas las propiedades de su superclase. Pero esto puede introducir conflictos l\u00f3gicos bajo ciertas circunstancias.</p> <p>Ejemplo: capacidad de vuelo de las aves. Lo primero que se viene a la mente respecto a las aves su la capacidad de volar...</p> LSP (No implementado)<pre><code>class Ave:\n    def volar(self):\n        return \"Puedo volar\"        # asumimos una propiedad general\n\nclass Avestruz(Ave):\n    def volar(self):\n        return \"NO puedo volar\"     # hay un conflicto de herencia\n</code></pre> <p>... pero hay muchas aves que no pueden volar, como es el caso de los avestruces.</p> <p>Este es el diagrama UML equivalente: <pre><code>---\ntitle: No LSP\n---\nclassDiagram\n\n    Ave: +volar()\n\n    Ave &lt;|--  Avestruz</code></pre></p> <p>La soluci\u00f3n a este problema consiste en crear distintas clases intermedias alternativas entre s\u00ed que se repartan las propiedades conflictivas: </p> LSP<pre><code>class Ave:\n    pass\n\nclass AveVoladora(Ave):\n    def volar(self):\n        return \"Puedo volar\"        \n\nclass AveNoVoladora(Ave):\n    pass   \n\nclass Avestruz(AveNoVoladora):\n    pass                        # No se hereda la propiedad de vuelo\n</code></pre> <p>As\u00ed queda el diagrama de clases: <pre><code>---\ntitle: LSP\n---\nclassDiagram\n\n    AveVoladora: +volar()\n\n    Ave &lt;|-- AveVoladora\n    Ave &lt;|-- AveNoVoladora\n\n    AveNoVoladora &lt;|-- Avestruz</code></pre></p>","tags":["Clases","ABC","POO","UML"]},{"location":"clases/solid/lsp/#referencias","title":"Referencias","text":"<p>FreeCodeCamp - Los principios SOLID explicados en espa\u00f1ol</p>","tags":["Clases","ABC","POO","UML"]},{"location":"clases/solid/ocp/","title":"OCP - Principio de Abierto/Cerrado","text":"<p>Las entidades de software (clases, funciones) deben ser \"Abiertas para extension, cerradas para modificacion\". Este principio busca prevenir la modificaci\u00f3n por parte de las clases hijas de los m\u00e9todos heredados, prefiriendo en cambio la escritura desde cero de los m\u00e9todos.</p> <p>Imag\u00ednese una clase para gestionar notificaciones por e-mail. Si se deseara crear un sistema para enviar otro tipo de notificaciones (por ejemplo, un SMS) a partir de la clase creada se necesitar\u00eda reescribir el m\u00e9todo <code>Notificar</code> para implementar la notificaci\u00f3n por SMS:</p> OCP (No implementado)<pre><code>class NotificadorEmail:\n    def __init__(self, usuario, mensaje):\n        self.usuario = usuario          # objeto con datos del usuario\n        self.mensaje = mensaje\n\n    def Notificar(self):\n        print(f\"Enviando MAIL a {self.usuario.email}\")\n\n\nclass NotificadorEmail( NotificadorEmail ):\n\n    def Notificar(self):\n        print(f\"Enviando SMS a {self.usuario.sms}\")\n</code></pre> <p>Este es el diagrama UML equivalente: <pre><code>---\ntitle: No OCP\n---\nclassDiagram\n\n    NotificadorEmail: +usuario\n    NotificadorEmail: +mensaje\n    NotificadorEmail: +Notificar()\n\n    NotificadorEmail &lt;|--  NotificadorSMS\n    NotificadorSMS: +Notificar()</code></pre></p> <p>A continuaci\u00f3n se modifica el sistena para adaptar el programa a este principio.</p> <p>La clase <code>Notificador</code> (superclase) crea un m\u00e9todo para manejar mensajes de notificacion cuyo comportamiento interno no est\u00e1 definido:</p> OCP - clase de base<pre><code>class Notificador:\n    def __init__(self, usuario, mensaje):\n        self.usuario = usuario          # objeto con datos del usuario\n        self.mensaje = mensaje\n\n\n    def Notificar(self):                # Metodo gen\u00e9rico\n        raise NotImplementedError       # error por comportamiento no definido\n</code></pre> <p>Las subclases se encargan de adaptar el envio de notificaciones en base a distintas v\u00edas de comunicacion: mail, SMS, etc.  definiendo el comportamiento del m\u00e9todo:</p> OCP - clases derivadas<pre><code>class NotificadorEmail( Notificador )\n    def Notificar(self):\n        print(f\"Enviando MAIL a {self.usuario.email}\")\n\nclass NotificadorSMS( Notificador )\n    def Notificar(self):\n        print(f\"Enviando SMS a {self.usuario.sms}\")\n\n# (otros)\n</code></pre> <p>De esta manera en vez de reescribir el m\u00e9todo de la clase original se crean clases hijas con el comportamiento deseado para cada situaci\u00f3n.</p> <p>Este es el diagrama UML equivalente: <pre><code>---\ntitle: OCP\n---\nclassDiagram\n\n    Notificador: +usuario\n    Notificador: +mensaje\n    Notificador: +Notificar()*\n\n    Notificador &lt;|--  NotificadorEmail\n    Notificador &lt;|--  NotificadorSMS\n    NotificadorEmail: +Notificar()\n    NotificadorSMS: +Notificar()</code></pre></p>","tags":["Clases","ABC","POO","UML"]},{"location":"clases/solid/srp/","title":"SRP - Principio de Responsabilidad Unica","text":"<p>Cada clase debe tener una \u00fanica responsabilidad o tarea.  Si se necesitan varias responsabilidades o tareas \u00e9stas deben repartirse en varias clases.</p> <p>Imag\u00ednese por ejemplo una clase que representa un usuario de un servicio inform\u00e1tico con m\u00faltiples funcionalidades:</p> SRP (No implementado)<pre><code>class Usuario:\n\n\n    def actualizar_nombre(self, valor):\n        pass\n\n    def actualizar_contrasenia(self, valor):\n        pass\n\n    def actualizar_email(self, valor):\n        pass\n\n    def actualizar_telefono(self, valor):\n        pass\n\n    def notificar_email(self, mensaje):\n        pass\n\n    def notificar_sms(self, mensaje):\n        pass\n</code></pre> <p>En este ejemplo la clase <code>Usuario</code> involucra m\u00faltiples funcionalidades bien diferenciadas, que en este caso son la gesti\u00f3n de los datos persionales y los mecanismos de comunicaci\u00f3n del sistema con el usuario.</p> <p>Este es el diagrama de clases:</p> <pre><code>---\ntitle: No SRP\n---\nclassDiagram\n\n    Usuario: +actualizar_nombre()\n    Usuario: +actualizar_contrasenia()\n    Usuario: +actualizar_email()\n    Usuario: +actualizar_telefono()\n\n    Usuario: +notificar_email()\n    Usuario: +notificar_sms()</code></pre> <p>Cualquier agregado en estas funcionalidades,  como tambi\u00e9n cualquier agregado de nuevas funcionalidades, implica el modificar esta clase principal, agreg\u00e1ndole complejidad y dificultando la mantenibilidad.</p> <p>La alternativa propuesta por el principio SRP consiste en repartir los m\u00e9todos entre dos clases:</p> <ul> <li><code>Usuario</code> para los datos personales de usuario</li> <li><code>Notificaciones</code> para implementar los mecanismos de comunicaci\u00f3n con cada usuario.</li> </ul> SRP<pre><code>class Usuario:\n    def actualizar_nombre(self, valor):\n        pass\n\n    def actualizar_contrasenia(self, valor):\n        pass\n\n    def actualizar_email(self, valor):\n        pass\n\n    def actualizar_telefono(self, valor):\n        pass\n\n\nclass Notificaciones:\n    def __init__(self, usuario: Usuario, mensaje):\n        self.usuario = usuario         \n        self.mensaje = mensaje\n\n    def notificar_email(self, mensaje):\n        pass\n\n    def notificar_sms(self, mensaje):\n        pass\n</code></pre> <p>Las dos clases son relacionadas en este ejemplo mediante una agregaci\u00f3n donde la clase <code>Notificaciones</code> depende de una instancia de la clase <code>Usuario</code>.</p> <p>As\u00ed queda el diagrama de clases:</p> <pre><code>---\ntitle: SRP\n---\nclassDiagram\n\n    Usuario: +actualizar_nombre()\n    Usuario: +actualizar_contrasenia()\n    Usuario: +actualizar_email()\n    Usuario: +actualizar_telefono()\n\n    Notificaciones: +notificar_email()\n    Notificaciones: +notificar_sms()\n\n    Usuario o-- Notificaciones</code></pre>","tags":["Clases","ABC","POO","UML"]},{"location":"contenedores/","title":"Despliegue en contenedores","text":""},{"location":"contenedores/#introduccion","title":"Introducci\u00f3n","text":"<p>Los contenedores son m\u00e1quinas virtuales simplificadas que permiten una puesta en marcha controlada de aplicaciones e incluso de sistemas completos.</p> <p>Este tutorial se centra en el despliegue de contenedores con programas gestores como Docker y Podman, usando en lo posible el comando Compose. Este comando permite simplificar la configuraci\u00f3n de los contenedores mediante archivos YAML.</p> <p>Demos preconstruidos</p> <p>Se incorporaron algunos demos al repositorio para un seguimiento de los temas algo m\u00e1s ameno. Estos se explican por tem\u00e1tica a lo largo del cap\u00edtulo.</p>"},{"location":"contenedores/#contenidos","title":"Contenidos","text":"<p>{{  pagetree(subtree) }}</p>"},{"location":"contenedores/archivo_dockerfile/","title":"Archivo Dockerfile","text":""},{"location":"contenedores/archivo_dockerfile/#idea-general","title":"Idea general","text":"<p>El archivo Dockerfile es el archivo de configuraci\u00f3n que se necesita para crear y modificar las im\u00e1genes: agregar las rutinas del programa, instalar dependencias adicionales, etc. </p> <p>Su uso es indispensable para cualquier proyecto que dependa de rutinas propias.</p>"},{"location":"contenedores/archivo_dockerfile/#sintaxis-generica","title":"Sintaxis gen\u00e9rica","text":"<p>Sup\u00f3ngase un proyecto sencillo escrito en Python, cuya estructura de archivos es la siguiente:</p> Arbol de archivos - Proyecto<pre><code>.\n\u251c\u2500\u2500 src\n\u2502   \u2514\u2500\u2500 rutina.py\n\u2514\u2500\u2500 requirements.txt\n</code></pre> <p>En este ejemplo las rutinas de Python se alojan en la carpeta <code>src</code> y se adjunta un archivo de requisitos para instalar los paquetes necesarios.</p> <p>Se agrega el archivo de configuraci\u00f3n al proyecto para crear la imagen:</p> Arbol de archivos - Proyecto (con Dockerfile)<pre><code>.\n\u251c\u2500\u2500 src\n\u2502   \u2514\u2500\u2500 rutina.py\n\u251c\u2500\u2500 requirements.txt\n\u2514\u2500\u2500 Dockerfile\n</code></pre> <p>El archivo Dockerfile tiene una forma como esta:</p> Dockerfile - b\u00e1sico<pre><code># imagen de base - version fija\nFROM python:alpine\n\n# directorio de trabajo del contenedor (se crea autom\u00e1ticamente)\nWORKDIR /code\n\n# copia de archivo de dependencias al directorio de trabajo\nCOPY requirements.txt ./\n\n# instalaci\u00f3n de paquetes de python\nRUN pip install --no-cache-dir -r requirements.txt\n\n# actualizaci\u00f3n de PIP\nRUN pip install --upgrade pip\n\n# copia de rutinas al directorio de trabajo\nCOPY src/ ./\n\n# comando, opciones y argumentos\nCMD [\"python\", \"rutina.py\"]\n</code></pre> <p>Al ser construida la imagen su estructura interna toma esta forma:</p> Arbol de archivos - Imagen<pre><code>/\n|   # directorios est\u00e1ndar\n\u251c\u2500\u2500 run\n\u251c\u2500\u2500 root\n\u251c\u2500\u2500 etc\n\u251c\u2500\u2500 ...\n|   # directorio de trabajo\n\u2514\u2500\u2500 code\n    \u251c\u2500\u2500 requirements.txt\n    \u2514\u2500\u2500 rutina.py\n</code></pre>"},{"location":"contenedores/archivo_dockerfile/#clausulas-basicas","title":"Cl\u00e1usulas b\u00e1sicas","text":"<p>El archivo Dockerfile tiene una serie de cl\u00e1usulas b\u00e1sicas que se explican a continuaci\u00f3n.</p>"},{"location":"contenedores/archivo_dockerfile/#from","title":"<code>FROM</code>","text":"<p>La cl\u00e1usula <code>FROM</code> especifica qu\u00e9 imagen de base se utilizar\u00e1 para el proyecto. Permite indicar nombre y etiqueta de versi\u00f3n.</p> <p>Uso:</p> Imagen de referencia<pre><code>FROM  nombre_imagen:tag_version\n</code></pre> <p>Esta cl\u00e1usula es obligatoria y se indica al comienzo.</p>"},{"location":"contenedores/archivo_dockerfile/#workdir","title":"<code>WORKDIR</code>","text":"<p><code>WORKDIR</code> definer una ruta de trabajo  para el programa dentro del contenedor. Si dicha ruta no existe en la imagen original entonces es creada autom\u00e1ticamente.</p> <p>Uso:</p> Directorio de trabajo<pre><code>WORKDIR ruta_interna_contenedor\n</code></pre>"},{"location":"contenedores/archivo_dockerfile/#copy","title":"<code>COPY</code>","text":"<p>Con <code>COPY</code> se copian los contenidos necesarios del proyecto al interior de la nueva imagen. El c\u00f3digo fuente, los archivos de dependencias,  assets (iconos, imagenes, etc.) se transfieren de esta manera.</p> <p>Uso:</p> Copia de contenidos<pre><code>COPY archivo_proyecto   ruta_destino/   \nCOPY carpeta_proyecto/  ruta_destino/\n</code></pre> <p>Esta cl\u00e1usula se usa igual que el comando <code>cp</code> de Bash. Si la ruta de destino indicada es del tipo relativa entonces se toma por referencia el directorio de trabajo.</p>"},{"location":"contenedores/archivo_dockerfile/#run","title":"<code>RUN</code>","text":"<p>Este comando se usa t\u00edpicamente para instalar paquetes adicionales del sistema operativo. Estos paquetes quedar\u00e1n guardados dentro de la imagen final.</p> <p>Por ejemplo, para instalar los paquetes de Python con PIP lo habitual es hacerlo mediante archivo TXT y deshabilitando la cach\u00e9 de PIP:</p> Paquetes - PIP<pre><code>RUN pip install --no-cache-dir -r requirements.txt\n</code></pre> <p>la instalaci\u00f3n de paquetes en la imagen con PIP se hace de manera global: crear un entorno virtual no trae ninguna ventaja porque el mismo contenedor har\u00e1 las veces de entorno virtual.</p> <p>Si se necesitan instalar paquetes faltantes del sistema operativo se llama a su gestor de paquetes:</p> DebianAlpine Paquetes - Gestor APT<pre><code>RUN apt install paquete_debian\n</code></pre> Paquetes - Gestor APK<pre><code>RUN apk add paquete_alpine\n</code></pre> <p>N\u00f3tese que no es necesario agregar la cl\u00e1usula <code>sudo</code> para instalar paquetes dentro de las im\u00e1genes.</p>"},{"location":"contenedores/archivo_dockerfile/#cmd","title":"<code>CMD</code>","text":"<p><code>CMD</code> define qu\u00e9 comando deber\u00e1 ejecutar la imagen cuando sea puesto en marcha dentro de un contenedor. Tambi\u00e9n permite definir argumentos posicionales y opciones preasignados.</p> <p>La notaci\u00f3n recomendada es la siguiente:</p> Comandos<pre><code>CMD [\"comando\", \"argumento_1\", \"argumento_1\", \"--opcion_1\", ...]\n</code></pre> <p>En el caso de implementar rutinas de Python el comando habitual es <code>python</code> y el primer argumento ser\u00e1 el nombre de la rutina principal:</p> Comandos en Python<pre><code>CMD [\"python\", \"rutina.py\", \"argumento_rutina\", \"--opcion_rutina\"]\n</code></pre> <p>Los comandos y opciones definidos por <code>CMD</code> pueden ser sobreescritos externamente durante el despliegue del contenedor.</p> <p><code>CMD</code> siempre se especifica al final.</p>"},{"location":"contenedores/archivo_dockerfile/#construccion","title":"Construcci\u00f3n","text":"<p>La construcci\u00f3n de la nueva imagen se realiza siguiendo el orden indicado en el archivo Dockerfile.</p> <p>El gestor de contenedores usado s\u00f3lo repite los pasos de construcci\u00f3n donde detecta cambios: c\u00f3digo fuente reemplazado, cambios en las dependencias y sus versiones, etc.</p> <p>Copia de c\u00f3digo fuente al final</p> <p>El c\u00f3digo fuente se copia cerca del final porque es lo que cambia con mayor frecuencia. De esta manera se minimiza el tiempo de construcci\u00f3n.</p> <p>Hay varias maneras de construir las im\u00e1genes:</p>"},{"location":"contenedores/archivo_dockerfile/#directa-comando-build","title":"directa - comando <code>build</code>","text":"<p>El comando <code>build</code> construye la imagen y le asigna el nombre y versi\u00f3n especificados por la opci\u00f3n <code>-t</code>.</p> <p>Uso b\u00e1sico:</p> Construir - build<pre><code>cd ruta_dockerfile\npodman build .  -t nuevo_nombre:version \n</code></pre>"},{"location":"contenedores/archivo_dockerfile/#indirecta-comando-compose","title":"indirecta - comando <code>compose</code>","text":"<p>En este caso la construcci\u00f3n de la imagen se realiza indirectamente durante el despliegue con el comando <code>compose</code>, el cual requiere  a su vez el archivo <code>compose.yml</code></p> <p>Esto se explica en cap\u00edtulos posteriores.</p>"},{"location":"contenedores/args/","title":"Argumentos de construcci\u00f3n","text":"<p>Dentro del Dockerfile se permite pasar argumentos para modificar los par\u00e1metros de construcci\u00f3n de las im\u00e1genes. Estos argumentos son borrados cuando la construcci\u00f3n est\u00e1 completada.</p>"},{"location":"contenedores/args/#creacion","title":"Creaci\u00f3n","text":"<p>La cl\u00e1usula reservada para crear los argumentos de imagen es <code>ARG</code>. Tras ella se define el nombre de argumento y se le asigna un valor:</p> Dockerfile - Argumentos<pre><code>ARG ARGUMENTO=valor_default\n</code></pre> <p>Un uso habitual es la elecci\u00f3n de la versi\u00f3n de una imagen de referencia. Por ejemplo se puede definir  el argumento <code>TAG_IMAGEN</code> para elegir el tag de la versi\u00f3n de Python:</p> Dockerfile - Tags como argumentos<pre><code># definicion de argumento\nARG TAG_IMAGEN=3.13-alpine3.21\n# asignacion como default\nFROM python:${TAG_IMAGEN}\n</code></pre> <p>entonces la versi\u00f3n elegida para la contrucci\u00f3n de la imagen final ser\u00e1 el int\u00e9rprete 3.13 instalada en Alpine Linux salvo indicaci\u00f3n contraria.</p>"},{"location":"contenedores/args/#modificacion","title":"Modificaci\u00f3n","text":"<p>Con el p\u00e0r\u00e1metro <code>args</code> del campo <code>build</code> se elige un nuevo valor para el arguimento.</p> <p>La asignaci\u00f3n se puede hacer por mapeo:</p> compose.yml - Argumentos<pre><code>services:\n\n  contenedor: \n    build:\n      context: .    # ruta al Dockerfile\n      args:\n        ARGUMENTO: valor_custom\n</code></pre> <p>La asignaci\u00f3n se puede hacer tambi\u00e9n como lista:</p> compose.yml - Argumentos<pre><code>services:\n\n  contenedor: \n    build:\n      context: .    # ruta al Dockerfile\n      args:\n        - ARGUMENTO=valor_custom\n</code></pre> <p>En ambos casos se necesita indicar la ruta al Dockerfile con el campo <code>context</code>.</p> <p>Retomando el ejemplo previo, para elegir como referencia la imagen reducida de Python 3.13 instalada en Debian Trixie:</p> compose.yml - Tag como argumento<pre><code>services:\n\n  contenedor_python: \n    build:\n      context: .    # ruta al Dockerfile\n      args:\n        TAG_IMAGEN: 3.13-slim-trixie\n</code></pre>"},{"location":"contenedores/args/#asignacion-desde-terminal","title":"Asignaci\u00f3n desde terminal","text":"<p>El valor del argumento se puede pasar durante el despliegue con el comando <code>compose</code> con ayuda de la opci\u00f3n <code>build-arg</code>:</p> Despliegue - Tag desde shell<pre><code>podman compose up --build  --build-arg TAG_IMAGEN=3.13.1-slim-bookworm\n</code></pre>"},{"location":"contenedores/comandos/","title":"Fijar y modificar comandos","text":"<p>En esta secci\u00f3n se ve c\u00f3mo se pueden cambiar los comandos elegidos para las im\u00e1genes desde el archivo <code>compose.yml</code> y tambi\u00e9n como los comandos pueden ser fijados desde el Dockerfile.</p>"},{"location":"contenedores/comandos/#elegir-comandos","title":"Elegir comandos","text":"<p>El par\u00e1metro <code>command</code> del archivo <code>compose.yml</code> sirve para sobreescribir el comando definido con la cl\u00e1usula <code>CMD</code> del Dockerfile.</p> <p>En el ejemplo del primer despliegue el demo se ejecuta desde la sell Bash con la sentencia:</p> Bash - ejecuci\u00f3n de rutina<pre><code>python contar.py 4\n</code></pre> <p>El comando fue adaptado al Dockerfile con la cl\u00e1usula <code>CMD</code>.</p> Dockerfile - comando sobreescribible<pre><code># comando, opciones y argumentos (sobreescribibles)\nCMD [\"python\", \"contar.py\", \"4\"]\n</code></pre> <p>Este comando puede ser ignorado definiendo el campo <code>command</code>. Por ejemplo, para cambiar la cuenta final de 4 a 10:</p> compose.yml - sobreescribir cuenta<pre><code>services:\n\n  demo-contador:\n    build: .\n    command: \"python contar.py 10\"  # cuenta m\u00e1xima alterada\n</code></pre> <p>Tambi\u00e9n se puede ignorar la rutina interna de la imagen, por ejemplo para consultar la versi\u00f3n del int\u00e9rprete Python instalada:</p> compose.yml - omitir rutina interna<pre><code>services:\n\n  demo-contador:\n    build: .\n    command: \"python --version\" # versi\u00f3n de Python\n</code></pre> <p>Tambi\u00e9n se pueden ejecutar otros programas incluidos en la imagen por ejemplo para conocer qu\u00e9 versi\u00f3n del kernel Linux se incluy\u00f3 internamente:</p> compose.yml - cambiar de comando<pre><code>services:\n\n  demo-contador:\n    build: .\n    command: \"uname -a\"     # info sobre el kernel usado\n</code></pre>"},{"location":"contenedores/comandos/#fijar-comandos","title":"Fijar comandos","text":"<p>El archivo Dockefile tiene una cl\u00e1usula espec\u00edfica para fijar comandos, argumentos y opciones a ser ejecutados por el contenedor llamada <code>ENTRYPOINT</code>. Con esta cl\u00e1usula se define la parte obligatoria del comando en tanto que la parte opcional se delega en la cl\u00e1usula <code>CMD</code>.</p> <p>Por ejemplo, si el comando original es:</p> Dockerfile - comando sobreescribible<pre><code># comando, opciones y argumentos (sobreescribibles)\nCMD [\"python\", \"contar.py\", \"4\"]\n</code></pre> <p>entonces para forzar la ejecuci\u00f3n de la rutina <code>contar.py</code> se hace:</p> Dockerfile - comando fijo<pre><code># comando, opciones y argumentos fijos\nENTRYPOINT [\"python\", \"contar.py\"]\n\n# opciones y argumentos opcionales/sobreescribibles\nCMD [\"4\"]\n</code></pre> <p>y en el archivo Compose s\u00f3lo se podr\u00e1n asignar los argumentos de la rutina:</p> compose.yml - comando fijo<pre><code>services:\n\n  demo-contador:\n    build: .\n    command: \"7\"     # valor opcional: cuenta m\u00e1xima\n</code></pre> <p>En este caso todo lo que se ingrese con la cl\u00e1usula <code>command</code> ser\u00e1 pasado como argumento a la rutina de Python.</p>"},{"location":"contenedores/compose/","title":"Compose","text":""},{"location":"contenedores/compose/#archivo-compose","title":"Archivo Compose","text":"<p>El archivo <code>compose.yml</code> sirve para definir los par\u00e1metros de creaci\u00f3n y funcionamiento del contenedor (o los contenedores) del proyecto. Se trata de un archivo YAML, es decir un tipo de archivos que es habitualmente usado para definir diccionarios y listas de datos mediante indentado, lo que lo hace muy f\u00e1cil de interpretar visualmente.</p> <p>Una de las grandes ventajas que proporciona el uso de este archivo es el despliegue de proyectos enteros mediante el comando simplificado llamado <code>compose</code>.</p> <p>docker-compose.yml</p> <p>Este archivo es llamado en muchos proyectos como <code>docker-compose.yml</code>. Tambi\u00e9n puede pon\u00e9rsele la extensi\u00f3n <code>.yaml</code>.</p>"},{"location":"contenedores/compose/#nombre-de-proyecto","title":"Nombre de proyecto","text":"<p>El campo <code>name</code> asigna un nombre al proyecto, el cual ser\u00e1 le\u00eddo por el gestor de contenedores y suele ser usado para nombrar a los elementos internos del proyecto.</p> compose.yml - nombre<pre><code>name: mi_proyecto\n</code></pre> <p>Si este campo no se indica expl\u00edcitamente entonces se asigna autom\u00e1ticamente. Suele tomarse el nombre de la carpeta que contiene al archivo.</p>"},{"location":"contenedores/compose/#seccion-services","title":"Secci\u00f3n <code>services</code>","text":"<p>La secci\u00f3n <code>services</code> es la de uso m\u00e1s habitual porque en ella se definen los contenedores del proyecto. Cada proyecto funciona como un entorno aislado donde los contenedores internos son incapaces de interactuar con otros proyectos ni tampoco con el sistema anfitri\u00f3n.</p> <p>Este es un esquema t\u00edpico: </p> <pre><code>---\ntitle: \"Servicios - idea b\u00e1sica\"\nconfig:\n  markdownAutoWrap: false\n---\nflowchart LR\n\n    subgraph proyecto [Entorno proyecto]\n\n        subgraph services [Servicios]\n          c1[\"`Contenedor 1`\"]\n          c2[\"`Contenedor 2`\"]\n        end\n\n    end</code></pre> <p>A cada contenedor se le pone un \"nombre de servicio\" a elecci\u00f3n del usuario y bajo \u00e9l se definen los par\u00e1metros del container que se necesiten. A continuaci\u00f3n se muestran algunos de los par\u00e1metros m\u00e1s habituales.</p>"},{"location":"contenedores/compose/#image","title":"<code>image</code>","text":"<p>Si se necesita usar una imagen preconstruida que no experimentar\u00e1 cambios internos se usa solamente el campo <code>image</code>. En este caso, el gestor de contenedores buscar\u00e1 localmente la imagen indicada por su nombre y versi\u00f3n para crear el contenedor. Si no se encuentra la imagen pedida, entonces el gestor buscar\u00e1 e intentar\u00e1 descargar la imagen desde alguno de los proveedores de im\u00e1genes habilitados.</p> <p>La sintaxis b\u00e1sica es la siguiente:</p> <p>compose.yml - imagen preconstruida<pre><code>services:\n\n  base-datos:         # nombre de servicio - arbitrario\n    image: nombre_imagen:tag_version\n</code></pre> Si no se indica ning\u00fan tag entonces se asigna el tag <code>latest</code> autom\u00e1ticamente.</p> <p>Algunos ejemplos de uso para <code>image</code>:</p> <ul> <li>Gestores de bases de datos: MariaDB, PostgreSQL, Redis, MongoDB, etc.</li> <li>Servidores proxy, balanceadores de carga: Apache, NGINX, Traefik.</li> <li>Frameworks: Wordpress, Mkdocs, Sphynx.</li> </ul> <p>Por ejemplo, para utilizar la versi\u00f3n 9.3 de MySQL:</p> compose.yml - imagen preconstruida (ejemplo)<pre><code>services:\n\n  base-datos:    # nombre de servicio - arbitrario\n    image: mysql:9.3.0  # tag: '9.3.0'\n</code></pre>"},{"location":"contenedores/compose/#build","title":"<code>build</code>","text":"<p>Si se necesita crear una imagen a medida de una aplicaci\u00f3n, o se necesita instalar componentes adicionales a la imagen entonces se usa el campo <code>build</code> (\"construir\"). Este campo indica la ruta a un archivo Dockerfile que servir\u00e1 como referencia para crear la nueva imagen a partir de una preexistente. Si la imagen preexistente no existe entonces se la descarga autom\u00e1ticamente.</p> compose.yml - construir imagen<pre><code>services:\n\n  nueva-imagen:             # nombre de servicio - arbitrario\n    build: ruta_dockerfile  # ruta relativa al Dockerfile\n</code></pre> <p>El nombre asignado a la imagen modificada es una composici\u00f3n del nombre del proyecto y del nombre de servicio. </p> <p>Etiquetar im\u00e1genes</p> <p>Si <code>image</code> y <code>build</code> son indicados en el mismo contenedor entonces se crear\u00e1 una nueva imagen siguiendo los pasos indicados por el Dockerfile y a \u00e9sta se la nombrar\u00e1 con el nombre y etiqueta especificados por el campo <code>image</code>. Si la etiqueta se omite se asigna autom\u00e1ticamente el tag <code>latest</code>.</p> <p>Ejemplo: compose.yml - construir imagen y etiquetar<pre><code>services:\n\nnueva-imagen:\n    build: .\n    image: mi-imagen:v1.0\n</code></pre></p>"},{"location":"contenedores/compose/#container_name","title":"<code>container_name</code>","text":"<p>El nombre del contenedor es un par\u00e1metro opcional que sirve para gestionar el contenedor desde la terminal mediante comandos espec\u00edficos. Funciona como un identificador \u00fanico del contenedor en el sistema local y por tanto no puede repetirse entre varios contenedores existentes.</p> <p>Ejemplo de uso:</p> compose.yml - contenedor con nombre<pre><code>services:\n\n  base-datos:    \n    image: mysql:9.3.0 \n    container_name: contenedor_mysql\n</code></pre>"},{"location":"contenedores/compose/#comando-compose","title":"Comando Compose","text":"<p>El comando Compose interpreta el archivo <code>compose.yml</code> y con el crea, ejecuta, lee y borra los contenedores indicados en el proyecto. La terminal debe estar ubicada en la ruta del archivo para funcionar.</p> <p>Implementaciones</p> <p>Dependiendo de la implementaci\u00f3n del comando Compose instalada en el sistema, el comando se debe llamar como:</p> <pre><code>docker-compose comando  # Docker - versiones viejas / paquete externo\ndocker compose comando  # Docker - versiones nuevas\npodman-compose comando  # Podman - Paquete externo\npodman compose comando  # Podman Desktop - extension\n</code></pre> <p>Elegir la variante que corresponda seg\u00fan el componente instalado en el sistema. En este tutorial se asumir\u00e1 que es <code>podman compose comando</code> </p>"},{"location":"contenedores/compose/#creacion-y-arranque","title":"Creaci\u00f3n y arranque","text":"<p>El proyecto se crea con el comando <code>up</code>.</p> compose - creaci\u00f3n<pre><code>podman compose up\n</code></pre> <p>Este comando descarga la imagen indicada por el Dockerfile en caso de ser necesario y crea la imagen personalizada. Luego pone en marcha al contenedor y muestra los mensajes de log a medida que se producen.</p> <p>El comando <code>up</code> no reconstruye la imagen en caso de modificarse la rutina Python. Para forzar la reconstrucci\u00f3n hay que agregar la opci\u00f3n <code>build</code>:</p> compose - creaci\u00f3n (forzar construcci\u00f3n)<pre><code>podman compose up --build\n</code></pre>"},{"location":"contenedores/compose/#solo-arranque","title":"S\u00f3lo arranque","text":"<p>La puesta en marcha en segundo plano se realiza con el comando <code>start</code>:</p> <p>compose - arranque<pre><code>podman compose start\n</code></pre> En este caso se omite la construcci\u00f3n de los contenedores.</p>"},{"location":"contenedores/compose/#registro","title":"Registro","text":"<p>La consulta del registro de logs pasados se hace con <code>logs</code>:</p> compose - registros<pre><code>podman compose logs\n</code></pre> <p>Los logs de cada contenedor tambi\u00e9n se pueden consultar desde el cliente gr\u00e1fico tanto de Docker como de Podman.</p>"},{"location":"contenedores/compose/#borrado","title":"Borrado","text":"<p>El proyecto se elimina con el comando <code>down</code>:</p> compose - borrado<pre><code>podman compose down\n</code></pre> <p>Este comando apaga los contenedores del proyecto y los elimina.</p>"},{"location":"contenedores/dependencia/","title":"Dependencias entre contenedores","text":"<p>De manera predefinida se asume que los distintos contenedores del proyecto funcionan de manera independiente unos de otros. Por este motivo el programa gestor intenta poner los contenedores en marcha de manera paralela de ser posible, y sino se lo hace en un orden arbitrario. Esto no no siempre es admisible debido a que a veces algunos contenedores dependen de otros para funcionar correctamente.</p>"},{"location":"contenedores/dependencia/#dependencia-basica","title":"Dependencia b\u00e1sica","text":"<p>Para aquellos casos donde se requiera que unos contenedores arranquen despu\u00e9s que otros se utiliza el campo <code>depends_on</code>:</p> compose.yml - dependencia (simple)<pre><code>services:\n\n  primero:\n    image: imagen_1\n\n  segundo:\n    image: imagen_2\n    depends_on: \n    - primero\n</code></pre> <p>Durante el despliegue el segundo contenedor se crea despu\u00e9s del primero. Durante la eliminaci\u00f3n el segundo contenedor es removido primero.</p> <p>Un contenedor determinado puede depender  de m\u00faltiples servicios al mismo tiempo. Por ejemplo, un contenedor podr\u00eda depender de otros dos contenedores ya inicializados para poder funcionar:</p> compose.yml - dependencia (m\u00faltiple)<pre><code>services:\n\n  primero:\n    image: imagen_1\n\n  primero-bis:\n    image: imagen_1bis\n\n  segundo:\n    image: imagen_2\n    depends_on: \n    - primero\n    - primero-bis\n</code></pre> <p>El servicio <code>segundo</code> siempre se despliega luego que los otros dos ya hayan arrancado. Tambi\u00e9n es detenido por completo primero antes que los otros dos comiencen su parada.</p>"},{"location":"contenedores/dependencia/#opciones-avanzadas","title":"Opciones avanzadas","text":"<p>A las dependencias de servicios se les puede configurar varias opciones adicionales:</p> compose.yml - dependencia (avanzado)<pre><code>services:\n\n  primero:\n    image: imagen_1\n\n  segundo:\n    image: imagen_2\n    depends_on: \n        primero:\n            restart: true\n            condition: service_started  # valor default\n            required: true              # valor por default\n</code></pre> <ol> <li> <p>El par\u00e1metro <code>condition</code> admite varias opciones repecto al servicio apuntado:</p> <ul> <li><code>service_started</code>: el servicio debe haber arrancado (opci\u00f3n predefinida);</li> <li><code>service_healthy</code>: el servicio debe estar funcionando correctamente, esto se comprueba con un test espec\u00edfico;</li> <li><code>service_completed_successfully</code>: el servicio debe completarse exitosamente.</li> </ul> </li> <li> <p>El par\u00e1metro <code>restart</code> ordena el reinicio del contenedor actual en cuanto el servicio requerido est\u00e9 listo.</p> </li> <li> <p>El par\u00e1metro <code>required</code> especifica si es obligatorio que el servicio apuntado haya sido arrancado o est\u00e9 disponible. Si es seteado como <code>false</code> entonces  el comando <code>compose</code> s\u00f3lo advertir\u00e1 en caso que el servicio requerido no est\u00e1 disponible, no inici\u00f3 o finaliz\u00f3 de manera incorrecta.</p> </li> </ol>"},{"location":"contenedores/dependencia/#test-de-servicio","title":"Test de servicio","text":"<p>Los tests de servicio ayudan a verificar que los contenedores requeridos por los dem\u00e1s est\u00e9n funcionando adecuadamente. S\u00f3lo cuando los tests requeridos sean exitosos se ponen en marcha los contenedores dependientes.</p>"},{"location":"contenedores/dependencia/#definicion","title":"Definici\u00f3n","text":"<p>Los tests incorporados en las im\u00e1genes se definen adentro del archivo <code>Dockerfile</code> mediante la cl\u00e1usula <code>HEALTHCHECK</code>:</p> <p>Dockerfile - definir healthcheck<pre><code>HEALTHCHECK [opciones] CMD comando_predefinido\n</code></pre> N\u00f3tese que esta cl\u00e1usula se usa en combinaci\u00f3n con la cl\u00e1usula <code>CMD</code>.</p>"},{"location":"contenedores/dependencia/#opciones","title":"Opciones","text":"<p>Las opciones permitidas y sus valores predefinidos son los siguientes:</p> Opci\u00f3n Valor default <code>--interval=DURACION</code> <code>30s</code> <code>--timeout=DURACION</code> <code>30s</code> <code>--start-period=DURACION</code> <code>0s</code> <code>--start-interval=DURACION</code> <code>5s</code> <code>--retries=INTENTOS</code> <code>3</code> <p>Los tiempos son medidos por default en segundos (<code>s</code>). Tambi\u00e9n pueden declararse en minutos (<code>m</code>), horas (<code>h</code>), d\u00edas (<code>d</code>), etc\u00e9tera.</p>"},{"location":"contenedores/dependencia/#valor-de-retorno","title":"Valor de retorno","text":"<p>El valor de salida del comando es el que indica al sistema si el test fue exitoso o no. Los valores posibles son:</p> Valor retorno significado <code>0</code> success - test correcto <code>1</code> unhealthy - test fallido <code>2</code> reserved  (no utilizar)"},{"location":"contenedores/dependencia/#ejemplos-de-uso","title":"Ejemplos de uso","text":"<p>Por ejemplo,  para que el test sea reintentado cada 5 minutos y su duraci\u00f3n no pase de 3 segundos:</p> Dockerfile - definir healthcheck (ejemplo)<pre><code>HEALTHCHECK --interval=5m --timeout=3s \\\n  CMD comando_healthcheck || exit 1\n</code></pre> <p>En caso de requerirse la anulaci\u00f3n del chequeo interno se escribe simplemente <code>NONE</code>:</p> Dockerfile - healthcheck bypasseado<pre><code>HEALTHCHECK NONE\n</code></pre>"},{"location":"contenedores/dependencia/#healthcheck-con-python","title":"Healthcheck con Python","text":"<p>Si el healthcheck de la imagen est\u00e1 implementado dentro de una rutina de Python entonces la forma del comando ser\u00eda algo como:</p> Dockerfile - healthcheck en Python<pre><code>HEALTHCHECK --interval=5m --timeout=3s \\\n  CMD python rutina_healthcheck.py\n</code></pre> <p>en tal caso se requiere que los valores de retorno sean acordes con el resultado del test.</p> <p>Si en cambio se utiliza un comando o test que pueda fallar en el proceso (por ejemplo Pytest) entonces el comando quedar\u00eda as\u00ed:</p> Dockerfile - healthcheck (otros comandos)<pre><code>HEALTHCHECK --interval=5m --timeout=3s \\\n  CMD pytest carpeta_tests/ || exit 1\n</code></pre>"},{"location":"contenedores/dependencia/#uso","title":"Uso","text":"<p>El uso b\u00e1sico del healthcheck se establece en el archivo <code>compose.yml</code>.</p>"},{"location":"contenedores/dependencia/#basico","title":"B\u00e1sico","text":"<p>Eligiendo la condici\u00f3n <code>service_healthy</code> se ordena la ejecuci\u00f3n del test predefinido:</p> compose.yml - con healthcheck (default)<pre><code>services:\n\n  primero:\n    image: imagen_1\n\n  segundo:\n    image: imagen_2\n    depends_on: \n        primero:\n            condition: service_healthy  \n</code></pre> <p>Se asume que el servicio apuntado  tiene ya definido un test de funcionamiento, de otro modo la ejecuci\u00f3n fallar\u00e1.</p>"},{"location":"contenedores/dependencia/#modificacion","title":"Modificaci\u00f3n","text":"<p>Mediante el par\u00e1metro <code>healthcheck</code> se puede cambiar qu\u00e9 comando de test realizar sobre el contenedor elegido y modificar sus opciones de ejecuci\u00f3n:</p> compose.yml - con healthcheck (custom)<pre><code>services:\n\n  primero:\n    image: imagen_1         \n    healthcheck:\n        # configuraciones custom\n        test: [\"CMD-SHELL\", \"comando_test_custom\"]\n        start-period: 10s   # demora para el primer intento\n        interval: 10s       # intervalo entre intentos\n        timeout: 60s        # tiempo limite de test\n        retries: 5          # n\u00ba m\u00e1ximo de reintentos  \n        disabled: false     # bypass del test - desactivado por default\n\n  segundo:\n    image: imagen_2\n    depends_on: \n        primero:\n            condition: service_healthy  \n</code></pre> <p>De esta manera el gestor de contenedores verifica que el primer contenedor funcione adecuadamente antes de intentar la puesta en marcha del segundo.</p> <p>Se sobreentiende que la imagen del primer contenedor debe disponer de los comandos de prueba pedidos, de otra manera la ejecuci\u00f3n falla.</p>"},{"location":"contenedores/dependencia/#referencias","title":"Referencias","text":"<p>Docker Docs - Compose file reference - depends_on</p> <p>Docker Docs - Compose file reference - Healthcheck</p> <p>Docker Docs - Dockerfile reference - Healthcheck</p>"},{"location":"contenedores/despliegue_demo/","title":"Primer demo","text":"<p>Se realiza una primera rutina para poner a prueba el funcionamiento de los contenedores.</p>"},{"location":"contenedores/despliegue_demo/#demo","title":"Demo","text":""},{"location":"contenedores/despliegue_demo/#rutina-original","title":"Rutina original","text":"<p>En este ejemplo se implement\u00f3 una rutina llamamda <code>contar.py</code> que cuenta hasta 10 esperando un segundo entre cuentas y entonces cierra.</p> Rutina original<pre><code># archivo 'contar.py'\nfrom time import sleep\nimport sys\n\n\n# salida por consola\ntry:\n    # el numero maximo a contar se asigna como argumento\n    n = int(sys.argv[1])\n    print(f\"Contando hasta {n}\")\n\nexcept Exception:\n    # valor m\u00e1ximo por default en caso de error\n    print(\"Argumento de entrada faltante o incorrecto (debe ser un entero)\")\n    n = 10\n    print(f\"Contando hasta {n} (valor default)\")\n\nfinally:\n    # el contador se incrementa cada 1 segundo\n    i = 0\n    while i &lt;= n:\n        print(f\"i: {i:4}\")\n        sleep(1)\n        i += 1\n</code></pre> <p>La rutina se implement\u00f3 en un \u00fanico archivo. No hay paquetes que requieran ser instalados.</p>"},{"location":"contenedores/despliegue_demo/#ejecucion","title":"Ejecuci\u00f3n","text":"<p>El programa se ejecuta llamando al int\u00e9rprete de Python e indic\u00e1ndole el nombre del archivo con la rutina, que en este ejemplo se llama <code>contar.py</code>: </p> Ejecutar - cuenta default<pre><code>python contar.py\n</code></pre> <p>La cuenta m\u00e1xima puede ser alterado mediante un argumento posicional, el cual debe ser un n\u00famero:</p> Ejecutar - cuenta custom<pre><code>python contar.py  4\n</code></pre> <p>Si hay m\u00e1s argumentos u opciones entonces \u00e9stos se ignoran.</p>"},{"location":"contenedores/despliegue_demo/#rutina-adaptada","title":"Rutina adaptada","text":"<p>Se utiliza el logging y el lazy formatting en la rutina como reemplazo al print y los f-strings.</p> <p>Este es el resultado:</p> Rutina adaptada<pre><code># archivo 'contar.py'\nfrom time import sleep\nimport sys\nimport logging\n\n# uso de la consola de logs\nlogging.basicConfig(\n    level=logging.INFO, # m\u00ednimo nivel de log a publicar\n    format=\"%(asctime)s - %(levelname)s - %(message)s\", #info incorporada\n    )\n\ntry:\n    # el numero maximo a contar se asigna como argumento\n    n = int(sys.argv[1])\n    logging.info(\"Contando hasta %i\", n)\n\nexcept Exception:\n    # valor m\u00e1ximo por default en caso de error\n    logging.warning(\"Argumento de entrada faltante o incorrecto (debe ser un entero)\")\n    n = 10\n    logging.warning(\"Contando hasta %i (valor default)\", n)\n\nfinally:\n    # el contador se incrementa cada 1 segundo\n    i = 0\n    while i &lt;= n:\n        logging.info(\"i: %4i\",i)\n        sleep(1)\n        i += 1\n</code></pre>"},{"location":"contenedores/despliegue_demo/#configuraciones","title":"Configuraciones","text":""},{"location":"contenedores/despliegue_demo/#estructura-de-archivos","title":"Estructura de archivos","text":"<p>En este ejemplo se ubican todas las rutinas del programa dentro de una carpeta llamada <code>demo</code> y a su lado se crean  los archivos <code>compose.yml</code> y <code>Dockerfile</code>.</p> Arbol de archivos<pre><code>.\n\u251c\u2500\u2500 demo\n\u2502   \u2514\u2500\u2500 contar.py\n\u251c\u2500\u2500 compose.yml\n\u2514\u2500\u2500 Dockerfile\n</code></pre>"},{"location":"contenedores/despliegue_demo/#dockerfile","title":"Dockerfile","text":"<p>El archivo <code>Dockerfile</code> requerido en este caso es muy sencillo.</p> Dockerfile - b\u00e1sico<pre><code># imagen de base\nFROM python:alpine\n\n# directorio de trabajo (se crea autom\u00e1ticamente)\nWORKDIR /code\n\n# copia de rutinas al directorio de trabajo\nCOPY demo/ ./\n\n# comando, opciones y argumentos (sobreescribibles)\nCMD [\"python\", \"contar.py\", \"4\"]\n</code></pre> <p>No hizo falta instalar dependencias.</p>"},{"location":"contenedores/despliegue_demo/#composeyml","title":"<code>compose.yml</code>","text":"<p>Para este ejemplo se crea un \u00fanico servicio y se le indica que el Dockerfile es aleda\u00f1o al archivo <code>compose.yml</code>:</p> compose.yml - construir imagen<pre><code>name: contar-python\n\nservices:\n\n  demo-contador:    # nombre de servicio - arbitrario\n    # necesarios\n    build: .        # Dockerfile en el mismo directorio\n    # opcionales\n    image: imagen-contador:v1\n    container_name: contenedor-contador\n</code></pre> <p>Tambi\u00e9n se aprovech\u00f3 para etiquetar la nueva imagen y darle nombre al contenedor, pero esos pasos son meramente opcionales.</p>"},{"location":"contenedores/despliegue_demo/#despliegue","title":"Despliegue","text":"<p>Se ordena  la construcci\u00f3n y el despliegue del proyecto:</p> <p>Proyecto - Construir y desplegar<pre><code>cd ruta_proyecto\npodman compose up --build\n</code></pre> Este paso debe:</p> <ul> <li>descargar la imagen de Python pedida;</li> <li>crear la nueva imagen derivada  con el nombre <code>imagen-contador</code> y tag <code>v1</code>;</li> <li>crear el proyecto y su contenedor interno; </li> <li>poner el contenedor en marcha.</li> </ul> <p>Si todo sali\u00f3 bien debe observarse por consola los logs, algo parecido a:</p> Proyecto - Registro<pre><code>contenedor-contador  | 2025-08-27 04:42:57,880 - INFO - Contando hasta 4\ncontenedor-contador  | 2025-08-27 04:42:57,880 - INFO - i:    0\ncontenedor-contador  | 2025-08-27 04:42:58,880 - INFO - i:    1\ncontenedor-contador  | 2025-08-27 04:42:59,881 - INFO - i:    2\ncontenedor-contador  | 2025-08-27 04:43:00,882 - INFO - i:    3\ncontenedor-contador  | 2025-08-27 04:43:01,882 - INFO - i:    4\ncontenedor-contador exited with code 0\n</code></pre> <p>Este mismo resultado debe repetirse instant\u00e1neamente al consultar los logs por terminal:</p> Proyecto - Consultar registro<pre><code>podman compose logs\n</code></pre> <p>Se puede despertar al contenedor de nuevo:</p> Proyecto - Desplegar<pre><code>podman compose up\n</code></pre> <p>y se ver\u00e1 que los nuevos registros se concatenenan tras los anteriores, sin borrarlos.</p> <p>Para dar de baja (eliminar) el contenedor y todos sus logs internos simplemente usar el comando <code>down</code>:</p> Proyecto - Borrar<pre><code>podman compose down\n</code></pre>"},{"location":"contenedores/dockerignore/","title":"Archivos de Exclusi\u00f3n","text":"<p>Con el fin de prevenir la copia accidental de ciertos archivos desde el directorio del proyecto a la nueva imagen se implementan los archivos ocultos dockerignore. En ellos se listan aquellos archivos y carpetas que deban ser ignorados durante la construcci\u00f3n.</p> <p>Ejemplo:</p> Dockerignore - Ejemplo para programas Python<pre><code># codigo objeto de Python (CPython)\n__pycache__/\n\n# carpeta del control de versiones Git\n.git/\n\n# cach\u00e9s de recursos remotos\n.cache\n\n# carpetas de entornos virtuales\nvenv/\n.venv/\n\n# archivos con variables de entorno\n.env\n*.env\n\n# archivos de documentaci\u00f3n Markdown\n*.md\n\n# (etc)\n</code></pre> <p>Estos archivos siguen las mismas reglas que los archivos gitignore utilizados por Git. De hecho se puede tomar como referencia el archivo <code>.gitignore</code> para completar el archivo <code>.dockerignore</code>.</p>"},{"location":"contenedores/entorno/","title":"Variables de entorno","text":"<p>Las variables de entorno son variables de texto manejadas por el sistema operativo. Se usan frecuentemente para configurar opciones y par\u00e1metros de los programas desde el sistema.</p>"},{"location":"contenedores/entorno/#introduccion","title":"Introduccion","text":"<p>Los contenedores funcionan en entornos aislados por default. Al ser desplegados, sus programas internos  son incapaces de acceder a estas variables de entorno por s\u00ed mismos. Por este motivo los gestores de contenedores dan opciones para realizar copias de las variables de entorno necesarias y asignarlas a los contenedores que las requieran.</p>"},{"location":"contenedores/entorno/#variables-en-bash","title":"Variables en BASH","text":"<p>Las variables de entorno se crean manualmente desde la shell Bash con el comando <code>export</code>:</p> Bash - crear variable de entorno<pre><code>export NOMBRE_VARIABLE=VALOR    # variable con valor\nexport NOMBRE_VARIABLE          # variable vac\u00eda\n</code></pre> <p>y se eliminan con el comando <code>unset</code>:</p> <p>Bash - eliminar variable de entorno<pre><code>unset NOMBRE_VARIABLE\n</code></pre> La consulta manual de los valores se hace con el comando <code>echo</code> y el signo <code>$</code> delante del nombre de variable:</p> <p>Bash - consultar valor de variable<pre><code>echo $NOMBRE_VARIABLE\n</code></pre> y adem\u00e1s sus valores pueden ser modificados mediante asignaciones:</p> <p>Bash - modificar valor de variable<pre><code>NOMBRE_VARIABLE=nuevo_valor\n</code></pre> Los valores de estas variables se transmiten como strings.</p>"},{"location":"contenedores/entorno/#lectura-desde-rutinas-python","title":"Lectura desde rutinas Python","text":"<p>Con el m\u00f3dulo <code>os</code> se pueden consultar las variables de entorno en las rutinas de Python. Estas son consultadas con la funci\u00f3n <code>getenv()</code></p> Python - leer variable de entorno<pre><code>import os\n\nvalor_variable = os.getenv(\n    \"NOMBRE_VARIABLE\",          # variable buscada\n    default=valor_respaldo      # (opcional)\n    )\n</code></pre> <p>Si la variable pedida existe entonces se lee su valor; en caso contrario se devuelve el valor indicado por el argumento <code>default</code>. Si este no fue definido entonces se devuelve <code>None</code>.</p> <p>Borrado de variables</p> <p>Si una variable de entorno tiene informaci\u00f3n sensible entonces \u00e9sta puede ser borrada desde la rutina de Python tras su lectura.</p> Python - borrar variable de entorno<pre><code># borrado de variable\nos.environ[\"NOMBRE_VARIABLE\"] = \"\"\n</code></pre>"},{"location":"contenedores/entorno/#archivos-env","title":"Archivos <code>.env</code>","text":"<p>Una forma c\u00f3moda de definir las variables de entorno es usar un archivo de texto con nombre <code>.env</code> (archivo oculto). En este archivo se crean las variables de entorno necesarias, una por rengl\u00f3n:</p> Archivo .env - sintaxis<pre><code># comentarios (opcionales)\nNOMBRE_VARIABLE_1=VALOR_1\nNOMBRE_VARIABLE_2=VALOR_2\n</code></pre> <p>Durante el despliegue el gestor de contendores busca por este archivo en el directorio del proyecto. Este archivo es le\u00eddo y los valores de sus variables internas son importadas autom\u00e1ticamente.</p> <p>Jerarqu\u00eda de valores</p> <p>Si una misma variable de entorno es definida en terminal y en archivo  entonces el valor le\u00eddo por el gestor ser\u00e1 el de terminal.</p> <p>Control de versiones</p> <p>Agregar los archivos <code>.env</code> a los repositorios de los proyectos es una mala pr\u00e1ctica porque implica publicar informaci\u00f3n potencialmente sensible.</p>"},{"location":"contenedores/entorno/#variables-predefinidas","title":"Variables predefinidas","text":"<p>En el caso de requerirse la creaci\u00f3n de variables de entorno predefinidas para la imagen del contenedor se dispone de la cl\u00e1usula <code>ENV</code> dentro del <code>Dockerfile</code>:</p> Dockerfile - Variables de entorno<pre><code># archivo Dockerfile \nENV VARIABLE_INTERNA=VALOR\n</code></pre> <p>Se permite declarar varias variables con una \u00fanica cl\u00e1usula <code>ENV</code>:</p> Dockerfile - Variables de entorno m\u00faltiples<pre><code># archivo Dockerfile \nENV VARIABLE_1=VALOR_1 VARIABLE_2=VALOR_2 VARIABLE_3=VALOR_3\n</code></pre> <p>Estas variables seguir\u00e1n existiendo tras la creaci\u00f3n de la imagen final y podr\u00e1n ser modificadas durante el despliegue.</p>"},{"location":"contenedores/entorno/#asignacion-de-variables","title":"Asignaci\u00f3n de variables","text":"<p>Cada contenedor del proyecto debe ser configurado deliberadamente para poder acceder a los valores de las variables de entorno exteriores al proyecto. En el archivo <code>compose.yml</code> se indican las variables de entorno necesarias para cada contenedor con ayuda del campo <code>environment</code>.</p>"},{"location":"contenedores/entorno/#mapeo-de-variables","title":"Mapeo de variables","text":"<p>Las variables de entorno experimentan un \"mapeo\": a izquierda se indica el nombre de variable que ver\u00e1 la rutina adentro del contenedor y a la derecha se indica el nombre de la variable definida en la terminal del sistema anfitri\u00f3n:</p> compose.yml - mapeo de variables<pre><code>services:\n\n  programa_entorno:\n    build: .\n    environment:\n      VARIABLE_PROGRAMA: \"${VARIABLE_BASH}\"\n</code></pre>"},{"location":"contenedores/entorno/#valor-default","title":"Valor default","text":"<p>Dentro de la lectura del valor de la variable se puede definir un valor default entre las llaves. Este valor es asignado solamente si la variable de entorno no fue definida. Este valor de resguardo se  consigue con el signo <code>-</code>:</p> compose.yml - leer variable (con valor default)<pre><code>services:\n\nprograma_entorno:\n    build: .\n    environment:\n      VARIABLE_PROGRAMA: \"${VARIABLE_BASH:-VALOR_DEFAULT}\"\n</code></pre> <p>Si se agrega el signo <code>:</code> tambi\u00e9n se autocompleta ante variables existentes pero sin valor.</p>"},{"location":"contenedores/entorno/#valor-de-reemplazo","title":"Valor de reemplazo","text":"<p>Existen casos donde se necesita sobreescribir  el valor de entrada de la variable por un valor sustituto. Se marca con el signo <code>+</code>.</p> compose.yml - leer variable (con valor reemplazo)<pre><code>services:\n\nprograma_entorno:\n    build: .\n    environment:\n      VARIABLE_PROGRAMA: \"${VARIABLE_BASH:+VALOR_SUSTITUTO}\"\n</code></pre> <p>Agregando el signo <code>:</code> se sustituyen tambi\u00e9n las variables nulas.</p>"},{"location":"contenedores/entorno/#error-ante-faltante","title":"Error ante faltante","text":"<p>Si la variable no est\u00e1 declarada o est\u00e1 vac\u00eda entonces se permite lanzar una excepci\u00f3n que interrumpe el despliegue y lanza un mensaje en consola. Esto se consigue con el signo <code>?</code>:</p> compose.yml - leer variable (con error por faltante)<pre><code>services:\n\nprograma_entorno:\n    build: .\n    environment:\n      VARIABLE_PROGRAMA: \"${VARIABLE_BASH:?'Error: valor faltante'}\"\n</code></pre> <p>Nuevamente, colocando el signo <code>:</code> se dispara el error ante variables nulas.</p> <p>Interpolaci\u00f3n - resumen</p> <p>A estas pol\u00edticas para asignar valores de respaldo, errores, etc. se las llama interpolaci\u00f3n.</p> <p>Este es el resumen de secuencias posibles:</p> Secuencia Uso <code>-</code> variable no definida <code>:-</code> variable no definida o nula <code>?</code> variable no definida <code>:?</code> variable no definida o nula <code>+</code> variable no definida <code>:+</code> variable no definida o nula"},{"location":"contenedores/entorno/#parametros-de-despliegue","title":"Par\u00e1metros de despliegue","text":"<p>Con ayuda de las variables de entorno tambi\u00e9n se pueden modificar los par\u00e1metros de despliegue del proyecto sin tener que reescribir el archivo <code>compose.yml</code>. Por ejemplo, el puerto del host requerido por un contenedor se puede elegir mediante variables de entorno:</p> <p>compose.yml - Puerto de host variable<pre><code>services:\n\nprograma:\n    build: .\n    ports:\n      - \"${PUERTO_HOST:-5000}:8000\"\n</code></pre> En este ejemplo el contenedor recibe peticiones IP por el puerto <code>8000</code>. Si la variable de entorno <code>PUERTO_HOST</code> est\u00e1 definida en la shell o en un archivo <code>.env</code> entonces se intentar\u00e1 asignarle su valor num\u00e9rico. Si en cambio <code>PUERTO_HOST</code> no est\u00e1 definida se le intenta asignar el puerto <code>5000</code>.</p>"},{"location":"contenedores/entorno/#ejemplo-de-uso","title":"Ejemplo de uso","text":"<p>En este demo se crea una variable de entorno en un archivo <code>.env</code> y es le\u00edda por unar rutina llamada <code>entorno.py</code> desde adentro de un contenedor.</p> Demo entornos - Arbol de archivos<pre><code>.\n\u251c\u2500\u2500 demo\n\u2502   \u2514\u2500\u2500 main.py\n\u251c\u2500\u2500 compose.yml\n\u251c\u2500\u2500 Dockerfile\n\u2514\u2500\u2500 .env\n</code></pre> <p>Se crea una rutina sencilla en Python para leer una variable de entorno  y reportar su valor en la ventana de logs:</p> Demo entornos -main.py<pre><code>import os\nimport logging\n\nlogging.basicConfig(\n    level=logging.INFO, # m\u00ednimo nivel de log a publicar\n    format=\"%(message)s\", #info incorporada\n    )\n\n# lectura de variable\nvalor_variable = os.getenv(\"VARIABLE_PYTHON\")\n\n# reporte de valor\nlogging.info(f\"Valor de 'VARIABLE_PYTHON': '{valor_variable}'\")\n</code></pre> <p>Al demo se le asigna el siguiente Dockerfile para construir la imagen:</p> Demo entornos - Dockerfile<pre><code># imagen de referencia\nFROM python:alpine\n\n# directorio de trabajo (se crea autom\u00e1ticamente)\nWORKDIR /code\n\n# copia de rutinas al directorio de trabajo\nCOPY demo/ ./\n\n# variable de entorno local\nENV VARIABLE_PYTHON=\"Me definieron en el Dockerfile\"\n\n# comandos \nCMD [\"python\", \"main.py\"]\n</code></pre> <p>Se configura el despliegue  en varios contenedores paralelos con distintas interpolaciones de variables:</p> Demo entornos - compose.yml<pre><code>name: demo_variables_entorno\n\nservices:\n\n  # crea una imagen com\u00fan para todos los demos\n  crear_imagen:\n    build: .\n    image: demo_entornos \n\n  # cada contenedor pone a prueba distintas interpolaciones\n  entornos_interna:\n    image: demo_entornos \n    depends_on:\n      crear_imagen:\n        condition: service_completed_successfully\n\n  entornos_exterior:\n    image: demo_entornos \n    environment:\n      VARIABLE_PYTHON: \"${VARIABLE}\"\n    depends_on:\n      crear_imagen:\n        condition: service_completed_successfully\n\n  entornos_default:\n    image: demo_entornos \n    environment:\n      VARIABLE_PYTHON: \"${VARIABLE:-'valor predefinido'}\"\n    depends_on:\n      crear_imagen:\n        condition: service_completed_successfully\n\n  entornos_sustituir:\n    image: demo_entornos \n    environment:\n      VARIABLE_PYTHON: \"${VARIABLE:+Sustituido}\"\n    depends_on:\n      crear_imagen:\n        condition: service_completed_successfully\n</code></pre> <p>N\u00f3tese que s\u00f3lo uno de los contenedores construye la imagen y los dem\u00e1s la reutilizan. </p> <p>Finalmente se crea un archivo <code>.env</code> aleda\u00f1o al archivo <code>compose.yml</code> y se define dentro la variable de entorno:</p> Demo entornos - variable en archivo<pre><code>VARIABLE=\"Vengo del archivo '.env'\"\n</code></pre> <p>o se declara en la shell:</p> Demo entornos - variable en Bash<pre><code>export VARIABLE=\"Me definieron en BASH\"\n</code></pre> <p>Por \u00faltimo se realiza el despliegue:</p> Demo entornos - despliegue<pre><code>podman compose up\n</code></pre>"},{"location":"contenedores/imagenes/","title":"Im\u00e1genes","text":""},{"location":"contenedores/imagenes/#idea-general","title":"Idea general","text":"<p>Las im\u00e1genes son las copias del software que le dan funcionalidad a los contenedores. Son el equivalente a las im\u00e1genes de instalaci\u00f3n de los sistemas operativos.</p> <p>Cada imagen tiene un nombre caracter\u00edstico y una etiqueta de versi\u00f3n asignada. Tambien suelen usarse las etiquetas <code>latest</code>, <code>stable</code>, etc. a modo de comodines para apuntar a versiones recomendadas de las im\u00e1genes.</p> <p>GNU/Linux</p> <p>Las im\u00e1genes de contenedores habitualmente son distribuciones GNU/Linux empaquetadas. En las im\u00e1genes se respeta la estructura de archivos, se conserva su gestor de paquetes predeterminado, etc. en tanto que se descartan los componentes superfluos, como por ejemplo los componentes gr\u00e1ficos.</p>"},{"location":"contenedores/imagenes/#imagenes-de-python","title":"Im\u00e1genes de Python","text":"<p>En Docker Hub se dispone de un surtido de im\u00e1genes de Python las cuales ya traen el int\u00e9rprete de Python preinstalado y son las recomendadas para trabajar.</p> <p>Las im\u00e1genes de Python prearmadas se distinguen unas de otras por los siguientes factores:</p> <ul> <li>versi\u00f3n del int\u00e9rprete Python, indicado por su versi\u00f3n: <code>3.9</code>, <code>3.10</code>, etc;</li> <li>distribuci\u00f3n de origen: Debian, Alpine, etc;</li> <li>componentes adicionales;</li> <li>plataforma de uso (tipo de procesadores): AMD64, i686, ARM, etc.</li> </ul> <p>Estas son las distribuciones compatibles con su ejecuci\u00f3n en PC:</p> Nombre clave Distribuci\u00f3n base <code>trixie</code> Debian 13 <code>bookworm</code> Debian 12 <code>bullseye</code> Debian 11 <code>alpine</code> Alpine <p>Especificaci\u00f3n de versiones</p> <p>La especificaci\u00f3n de las im\u00e1genes a utilizar es muy importante para asegurar la confiabilidad del despliegue y del funcionamiento de los proyectos.</p>"},{"location":"contenedores/imagenes/#descarga-manual","title":"Descarga manual","text":"<p>El comando <code>pull</code> sirve para descargar im\u00e1genes. Por ejemplo para descargar la imagen predefinida de Python:</p> Descarga manual - versi\u00f3n predefinida<pre><code>podman image pull python\n</code></pre> <p>La imagen descargada por default es es la etiquetada como <code>latest</code>. Para descargar una imagen en particular se indica la etiqueta elegida:</p> Descarga manual - versi\u00f3n custom<pre><code>podman image pull python:tag_version\n</code></pre> <p>Por ejemplo, para descargar varias im\u00e1genes alternativas de Python con el int\u00e9rprete 3.13.5:</p> Descarga manual - ejemplos<pre><code>podman image pull python:3.13.5-bookworm\npodman image pull python:3.13.5-slim-bookworm\npodman image pull python:3.13.5-alpine3.22\n</code></pre>"},{"location":"contenedores/imagenes/#imagenes-de-debian","title":"Im\u00e1genes de Debian","text":"<p>Las im\u00e1genes etiquetadas como <code>trixie</code>,<code>bookworm</code> y <code>bullseye</code> han sido creadas en base a im\u00e1genes del sistema operativo Debian. \u00c9stas son las im\u00e1genes completas, y son tambi\u00e9n las m\u00e1s pesadas. Sus bibliotecas de utilitarios son <code>glibc</code> (GNU C library) y <code>coreutils</code> (GNU coreutils), que son las bibliotecas m\u00e1s habituales en los entornos GNU/Linux.</p> <p>latest</p> <p>La imagen de Python  etiquetada como <code>latest</code> es habitualmente una de las im\u00e1genes basadas en Debian.</p>"},{"location":"contenedores/imagenes/#imagenes-slim","title":"Im\u00e1genes slim","text":"<p>Las im\u00e1genes etiquetadas como <code>slim</code> son versiones \"adelgazadas\" de las im\u00e1genes basadas en Debian, las cuales ocupan mucho menos espacio que las originales en solitario. Sin embargo, estas im\u00e1genes pueden ocupar m\u00e1s espacio que las originales cuando hay varias versiones y adem\u00e1s su funcionalidad en aplicaciones exigentes puede ser inferior.</p>"},{"location":"contenedores/imagenes/#imagenes-de-alpine","title":"Im\u00e1genes de Alpine","text":"<p>Alpine Linux es una distribuci\u00f3n GNU/Linux cuyas bibliotecas de utilitarios son <code>musl libc</code> y <code>Busybox</code>. Estas im\u00e1genes de disco son muy compactas, permitiendo crear im\u00e1genes muy livianas; no obstante pueden dar lugar a  comportamientos y errores inesperados en el caso de aplicaciones demandantes.</p>"},{"location":"contenedores/imagenes/#comparativa-de-espacios","title":"Comparativa de espacios","text":"<p>Para ver las caracter\u00edsticas de las im\u00e1genes ya descargadas se tiene el comando <code>list</code>:</p> Lista de im\u00e1gens - s\u00f3lo de Python<pre><code>podman image list python\n</code></pre> <p>Esta tabla es un ejemplo de reporte resumido tras descargar varias im\u00e1genes de Python:</p> TAG IMAGE ID SIZE <code>latest</code> 3b29f43b7fff 1.04 GB <code>3.13.5-bookworm</code> 3b29f43b7fff 1.04 GB <code>3.13.5-slim-bookworm</code> 300924e3c7de 125 MB <code>3.13.5-alpine3.22</code> f3abd857d733 47.6 MB <p>N\u00f3tese que al momento de la redacci\u00f3n la etiqueta <code>latest</code> coincide con la imagen <code>3.13.5-bookworm</code>  basada en Debian y que tiene el int\u00e9rprete 3.13.5</p> <p>Capas (layers)</p> <p>Las im\u00e1genes de contenedores no son monol\u00edticas sino que est\u00e1n divididas en varias secciones llamadas capas o layers. Las capas son reutilizadas por el gestor de contenedores para varias im\u00e1genes cuando esto es posible. Esto ayuda a que el espacio ocupado en el almacenamiento por las im\u00e1genes no sea exageradamente grande.</p>"},{"location":"contenedores/imagenes/#comandos-adicionales","title":"Comandos adicionales","text":"<p>Se dispone de un gran surtido de comandos adicionales para gestionar las im\u00e1genes disponibles de manera manual:</p> Im\u00e1genes - comandos informativos<pre><code>podman image list                    # lista informativa (resumen)\npodman image inspect IMAGEN:VERSION  # reporte detallado\n</code></pre> Im\u00e1genes - transferencias<pre><code>podman image pull IMAGEN:VERSION     # descargar \npodman image push IMAGEN:VERSION     # subir al servidor\n</code></pre> Im\u00e1genes - borrado local<pre><code>podman image rm IMAGEN:VERSION       # eliminar imagen espec\u00edfica\npodman image prune                   # eliminar (no usadas)\n</code></pre> <p>Para consultar m\u00e1s opciones escribir <code>podman image</code>.</p>"},{"location":"contenedores/incluir/","title":"Incluir archivos Compose","text":"<p>Un archivo <code>compose.yml</code> puede hacer referencia a otros archivos del mismo tipo. Esto permite desplegar m\u00faltiples subproyectos como si fueran uno solo. Tambi\u00e9n permite modificar las condiciones del despliegue sin alterar los archivos <code>compose.yml</code> originales. </p>"},{"location":"contenedores/incluir/#uso-basico","title":"Uso b\u00e1sico","text":"<p>La forma m\u00e1s b\u00e1sica de uso es definiendo una lista de rutas  en la secc\u00f3n <code>include</code>:</p> Incluir - Sintaxis corta<pre><code># archivo  'compose.yml'\n\n# archivos incluidos\ninclude:\n  - ruta_1/compose.yml\n  - ruta_2/compose.yml\n\n# contenedores agregados\nservices:\n  servicio_extra:\n    depends_on:\n      - servicio_original\n</code></pre> <p>Las rutas especificadas son relativas al archivo actual.</p>"},{"location":"contenedores/incluir/#sintaxis-larga","title":"Sintaxis larga","text":"<p>Hay una segunda forma para indicar las rutas que es la notaci\u00f3n larga.</p> Incluir - Sintaxis larga<pre><code># archivo  'compose.yml' \n\n# archivos incluidos\ninclude:\n   - path: ruta_1/compose.yml\n     project_directory: .\n     env_file: custom.env\n\n# contenedores agregados\nservices:\n  servicio_extra:\n    depends_on:\n      - servicio_original\n</code></pre> <p>En esta se indican hasta tres rutas:</p> <ul> <li><code>project_directory</code> es la ruta de referencia para las otras rutas. Por default es la ubicaci\u00f3n del archivo YAML aglutinante;</li> <li><code>path</code> es la ruta relativa al archivo Compose a incluir.</li> <li><code>env_file</code> es la ruta relativa al archivo con las variables de entorno a importar.</li> </ul> <p>Tanto <code>path</code> como <code>env_file</code> admiten listas de rutas como entrada:</p> Incluir - Sintaxis larga<pre><code># archivo 'compose.yml'\n\n# archivos incluidos\ninclude:\n   - path: \n      - ruta_1/compose.yml\n      - ruta_2/compose.yml\n     project_directory: .\n     env_file: \n      - custom.env\n      - ruta_extra/custom-extra.env\n</code></pre>"},{"location":"contenedores/incluir/#mezclar-parametros","title":"Mezclar par\u00e1metros","text":"<p>A veces es necesario modificar o agregar par\u00e1metros de configuraci\u00f3n para los contenedores que ya est\u00e1n definidos en los archivos Compose incluidos.</p> <p>Esto se consigue mediante la notaci\u00f3n larga, incluyendo un archivo en <code>path</code> con los cambios y agregados necesarios:</p> <p>Incluir - Sobreescritura<pre><code># archivo 'compose.yml' \ninclude:\n  - path:\n    - ruta_original/compose.yml\n    - override.yml\n</code></pre> A este segundo archivo habitualmente se lo nombra <code>override.yml</code>.</p> <p>Por ejemplo: un archivo compose podr\u00eda</p> Ejemplo - configuraci\u00f3n original<pre><code># archivo  'compose.yml' \nservices:\n\n  # Definici\u00f3n original\n  servicio-web:\n    build: .\n    restart: always\n    ports:\n      - 9999:8000\n    environment:\n      VARIABLE:\"valor original\"  \n</code></pre> <p>A este contenedor se lo altera con ayuda de otro archivo YML:</p> Ejemplo - modificaciones<pre><code># archivo  'override.yml' \nservices:\n\n  servicio-web:\n    # sobreescritura de par\u00e1metros\n    ports:\n      - 7777:8000\n    environment:\n      VARIABLE:\"valor sustituto\"  \n</code></pre> <p>El despliegue resultante es el descrito a continuaci\u00f3n:</p> Ejemplo - resultado<pre><code># resultante\nservices:\n\n  servicio-web:\n    build: .\n    restart: always\n    ports:\n      - 9999:8000\n      - 7777:8000\n    environment:\n      VARIABLE:\"valor sustituto\"  \n</code></pre> <p>La clave de entorno  ve su valor sobreescrito en tanto que el nuevo puerto de acceso al container es agregado junto al original.</p>"},{"location":"contenedores/incluir/#sobreescribir-variables","title":"Sobreescribir variables","text":"<p>Mediante la sintaxis larga se puede ignorar a los archivos de entorno originales de cada proyecto y definir las variables de entorno en nuevos archivos para el despliegue actual:</p> Incluir - Archivos de entorno<pre><code># archivo  'compose.yml' \ninclude:\n  - path: \n    - ruta_1/compose.yml\n    env_file:\n      - custom.env\n</code></pre>"},{"location":"contenedores/incluir/#referencias","title":"Referencias","text":"<p>Docker Docs - Compose File Reference - Use include to modularize Compose files</p>"},{"location":"contenedores/instalacion/","title":"Docker y Podman","text":"<p>Para este tutorial se necesita instalar Docker o Podman, aunque se asume el uso de este \u00faltimo.</p>"},{"location":"contenedores/instalacion/#docker","title":"Docker","text":"<p>Docker es el programa gestor de contenedores m\u00e1s popular del momento y es el que sirve de referencia para otras implementaciones. Docker trae integrado su propio int\u00e9rprete de los archivos Compose y su propio cliente gr\u00e1fico llamado Docker Desktop. Es software privativo.</p> <p>Se descarga desde su p\u00e1gina oficial.</p> <p>Docker Engine</p> <p>El Docker Engine es el componente que hace funcionar a los contenedores. Este debe estar inicializado y en funcionamiento para poder trabajar. Docker Desktop permite su administraci\u00f3n con el mouse.</p>"},{"location":"contenedores/instalacion/#podman","title":"Podman","text":"<p>Podman es una imitaci\u00f3n de Docker de c\u00f3digo libre que es altamente compatible con Docker en lo respectivo a los comandos y que usa sus mismas im\u00e1genes. Este programa no trae por default la compatibilidad con el comando Compose sino que la habilita mediante dos opciones:</p> <ul> <li>La extensi\u00f3n Compose del entorno gr\u00e1fico Podman Desktop, que es un envoltorio (un wrapper) de un paquete externo llamado <code>docker-compose</code>;</li> <li>el paquete <code>podman-compose</code> que est\u00e1 escrito en Python y se puede instalar por shell.</li> </ul> <p>El cliente gr\u00e1fico de Podman se llama Podman Desktop.</p> <p>Sitio oficial de Podman Podman Desktop</p> <p>Podman Machine</p> <p>Podman Machine es el componente an\u00e1logo al Docker Engine y tambi\u00e9n necesita ser inicializado y ouesto en marcha para poder trabajar.  Podman Desktop permite su administraci\u00f3n mediante clicks. En caso de querer hacerlo desde terminal Bash: Bash - arranque de gestor<pre><code>podman machine init\npodman machine start\n</code></pre></p>"},{"location":"contenedores/instalacion/#comandos","title":"Comandos","text":"<p>Los comandos b\u00e1sicos de ambos programas toman esta forma gen\u00e9rica: </p> DockerPodman Bash - comandos<pre><code>docker  comando subcomando \n</code></pre> Bash - comandos<pre><code>podman  comando subcomando \n</code></pre> <p>La gran mayor\u00eda de los comandos son intercambiables entre ambos programas.</p> <p>Alias</p> <p>Desde Bash se pueden crear alias para los comandos: </p> Alias - Docker instalado<pre><code>alias podman=\"docker\"\n</code></pre> Alias - Podman instalado<pre><code>alias docker=\"podman\"\n</code></pre> <p>de esta manera se puede llamar al gestor de contenedores disponible con cualquiera de los dos nombres.</p>"},{"location":"contenedores/instalacion/#windows-vs-gnulinux","title":"Windows vs GNU/Linux","text":"<p>Sobre el manejo de estos programas en Windows y en Linux se observan estas diferencias:</p> <ul> <li>En sistemas Windows se necesita activar el Windows Subsystem for Linux o WSL para ambos programas. En cambio en Linux ambos programas corren nativamente;</li> <li>En Windows los motores de los programas gestores pueden exigir varios gigabytes de memoria RAM para mantenerse en funcionamiento, en tanto que en Linux este consumo extra no existe o es muy limitado;</li> <li>Windows tiene los instaladores de los programas integrados; en tanto que en Linux la instalaci\u00f3n de los componentes se hace por separado y por ello suele ser algo m\u00e1s engorrosa.</li> </ul>"},{"location":"contenedores/integrador/","title":"Demo integrador - Tabla de personas","text":"<p>Se crea un proyecto integrador imitando la organizaci\u00f3n de un servicio monol\u00edtico pr\u00e1ctico.</p> <p>Se utilizan todo tipo de recursos disponibles:</p> <ul> <li>Port mapping;</li> <li>Networks;</li> <li>Variables de entorno;</li> <li>Secrets;</li> <li>Argumentos de imagen.</li> </ul>"},{"location":"contenedores/integrador/#introduccion","title":"Introducci\u00f3n","text":"<p>Se implementa una p\u00e1gina web din\u00e1mica que muestra datos artificiales de personas ficticias y un bot\u00f3n flotante. Cada vez que se pulsa el bot\u00f3n se inventan los datos de una nueva persona y se agregan en una nueva fila a la tabla. Los datos se almacenan en una base de datos SQL.</p>"},{"location":"contenedores/integrador/#organizacion-del-proyecto","title":"Organizaci\u00f3n del proyecto","text":"<p>El proyecto se despliega en tres contenedores: uno para el servidor de la webapp (frontend), uno para el servidor backend y uno para la base de datos.</p> <pre><code>---\ntitle: \"Demo Integrador - Organizaci\u00f3n general\"\nconfig:\n  markdownAutoWrap: false\n---\nflowchart LR\n\n    subgraph proyecto [Entorno proyecto]\n\n\n        subgraph services [Servicios]\n        front[\"`Frontend \n            frontend_flet:8000`\"]\n        back[\"`Backend\n            backend_fastapi:8000`\"]\n        db[\"`Base de datos PostgreSQL\n            base_datos:5432`\"]\n        end\n\n        subgraph redes [Redes]\n            red-database[\"red-database\"]\n            red-frontend[\"red-frontend\"]\n        end\n\n    end\n\n    front --- red-frontend\n    back --- red-frontend\n    back --- red-database \n    db --- red-database \n\n    subgraph host [Host]\n        subgraph ports [Puertos]\n            portf[\"`Navegador\n            localhost:PUERTO_FRONT`\"]\n            portb[\"`API\n            localhost:PUERTO_BACK`\"]\n            portdb[\"`Cliente SQL\n            localhost:PUERTO_DB`\"]\n        end\n\n    end\n\n    portf --&gt; front\n    portb --&gt; back\n    portdb --&gt; db</code></pre> <p>La API del backend admite peticiones en dos URL paths: <code>/leer_todos</code> para pedir todos los datos existentes y <code>/nuevo</code> para ordenar la creaci\u00f3n de un nuevo registro de usuario.  El servicio frontend realiza estas mismas peticiones a la API cada vez que el usuario pulsa el bot\u00f3n flotante.</p> <p>Se dej\u00f3 abierto el acceso a la API del backend y a la base de datos con fines did\u00e1cticos.</p>"},{"location":"contenedores/integrador/#configuracion","title":"Configuraci\u00f3n","text":"<p>La contrase\u00f1a de la base de datos se asigna con ayuda de un elemento secret. El resto de las variables de configuraci\u00f3n se asignan mediante variables de entorno.</p>"},{"location":"contenedores/integrador/#arbol-del-proyecto","title":"Arbol del proyecto","text":"<p>Los servicios de frontend y backend est\u00e1n integramente escritos en Python. Se eligi\u00f3 como gestor de SQL una imagen PostgreSQL, aunque podr\u00eda haberse elegido Mar\u00edaDB o MySQL.</p> Integrador - \u00c1rbol de archivos<pre><code>.\n\u251c\u2500\u2500 frontend\n\u2502   \u251c\u2500\u2500 app\n\u2502   \u2502   \u251c\u2500\u2500 main.py\n\u2502   \u2502   \u2514\u2500\u2500 tabla_personas.py\n\u2502   \u251c\u2500\u2500 Dockerfile\n\u2502   \u2514\u2500\u2500 requirements.txt\n\u251c\u2500\u2500 backend\n\u2502   \u251c\u2500\u2500 app\n\u2502   \u2502   \u251c\u2500\u2500 main.py\n\u2502   \u2502   \u251c\u2500\u2500 persona.py\n\u2502   \u2502   \u2514\u2500\u2500 sql.py\n\u2502   \u251c\u2500\u2500 Dockerfile\n\u2502   \u2514\u2500\u2500 requirements.txt\n\u251c\u2500\u2500 .env\n\u251c\u2500\u2500 compose.yml\n\u2514\u2500\u2500 secreto.txt\n</code></pre>"},{"location":"contenedores/integrador/#archivo-de-configuracion","title":"Archivo de configuraci\u00f3n","text":"<p>El despliegue se configur\u00f3 mediante un \u00fanico archivo <code>compose.yml</code>. En \u00e9l se especificaron todos los servicios y elementos auxiliares necesarios.</p> Integrador - compose.yml<pre><code>name: demo-integrador\n\n\nservices:\n\n  frontend_flet:    \n    build: \n      context: frontend/    # ruta al Dockerfile\n      # args:\n      #   VERSION_PYTHON: 3.13.7-slim-trixie   # Debian 13 (recortada)\n    image: tabla_frontend_flet-web:v1\n    ports:\n      - ${PUERTO_FRONT:-8000}:8000\n    restart: always\n    networks:\n      - red-frontend\n    environment:\n      SERVICIO_BACKEND:   backend_fastapi\n      PUERTO_BACKEND:     8000\n    depends_on: \n      - backend_fastapi\n\n\n  backend_fastapi:    \n    build:\n      context: backend/    # ruta al Dockerfile\n      # args:\n      #   VERSION_PYTHON: 3.13.7-slim-trixie   # Debian 13 (recortada)\n    image: tabla_backend_fastapi:v1\n    ports:\n      - ${PUERTO_BACK:-8001}:8000\n    depends_on: \n      base_datos:\n          restart: true\n          condition: service_healthy\n          required: true\n    restart: always\n    environment:\n      TAG_LENGUAJE: \"ES_AR\"\n      POSTGRES_DB:       ${NOMBRE_DB:-personas_tabla}\n      POSTGRES_DOMINIO:  base_datos\n      POSTGRES_USER:     ${USUARIO:-noname}\n      POSTGRES_PASSWORD_FILE: /run/secrets/secreto\n    secrets:\n      - secreto\n    networks:\n      - red-frontend\n      - red-database\n\n\n  base_datos:\n    restart: always\n    image: postgres:17.2-bookworm     \n    environment:\n      POSTGRES_USER:     ${USUARIO:-noname}\n      POSTGRES_PASSWORD_FILE: /run/secrets/secreto\n      POSTGRES_DB:       ${NOMBRE_DB:-personas_tabla}\n    ports:\n      - ${PUERTO_DB:-5432}:5432\n    volumes:\n      - volumen_db:/var/lib/postgresql/data\n    secrets:\n      - secreto\n    networks:\n      - red-database\n    healthcheck:  \n      test: [\"CMD-SHELL\", \"psql -U ${USUARIO:-noname} -d ${NOMBRE_DB:-personas_tabla} -c 'SELECT 1' || exit 1\"]  \n      interval: 10s\n      timeout: 60s\n      retries: 5\n\n\nnetworks:\n  red-frontend:\n  red-database:\n\n\nvolumes:\n  volumen_db:\n\n\nsecrets:\n  secreto:\n    file: ./secreto.txt    \n    # file: $HOME/secreto.txt   \n</code></pre> <p>Las variables de entorno usadas para mapeo de puertos se cargaron en el archivo <code>.env</code>. Valores de ejemplo:</p> Integrador - archivo .env<pre><code>PUERTO_FRONT=8181\nPUERTO_BACK=8182\nPUERTO_DB=9000\n</code></pre>"},{"location":"contenedores/integrador/#frontend","title":"Frontend","text":"<p>El servicio de frontend se encarga de proporcionar una pagina web din\u00e1mica construida con el framework Flet. Este servicio interact\u00faa con el servicio de backend haciendo peticiones HTTP con ayuda del paquete requests.</p> Archivos del frontend Frontend - requirements.txt<pre><code>flet[all]==0.28.3\nrequests==2.32.5\n</code></pre> Frontend - Dockerfile<pre><code># imagen de referencia\nARG VERSION_PYTHON=\"3.13.5-alpine3.22\"\nFROM python:${VERSION_PYTHON}\n\n# directorio de trabajo (se crea autom\u00e1ticamente)\nWORKDIR /code\n\n# instalaci\u00f3n de dependencias\nCOPY requirements.txt ./\nRUN pip install -r requirements.txt --no-cache-dir \n\n# copia de rutinas al directorio de trabajo\nCOPY app/ ./\n\n# Puerto expuesto (meramente informativo)\nEXPOSE 8000\n\n# comando, opciones y argumentos fijos\nENTRYPOINT [\"uvicorn\", \"main:app\", \"--port\", \"8000\"]\n\n# opciones y argumentos sobreescribibles\nCMD [\"--host\", \"0.0.0.0\"]\n</code></pre> Frontend - main.py<pre><code>\"\"\"main.py - Rutina principal - incluye el maquetado de la pagina web\"\"\"\n\n# biblioteca estandar\nfrom logging import basicConfig\nfrom logging import info\nfrom logging import INFO\nimport os\n\n# paquetes\nimport flet as ft\nimport requests\n\n# modulos\nfrom tabla_personas import TablaPersonas\n\n# uso de la consola de logs\nbasicConfig(\n    level=INFO,\n    format=\"%(asctime)s - %(levelname)s - %(message)s\",  # info incorporada\n)\n\n# URLs al backend\nservicio_backend = os.getenv(\"SERVICIO_BACKEND\")\npuerto_backend   = os.getenv(\"PUERTO_BACKEND\")\n\nURL_CREAR_PERSONA = f\"http://{servicio_backend}:{puerto_backend}/nuevo/\"\nURL_LEER_TODOS    = f\"http://{servicio_backend}:{puerto_backend}/leer_todos/\"\n\n\n# dise\u00f1o de p\u00e1gina\ndef main(page: ft.Page):\n    \"\"\"Esta funci\u00f3n define el dise\u00f1o de la p\u00e1gina web.\"\"\"\n\n    def crear_persona(e):\n        \"\"\"Este handler ordena crear una nueva persona ficticia.\"\"\"\n\n        # orden al backend para crear nueva persona\n        requests.post(URL_CREAR_PERSONA, timeout=5)\n        # # relectura de tablas\n        actualizacion_tabla()\n        info(\"Nueva persona creada\")\n\n\n    def actualizacion_tabla():\n        \"\"\"Esta funcion lee la tabla desde la base de datos y la carga a la p\u00e1gina.\"\"\"\n\n        # lectura de tabla (completa)\n        respuesta = requests.get(URL_LEER_TODOS, timeout=5)\n        personas = respuesta.json()\n\n        # borrado de filas\n        tabla.rows = []\n\n        # # creacion de filas - una a una\n        for persona in personas:\n            info(persona)\n            tabla.nueva_persona(persona)\n\n        # actualizacion grafica\n        page.update()\n\n    # boton flotante\n    page.floating_action_button = ft.FloatingActionButton(\n        icon=ft.Icons.ADD,\n        on_click=crear_persona,\n    )\n\n    # tabla web\n    tabla = TablaPersonas()\n\n    # maquetado y estilos\n    page.add(\n        ft.SafeArea(\n            ft.Container(\n                tabla,\n                alignment=ft.alignment.center,\n                expand=True,\n            )\n        )\n    )\n\n    # actualizacion grafica\n    actualizacion_tabla()\n    page.update()\n\n\n# objeto renderizable por el server Uvicorn\napp = ft.app(main, export_asgi_app=True)\n</code></pre> Frontend - tabla_personas.py<pre><code>\"\"\"tabla_personas.py - M\u00f3dulo implementado para dise\u00f1ar la tabla gr\u00e1fica.\"\"\"\n\n# paquetes\nfrom flet import DataTable, DataCell, DataRow, DataColumn\nfrom flet import Text, FontWeight\n\n\nclass TablaPersonas(DataTable):\n    \"\"\"Tabla custom - con lectura de filas a medida\"\"\"\n\n    def __init__(self):\n        \"\"\"Inicializacion de la tabla gr\u00e1fica.\"\"\"\n        super().__init__(\n            width=1200,\n            height=700,\n            heading_row_height=50,\n            column_spacing=20,\n            columns=[\n                DataColumn(Text(\"ID\", weight=FontWeight.BOLD, width=100)),\n                DataColumn(Text(\"Nombre\", weight=FontWeight.BOLD, width=300)),\n                DataColumn(Text(\"Direcci\u00f3n\", weight=FontWeight.BOLD, width=300)),\n                DataColumn(\n                    Text(\"Edad\", weight=FontWeight.BOLD, width=100), numeric=True\n                ),\n            ],\n        )\n\n    # def nueva_persona(self, persona: Persona):\n    def nueva_persona(self, persona: dict):\n        \"\"\"Agrega una fila a la tabla gr\u00e1fica con los datos de entrada.\"\"\"\n        fila = DataRow(\n            cells=[\n                DataCell(Text(persona[\"id\"], width=100)),\n                DataCell(Text(persona[\"nombre\"], width=300)),\n                DataCell(Text(persona[\"direccion\"], width=300)),\n                DataCell(Text(persona[\"edad\"], width=100)),\n            ],\n        )\n        self.rows.append(fila)\n        return fila\n</code></pre>"},{"location":"contenedores/integrador/#backend","title":"Backend","text":"<p>El backend implementa un servidor HTTP con ayuda del framework FastAPI. Para interactuar con la base de datos utiliza el paquete SQLModel, el cual permite dise\u00f1ar las tablas SQL e implementar tanto el guardado como la lectura de datos mediante clases pedefinidas, sin necesidad de agregar c\u00f3digo SQL. Por \u00faltimo, los datos de los registros se inventan con ayuda del paquete Faker, que inventa datos de personas ficticias con un simple llamado a un m\u00e9todo predefinido. </p> Archivos del backend Backend - requirements.txt<pre><code>fastapi[all]==0.117.1\nsqlmodel==0.0.24\npsycopg2-binary==2.9.10\nFaker==37.4.2\n</code></pre> <p>(psycopg2 es requerido para poder establecer la conexi\u00f3n con la base Postgres, sin embargo no requiere ser llamado expl\u00edcitamente por la rutina de Python).</p> Backend - Dockerfile<pre><code># imagen de referencia\nARG VERSION_PYTHON=\"3.13.5-alpine3.22\"\nFROM python:${VERSION_PYTHON}\n\n# directorio de trabajo (se crea autom\u00e1ticamente)\nWORKDIR /code\n\n# instalaci\u00f3n de dependencias\nCOPY requirements.txt ./\nRUN pip install -r requirements.txt --no-cache-dir \n\n# copia de rutinas al directorio de trabajo\nCOPY app/ ./\n\n# Puerto expuesto (meramente informativo)\nEXPOSE 8000\n\n# comando, opciones y argumentos fijos\nENTRYPOINT [\"uvicorn\", \"main:app\", \"--port\", \"8000\"]\n\n# opciones y argumentos sobreescribibles\nCMD [\"--host\", \"0.0.0.0\"]\n</code></pre> Backend - main.py<pre><code>\"\"\"main.py - Rutina principal - incluye el maquetado de la pagina web\"\"\"\n\n# paquetes\nfrom fastapi import FastAPI\n\n# modulos\nfrom sql import leer_todas_personas_db, guardar_persona_db\nfrom persona import nueva_persona\n\n# objeto renderizable por el server Uvicorn\napp = FastAPI()\n\n\n# paths implementados\n@app.get(\"/\")\nasync def root():\n    \"\"\"Un mero mensaje informativo\"\"\"\n    return {\"message\": \"Backend hecho en FastAPI\"}\n\n\n@app.post(\"/nuevo\")\nasync def nuevo_usuario():\n    \"\"\"Path elegido para ordenar la creaci\u00f3n de un nuevo usuario.\"\"\"\n    persona = nueva_persona()\n    datos_nuevos:dict = await guardar_persona_db(persona)\n    return datos_nuevos\n\n\n@app.get(\"/leer_todos\")\nasync def leer_usuarios():\n    \"\"\"Path elegido para leer los datos de todos los usuarios en la base de datos.\n    se devuelven como una lista de diccionarios.\"\"\"\n    lista_todos: list[dict]\n    lista_todos = await leer_todas_personas_db()\n    return lista_todos\n</code></pre> Backend - persona.py<pre><code>\"\"\"persona.py - Este m\u00f3dulo crea los datos de personas ficticias.\"\"\"\n\n# bibliotecas estandar\nimport os\nfrom random import randint\n\n# paquetes\nfrom faker import Faker\n\n# lenguaje y regi\u00f3n del registro de personas\nlenguaje_region = os.getenv(\"TAG_LENGUAJE\",default=\"ES_ES\")\n\n\n# generador de datos ficticios\ndatos_fake = Faker(locale=lenguaje_region)\n\n# crear nueva persona\ndef nueva_persona()-&gt;dict:\n    \"\"\"Esta funci\u00f3n crea los datos de una nueva persona ficticia.\"\"\"\n    # generacion de nueva persona\n    nombre = datos_fake.name()\n    direccion = datos_fake.address()\n    edad = randint(13, 65)\n\n    # agrupacion como diccionario\n    data_persona = {\n        \"nombre\": nombre ,\n        \"direccion\": direccion,\n        \"edad\": edad\n    }\n\n    return data_persona\n</code></pre> Backend - sql.py<pre><code>\"\"\"sql.py - M\u00f3dulo dedicado a las consultas a la base de datos\"\"\"\n\n# bibliotecas estandar\nimport os\nfrom pathlib import Path\nfrom typing import Optional\n\n# paquetes\nfrom sqlmodel import Field, SQLModel, create_engine\nfrom sqlmodel import Session, select\n\n\n# Variables de entorno - necesarias para componer la URL de la base de datos\nuser = os.getenv(\"POSTGRES_USER\")\ndatabase = os.getenv(\"POSTGRES_DB\")\ndominio = os.getenv(\"POSTGRES_DOMINIO\")\nruta_password_secreto = os.getenv(\"POSTGRES_PASSWORD_FILE\")\n\n\nif Path(ruta_password_secreto).is_file():\n    with open(ruta_password_secreto, \"r\",encoding=\"utf-8\") as archivo:\n        password = archivo.read()\nelse:\n    password = os.getenv(\"POSTGRES_PASSWORD\")\n\n# composicion de la URL dela base de datos\nruta_db = f\"postgresql://{user}:{password}@{dominio}:5432/{database}\"\n\n\n# creaci\u00f3n del conector\nengine = create_engine(\n    ruta_db,\n    # echo=True,\n    pool_pre_ping=True,\n)\n\n# Dise\u00f1o de tabla SQL\nclass PersonaSQL(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    nombre: str\n    direccion: str\n    edad: Optional[int] = None\n\n\n# creacion de base de datos vac\u00eda (s\u00f3lo si aun no existe)\nSQLModel.metadata.create_all(engine)\n\n\n# funciones para peticiones remotas\n\nasync def guardar_persona_db(persona: dict)-&gt;dict:\n    \"\"\"Esta funci\u00f3n guarda los datos de la persona en una base de datos.\"\"\"\n    # carga en base datos\n    with Session(engine) as session:\n        # carga de datos - fila a fila\n        persona = PersonaSQL(\n            nombre=persona[\"nombre\"],\n            direccion=persona[\"direccion\"],\n            edad=persona[\"edad\"],\n        )\n        session.add(persona)\n        # confirmaci\u00f3n de cambios\n        session.commit()\n        return persona\n\n    return None\n\n\nasync def leer_todas_personas_db()-&gt;list[dict]:\n    \"\"\"Esta funci\u00f3n lee los datos de todas las personas registradas\n    y los devuelve como lista de diccionarios. \"\"\"\n    # lectura desde base de datos \n    with Session(engine) as session:\n        statement = select(PersonaSQL)\n        resultados = session.exec(statement)\n        data = resultados.all()\n        personas = data\n        return personas\n\n    return []\n</code></pre>"},{"location":"contenedores/integrador/#despliegue-y-consulta","title":"Despliegue y consulta","text":"<p>Simplemente  ubicarse en la ruta del proyecto y ejecutar:</p> Integrador - Despliegue<pre><code>podman compose up -d\n</code></pre> <p>La web din\u00e1mica debe aparecer visible en el puerto 8181 o en el puerto por default que es el 8000.</p> <p>La API se puede consultar desde el navegador puerto 8182 o en el puerto preasignado que es el 8001.</p>"},{"location":"contenedores/networks/","title":"Networks","text":"<p>Las redes (networks) son elementos auxiliares que permiten interconectar a los contenedores del proyecto desde dentro de su entorno aislado, sin necesidad de pasar por el sistema anfitri\u00f3n.</p>"},{"location":"contenedores/networks/#introduccion","title":"Introducci\u00f3n","text":"<p>El gestor de contenedores implementa las networks como imitaci\u00f3n de las redes privadas y redirige las peticiones IP de unos contenedores a otros.</p> <p>Para el aprovechamiento de las redes es clave el nombre de servicio de los contenedores. El nombre de servicio de cada contenedor funciona como un nombre de dominio. Durante el despliegue el gestor de los contenedores asigna una IP privada a cada contenedor del proyecto. Tambi\u00e9n implementa un servidor DNS (\"Name Domain Server\") local que guarda la equivalencia entre servicios e IPs. De esta manera los contenedores podr\u00e1n hacer peticiones IP a otros contenedores usando su nombre de servicio para conformar las URLs a las cuales consultar.</p> <p>Por ejemplo: si un contenedor necesita consultar una base de datos MySQL desplegada en otro contenedor entonces el \"dominio\" ya no ser\u00e1 <code>localhost</code> sino el nombre del servicio asignado a la base de datos, por ejemplo <code>servicio_db</code>:</p> URL network - Base de datos MySQL<pre><code>mysql://user:password@servicio_db:3306/nombre_db\n</code></pre>"},{"location":"contenedores/networks/#implementacion","title":"Implementaci\u00f3n","text":"<p>Las redes se implementan dentro del archivo <code>compose.yml</code>.</p>"},{"location":"contenedores/networks/#red-default","title":"Red default","text":"<p>De manera predeterminada todos los contenedores de un mismo proyecto comparten una network com\u00fan, llamada literalmente \"default\", que les permite interconectarse los unos con los otros.</p> <p>Tom\u00e9se como ejemplo el proyecto de un servidor creado en tres partes: frontend, backend y base de datos. Con la network default las tres partes pueden comunicarse directamente entre s\u00ed,  en cualquier combinaci\u00f3n y en cualquier sentido.</p> <pre><code>---\ntitle: \"Networks - Red default\"\nconfig:\n  markdownAutoWrap: false\n---\nflowchart LR\n\n    subgraph proyecto [Entorno proyecto]\n\n\n        subgraph services [Servicios]\n        front[\"`Frontend \n            frontend:8000`\"]\n        back[\"`Backend\n            backend:8000`\"]\n        db[\"`Base de datos MySQL\n            db:3306`\"]\n        end\n\n        subgraph redes [Redes]\n            red-default[\"(default)\"]\n        end\n\n    end\n\n    front --- red-default\n    back --- red-default\n    db --- red-default\n\n    subgraph host [Host]\n        subgraph ports [Puertos]\n            port1[\"`Navegador\n            localhost:8000`\"]\n        end\n    end\n\n    port1 --&gt;|8000:8000| front</code></pre> <p>La implementaci\u00f3n de este interconexionado es t\u00e1cita: no se indica por escrito. Todo contenedor que no tenga una network asignada manualmente es conectada a la red default.</p> compose.yml - Red default<pre><code>services:\n\n  frontend:\n    image: imagen-front\n\n  backend:\n    image: imagen-back\n\n  db:\n    image: imagen-db\n</code></pre> <p>Esta implementaci\u00f3n no es recomendada para proyectos reales debido a que todos los contenedores del proyecto podr\u00edan acceder a informaci\u00f3n sensible transmitida por los dem\u00e1s, facilitando la aparici\u00f3n de vulnerabilidades en el sistema.</p>"},{"location":"contenedores/networks/#subredes","title":"Subredes","text":"<p>La manera de definir (y limitar) la conectividad entre contenedores se realiza definiendo m\u00faltiples networks dentro del proyecto.</p> <p>En este ejemplo, s\u00f3lo el servicio de backend puede acceder directamente a la base de datos y el servicio de frontend  s\u00f3lo puede interactuar con el backend:</p> <pre><code>---\ntitle: \"Networks - Redes partidas\"\n---\nflowchart LR\n\n    subgraph proyecto [Entorno proyecto]\n\n        subgraph services [Servicios]\n        front[\"`Frontend \n            frontend:8000`\"]\n        back[\"`Backend\n            backend:8000`\"]\n        db[\"`Base de datos MySQL\n            db:3306`\"]\n        end\n\n        subgraph redes [Redes]\n            red-front[red-frontend]\n            red-db[red-db]\n        end\n    end\n\n\n    front --- red-front\n    back --- red-front\n    back --- red-db\n    db --- red-db\n\n\n    subgraph host [Host]\n        subgraph ports [Puertos]\n            port1[\"`Navegador\n            localhost:8000`\"]\n        end\n    end\n\n    port1 --&gt;|8000:8000| front\n</code></pre> <p>Dentro del archivo <code>compose.yml</code> se crea una secci\u00f3n llamada <code>networks</code> donde se definen las redes que estar\u00e1n disponibles en el proyecto. Por otra parte, a cada contenedor se le define el campo <code>networks</code> donde se asigna una lista de redes  a las cuales podr\u00e1 conectarse:</p> compose.yml - Redes custom<pre><code>services:\n\n  frontend:\n    image: imagen-front\n    # acceso\n    networks:\n      - red-frontend\n\n  backend:\n    image: imagen-back\n    # acceso\n    networks:\n      - red-frontend\n      - red-db\n\n  db:\n    image: imagen-db\n    # acceso\n    networks:\n      - red-db\n\n\n# definici\u00f3n de redes\nnetworks:\n  red-front:\n  red-db:\n</code></pre> <p>En este esquema, cada contenedor s\u00f3lo puede comunicarse con aquellos contenedores con los cuales comparta al menos una red. Aquellos contenedores que no tengan asignada al menos una network permanecer\u00e1n aislados del resto.</p>"},{"location":"contenedores/networks/#redes-externas","title":"Redes externas","text":"<p>Las redes tambi\u00e9n pueden ser externas: tan s\u00f3lo requieren que se les agregue la opci\u00f3n <code>external: true</code>:</p> <p>compose.yml - Redes externas<pre><code># definici\u00f3n de redes\nnetworks:\n  red-externa:\n    external: true\n</code></pre> Dichas redes pueden proceder de otros proyectos Compose o tambi\u00e9n pueden ser creadas manualmente.</p>"},{"location":"contenedores/networks/#drivers-y-parametros-adicionales","title":"Drivers y par\u00e1metros adicionales","text":"<p>Normalmente no es necesario especificar par\u00e1metros adicionales para utilizar las redes. Sin embargo, se pueden especificar diferentes drivers, elegir el protocolo IPv6 frente al IPv4, asignar m\u00e1scaras de red y gateways, etc.</p> <p>El driver usado por defecto se llama <code>bridge</code>. M\u00e1s informaci\u00f3n sobre los drivers: Docker Docs - Network drivers.</p>"},{"location":"contenedores/networks/#ejemplo-proxy-reverso-con-nginx","title":"Ejemplo: proxy reverso con NGINX","text":"<p>Este ejemplo se basa en el demo de la web app con Flet. Esta web app consiste en un contenedor cuyo nombre de servicio es <code>webapp-flet</code> y acepta conexiones entrantes por el puerto <code>8000</code></p> <p>A este demo se le agrega un contenedor NGINX que es configurado como proxy reverso, esto es un servidor que redirige el tr\u00e1fico a distintas URLs dependiendo de qu\u00e9 ruta se le indique a la entrada.</p> <p>Este es el diagrama de bloques implementado:</p> <pre><code>---\ntitle: \"Network - Proxy reverso\"\n---\nflowchart LR\n\n    subgraph proyecto [Entorno proyecto]\n\n        subgraph services [Servicios]\n        front[\"`webapp-flet\n            puerto 8000`\"]\n        proxy[\"`proxy-nginx\n            puerto 80`\"]\n        end\n\n        subgraph redes [Redes]\n            red-default[\"red-proxy\"]\n        end\n\n    end\n    subgraph host [Host]\n        subgraph ports [Puertos]\n\n            port2[\"`Navegador\n            localhost:1234`\"]\n        end\n    end\n\n    port2 ---&gt;|1234:80| proxy\n\n    front &lt;--- red-default\n    proxy ---&gt; red-default</code></pre> <p>Para el proxy  se eligi\u00f3 el nombre de servicio  <code>proxy-nginx</code> y acepta conexiones por el puerto <code>80</code>. Este puerto 80 (t\u00edpicamente reservado en el host)  es mapeado al puerto  <code>1234</code> del anfitri\u00f3n.</p>"},{"location":"contenedores/networks/#organizacion-de-archivos","title":"Organizaci\u00f3n de archivos","text":"<p>Se coloca el demo del port mapping dentro del directorio <code>flet</code>,  y a su lado se prepara el directorio <code>nginx</code> con los archivos de configuraci\u00f3n necesarios:</p> Demo proxy - \u00c1rbol de archivos<pre><code>.\n\u251c\u2500\u2500 compose.yml\n\u251c\u2500\u2500 flet\n\u2502   \u251c\u2500\u2500 demo\n\u2502   \u2502   \u2514\u2500\u2500 main.py\n\u2502   \u251c\u2500\u2500 Dockerfile\n\u2502   \u2514\u2500\u2500 requirements.txt\n\u2514\u2500\u2500 nginx\n    \u251c\u2500\u2500 default.conf\n    \u2514\u2500\u2500 Dockerfile\n</code></pre>"},{"location":"contenedores/networks/#imagen-del-proxy","title":"Imagen del proxy","text":"<p>El archivo de configuraci\u00f3n necesario para el proxy es el archivo <code>default.conf</code>. En \u00e9l se definen las rutas de entrada al proxy y a qu\u00e9 URL deben ser redirigidas. El destino es el contenedor del servidor Flet, cuya URL est\u00e1 formada por su nombre de servicio y su puerto de escucha.</p> Demo proxy - default.conf<pre><code>server {\n  # puerto en escucha: 80 (default)\n  listen 80;\n  listen [::]:80;\n\n  server_name _;\n\n  ### Redirecci\u00f3n a sitio con WebSockets\n\n  # petici\u00f3n a ruta '/'\n  location / {\n      proxy_pass         http://webapp-flet:8000/;\n      proxy_http_version 1.1;\n      proxy_set_header   Upgrade $http_upgrade;\n      proxy_set_header   Connection keep-alive;\n      proxy_set_header   Host $host;\n      proxy_cache_bypass $http_upgrade;\n      proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;\n      proxy_set_header   X-Forwarded-Proto $scheme;\n  }\n\n  # petici\u00f3n a ruta '/ws'\n  location /ws {\n      proxy_pass         http://webapp-flet:8000/ws;\n      proxy_http_version 1.1;\n      proxy_set_header   Upgrade $http_upgrade;\n      proxy_set_header   Connection \"upgrade\";\n      proxy_set_header   Host $host;\n      proxy_cache_bypass $http_upgrade;\n      proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;\n      proxy_set_header   X-Forwarded-Proto $scheme;\n  }\n\n}\n</code></pre> <p>N\u00f3tese las peticiones que el servidor proxy recibe  en la URL <code>http://proxy-nginx:80/</code> son redireccionadas a la URL <code>http://webapp-flet:8000/</code>, que corresponde al otro contenedor.  El proxy requiere redirecci\u00f3n doble (<code>/</code> y <code>/ws</code>) porque la webapp utiliza WebSockets. </p> <p>Este archivo es integrado en una nueva imagen derivada de NGINX con ayuda del archivo Dockerfile en la ruta <code>/etc/nginx/conf.d/default.conf</code>:</p> Demo proxy - Dockerfile (NGINX)<pre><code># imagen de base: NGINX\nFROM nginx\n\n# copia del archivo de configuracion\nCOPY default.conf /etc/nginx/conf.d/default.conf\n</code></pre>"},{"location":"contenedores/networks/#despliegue","title":"Despliegue","text":"<p>El despliegue de ambos contenedores se orquesta con el archivo Compose adaptado, el cual ahora apunta a ambos Dockerfiles. La creaci\u00f3n y uso de una network custom es opcional.</p> Demo proxy - compose.yml<pre><code>name: demo-redes-proxy\n\nservices:\n\n  webapp-flet:    \n    build: flet/        \n    image: webapp-flet\n    networks:\n      - red-proxy\n\n  proxy-nginx:\n    build: nginx/\n    image: proxy-nginx\n    command: [nginx, '-g', 'daemon off;']\n    ports:\n      - 1234:80\n    tty: true\n    stdin_open: true\n    depends_on:\n      - webapp-flet\n    networks:\n      - red-proxy\n\n\nnetworks:\n  red-proxy:\n</code></pre> <p>Se despliega el proyecto:</p> Demo proxy - Despliegue<pre><code>podman compose up -d\n</code></pre> <p>y ahora el navegador web debe poder acceder  a la p\u00e1gina demo  desde el puerto <code>1234</code>.</p>"},{"location":"contenedores/networks/#manejo-manual","title":"Manejo manual","text":"<p>Al igual que con otros elementos de los contenedores, a veces es necesario manipular las redes mediante comandos.</p> <p>Las redes existentes se enumeran con el comando <code>list</code>:</p> Networks - Listado<pre><code>podman network list\n</code></pre> <p>y la inspecci\u00f3n de las mismas se realiza con el comando <code>inspect</code>:</p> Networks - Inspecci\u00f3n<pre><code>podman network inspect NOMBRE_RED\n</code></pre> <p>Una red se puede crear y asignarle un nombre con el comando <code>create</code>:</p> Networks - Creaci\u00f3n<pre><code>podman network create NOMBRE_RED\n</code></pre> <p>El borrado de las redes no usadas actualmente se realiza con el comando <code>prune</code>:</p> Networks - Poda<pre><code>podman network prune\n</code></pre> <p>y la eliminaci\u00f3n manual de redes espec\u00edficas se hace con <code>remove</code>:</p> Networks - Borrado<pre><code>podman network remove NOMBRE_RED\n</code></pre> <p>Redes hu\u00e9rfanas</p> <p>A veces quedan networks hu\u00e9rfanas que impiden desplegar los proyectos cuando su estructura es modificada. Esto se soluciona eliminando estas redes de manera manual con <code>prune</code> o <code>remove</code>.</p>"},{"location":"contenedores/networks/#referencias","title":"Referencias","text":"<p>DockerDocs - Define and manage networks in Docker Compose</p> <p>Docker Docs - Network drivers</p> <p>Medium - [DevOps] Setting up a Docker Reverse Proxy Nginx \u2014 Multiple local apps</p> <p>Flet.dev - Self Hosting</p>"},{"location":"contenedores/precauciones/","title":"Precauciones previas y tips","text":"<p>Antes de intentar el despliegue  de aplicaciones Python  en contenedores es conveniente verificar algunos pasos previos, con el fin de minimizar errores posteriores.</p>"},{"location":"contenedores/precauciones/#agrupar-importaciones","title":"Agrupar importaciones","text":"<p>Si en el proyecto hay archivos o directorios de m\u00f3dulos, configuraciones, traducciones, etc. es conveniente que estos archivos  est\u00e9n agrupados en subdirectorios de la carpeta del proyecto, con el fin de ser copiados f\u00e1cilmente adentro del contenedor en las rutas correctas.</p>"},{"location":"contenedores/precauciones/#comandos-ejecutables","title":"Comandos ejecutables","text":"<p>Hay que atenci\u00f3n al comando utilizado para la ejecuci\u00f3n de la rutina y tambi\u00e9n a sus argumentos posicionales y opciones de entrada. De esta manera el comando podr\u00e1 ser adaptado al archivo Dockerfile. </p> <p>En este sentido, tener en cuenta que el alias <code>py</code> para el int\u00e9rprete de Python normalmente no est\u00e1 disponible en el contenedor.</p>"},{"location":"contenedores/precauciones/#versiones-de-dependencias","title":"Versiones de dependencias","text":"<p>Si el programa requiere paquetes adicionales entonces es importante fijar las versiones usadas indicando sus etiquetas de versi\u00f3n. Esto prevendr\u00e1 que el c\u00f3digo se \"rompa\" si los paquetes usados son actualizados descontroladamente.</p> <p>Por ejemplo, si se usa PIP para gestionar los paquetes  el comando <code>pip freeze</code> sirve asegurar las versiones de todos los paquetes en archivo TXT.</p> <p>En el caso de Poetry, ese mismo control fino se puede conseguir con el archivo LOCK. Otra opci\u00f3n es el uso del archivo TOML que define el versionado de una manera normalmente m\u00e1s laxa.</p>"},{"location":"contenedores/precauciones/#versiones-de-python","title":"Versiones de Python","text":"<p>No todas las versiones de Python son capaces de correr las rutinas debidos a los cambios de sintaxis, prestaciones nuevas y prestaciones obsoletas, etc. Por este motivo debe elegirse como base una imagen de Python cuya versi\u00f3n instalada del int\u00e9rprete pueda ejecutar el c\u00f3digo fuente correctamente.</p>"},{"location":"contenedores/precauciones/#compatibilidad-con-la-imagen","title":"Compatibilidad con la imagen","text":"<p>Las dependencias usadas deben ser capaces de ser usadas en el sistema operativo de la imagen.</p> <p>Por ejemplo: el paquete <code>psycopg2</code>, que es necesario para interactuar con bases de datos PostgreSQL, s\u00f3lo funciona el Windows. Su equivalente para sistemas GNU/Linux es el paquete <code>psycopg2-binary</code> y es \u00e9sta la versi\u00f3n que funcionar\u00e1 en las im\u00e1genes de Python m\u00e1s habituales.</p>"},{"location":"contenedores/precauciones/#print-vs-logging","title":"print vs logging","text":"<p>En los contenedores la salida de texto por consola a menudo no est\u00e1 implementada, por este motivo escribir texto mediante la funci\u00f3n <code>print()</code> es problem\u00e1tico. La alternativa es la lectura de texto desde la ventana de logs, la cual es de uso est\u00e1ndar en los contenedores. Para ello es necesario el uso de las funciones de logging, las cuales requieren importaci\u00f3n y configuraci\u00f3n para su uso:</p> Logging - configuracion previa<pre><code>import logging\n\n# uso de la consola de logs\nlogging.basicConfig(\n    level=logging.INFO, # m\u00ednimo nivel de log a publicar\n    format=\"%(asctime)s - %(levelname)s - %(message)s\", #info incorporada\n    )\n</code></pre> <p>Los logs se pueden guardar en archivo  al tiempo que se muestran en consola. La configuraci\u00f3n se realiza f\u00e1cilmente con ayuda de las funciones <code>StreamHandler()</code> y<code>FileHandler()</code> del m\u00f3dulo <code>logging</code> tal como se muestra a continuaci\u00f3n:</p> logging en archivo<pre><code>import logging\n\nlogging.basicConfig(\n    level=logging.INFO, # m\u00ednimo nivel de log a publicar\n    format=\"%(asctime)s - %(levelname)s - %(message)s\", #info incorporada\n    handlers=[\n        # salida por consola\n        logging.StreamHandler(), \n        # salida por archivo\n        logging.FileHandler(\n            filename=ruta_archivo,\n            mode=\"a\",             # agregado ('append')\n            encoding=\"utf-8\",\n            delay=True,\n            ),\n        ],\n    )\n</code></pre> <p>Hay varias funciones para crear los mensajes de log, las cuales tienen distintos niveles de jerarqu\u00eda:</p> Logging - funciones de salida<pre><code>logging.debug(\"Texto de DEBUG\")         # m\u00ednima jerarqu\u00eda\nlogging.info(\"Texto de INFO\")\nlogging.warning(\"Texto de WARNING\")\nlogging.error(\"Texto de ERROR\")\nlogging.critical(\"Texto de CRITICAL\")   # m\u00e1xima jerarqu\u00eda\n</code></pre> <p>Las llamadas a funciones de logging que no cumplan la jerarqu\u00eda m\u00ednima configuradas ser\u00e1n ignoradas durante la ejecuci\u00f3n.</p>"},{"location":"contenedores/precauciones/#f-strings-vs-lazy-format","title":"f-strings vs lazy format","text":"<p>Es prudente evitar los f-strings, porque si el tipo de datos de entrada del string es err\u00f3neo se puede producir una excepci\u00f3n que encubrir\u00e1 la informaci\u00f3n del reporte original.</p> <p>Su reemplazo son los strings con lazy format.</p> <p>Por ejemplo, la l\u00ednea:</p> formatted-string - entero, 4 espacios<pre><code>logging.info(f\"valor: {entero:4}\")\n</code></pre> <p>se convierte en:</p> lazy format - entero, 4 espacios<pre><code>logging.info(\"valor: %4i\", entero)\n</code></pre>"},{"location":"contenedores/profiles/","title":"Profiles","text":"<p>Los perfiles permiten la ejecuci\u00f3n condicional de los contenedores del proyecto.</p>"},{"location":"contenedores/profiles/#definicion","title":"Definici\u00f3n","text":"<p>Cada contenedor admite un campo opcional llamado <code>profile</code>. En \u00e9l se define al menos un nombre de perfil a implementar:</p> Profiles - Asignaci\u00f3n<pre><code># archivo 'compose.yml'\nservices:\n\n  servicio:\n    image: imagen_servicio\n    profiles:\n      [perfil]\n</code></pre> <p>Los contenedores que posean este campo definido s\u00f3lo se ejecutar\u00e1n si el nombre de perfil elegido ha sido activado desde la shell. En cambio, los contenedores que no fueron asignados a ning\u00fan perfil se pondr\u00e1n en marcha siempre.</p> <p>Un mismo contenedor puede tener asignados varios perfiles:</p> <p>Profiles - Asignaci\u00f3n m\u00faltiple<pre><code># archivo 'compose.yml'\nservices:\n\n  servicio:\n    image: imagen_servicio\n    profiles:\n      [perfil_1, perfil_2, ...]\n</code></pre> en este caso el contenedor ser\u00e1 habilitado si al menos uno de los perfiles indicados es activado.</p>"},{"location":"contenedores/profiles/#despliegue-por-perfil","title":"Despliegue por perfil","text":"<p>Los perfiles se activan de varias maneras. Una de ellas es agregando la opci\u00f3n <code>profile</code> al comando <code>compose</code>:</p> <p>Despliegue - por opci\u00f3n<pre><code>podman compose  --profile perfil  up\n</code></pre> Si se necesita activar varios perfiles al mismo tiempo esto se hace indicano varias veces la opci\u00f3n <code>profile</code>, una por cada perfil a activar:</p> Despliegue - por opci\u00f3n (m\u00faltiples perfiles)<pre><code>podman compose  --profile perfil_1 --profile perfil_2  up\n</code></pre> <p>La otra opci\u00f3n es recurrir a la variable de entorno <code>COMPOSE_PROFILES</code>:</p> Despliegue - con variable de entorno<pre><code>export COMPOSE_PROFILES=perfil\npodman compose up\n</code></pre> <p>La asignaci\u00f3n de m\u00faltiples perfiles se realiza separando los nombres de perfil con comas:</p> Despliegue - con variable de entorno (m\u00faltiples perfiles)<pre><code>export COMPOSE_PROFILES=perfil_1,perfil_2 \npodman compose up\n</code></pre>"},{"location":"contenedores/profiles/#detencion-por-perfil","title":"Detenci\u00f3n por perfil","text":"<p>Los perfiles tambi\u00e9n afectan a la detenci\u00f3n de los contenedores mediante el comando <code>down</code>. La parada por perfil se realiza agregando la opci\u00f3n <code>profile</code>:</p> <p>Detenci\u00f3n - con opci\u00f3n<pre><code>podman compose  --profile perfil  down\n</code></pre> o mediante su variable de entorno:</p> Detenci\u00f3n - con variable de entorno<pre><code>export COMPOSE_PROFILES=perfil\npodman compose down\n</code></pre> <p>Los contenedores detenidos ser\u00e1n:</p> <ul> <li>los que tengan asignado el perfil (o los perfiles) indicado;</li> <li>aquellos que no tengan ning\u00fan perfil asignado.</li> </ul> <p>Si hay contenedores asignados a otros perfiles en funcionamiento entonces \u00e9stos seguir\u00e1n funcionando normalmente.</p>"},{"location":"contenedores/profiles/#resolucion-de-dependencias","title":"Resoluci\u00f3n de dependencias","text":"<p>Cada contenedor del proyecto puede ser invocado directamente por su nombre de servicio. Para ello se utiliza el comando <code>run</code>:</p> Ejecuci\u00f3n - servicio espec\u00edfico<pre><code>podman compose run nombre_servicio\n</code></pre> <p>De esta manera s\u00f3lo se arranca:</p> <ul> <li>el servicio especificado;</li> <li>sus dependencias especificadas por el campo <code>depends_on</code>;</li> <li>aquellos servicios con los perfiles cargados mediante la opci\u00f3n <code>profile</code> o la variable <code>COMPOSE_PROFILES</code>. </li> </ul>"},{"location":"contenedores/profiles/#referencias","title":"Referencias","text":"<p>Docker Docs - Using profiles with Compose</p> <p>Docker Docs - Learn how to use profiles in Docker Compose</p>"},{"location":"contenedores/puertos/","title":"Port Mapping","text":"<p>El port mapping o mapeo de puertos le permite a las aplicaciones del sistema anfitri\u00f3n comunicarse con los contenedores  mediante conexiones IP.</p>"},{"location":"contenedores/puertos/#introduccion","title":"Introducci\u00f3n","text":"<p>El port mapping funciona de manera similar a un proxy reverso: los clientes hacen una petici\u00f3n  a la IP del gestor de contenedores y \u00e9ste redirige el tr\u00e1fico a alguno de los contenedores en actividad en base al puerto usado.</p> <p>Este es un esquema t\u00edpico del uso de este recurso:</p> <pre><code>---\ntitle: \"Port Mapping - Idea general\"\n---\nflowchart LR\n\n    subgraph proyecto [Entorno proyecto]\n\n        subgraph services [Servicios]\n        front[\"`Frontend \n            servicio_frontend:8000`\"]\n        back[\"`Backend \n            servicio_backend:8000`\"]\n        db[\"`Base de datos MYSQL\n            servicio_db:3306`\"]\n        end\n\n\n    end\n    subgraph host [Host]\n        subgraph ports [Puertos]\n            port1[\"`Navegador\n            localhost:8000`\"]\n            port2[\"`Cliente API \n            localhost:5000`\"]\n            port3[\"`Cliente DB \n            localhost:3306`\"]\n\n        end\n    end\n\n    port1 --&gt;|8000:8000| front\n    port2 --&gt;|5000:8000| back\n    port3 --&gt;|3306:3306| db</code></pre> <p>En este ejemplo el programa gestor se reserva los puertos  <code>8000</code>, <code>5000</code> y  <code>3306</code> del sistema anfitri\u00f3n. \u00c9ste redirige el tr\u00e1fico entrante a esos puertos al programa frontend (interfaz de usuario final), al programa backend (login, notificaciones, etc), y a la base de datos, en ese orden. N\u00f3tese que m\u00faltiples contenedores pueden tener im\u00e1genes que reserven un mismo n\u00famero de puerto, incluso en un mismo proyecto.</p> <p>Las peticiones IP se realizan mediante URLs, donde se especifica el protocolo requerido, el dominio del servidor, el puerto, etc. En el caso de ambientes de desarrollo es habitual que el despliegue y las consultas se realicen en el equipo local,  por lo cual las peticiones se hacen al dominio \"<code>localhost</code>\" o <code>127.0.0.1</code>, tal como se muestra en el esquema.</p> <p>Por ejemplo, una petici\u00f3n t\u00edpica a una p\u00e1gina web del frontend sin autenticaci\u00f3n toma esta forma:</p> <p>URL local - p\u00e1gina web<pre><code>http://localhost:8000/ruta_recurso\n</code></pre> en tanto que una conexi\u00f3n a la base de datos MySQL puede tomar una forma como esta:</p> URL local - Base de datos MySQL<pre><code>mysql://user:password@localhost:3306/nombre_db\n</code></pre> <p>IPs y Puertos</p> <p>M\u00e1s sobre las IPs y sus conceptos relacionados: ver anexo</p>"},{"location":"contenedores/puertos/#sintaxis","title":"Sintaxis","text":""},{"location":"contenedores/puertos/#dockerfile","title":"Dockerfile","text":"<p>En el archivo Dockerfile habitualmente se agrega la cl\u00e1usula <code>EXPOSE</code> para indicar en qu\u00e9 puerto la imagen estar\u00e1 preparada para recibir peticiones IP:</p> Port mapping - Dockerfile<pre><code>EXPOSE NUMERO_PUERTO\n</code></pre> <p>Esta cl\u00e1usula es meramente informativa (agrega metadata a la imagen final) y su uso es opcional.</p>"},{"location":"contenedores/puertos/#compose","title":"Compose","text":"<p>A cada contenedor que necesite ser accedido desde el exterior se le configura el par\u00e1metro <code>ports</code> asignando los n\u00fameros de los puertos de a pares:</p> Port mapping - compose.yml<pre><code>services:\n\n  servicio_ip:\n    image: imagen-servicio\n    ports:\n      - puerto_host:puerto_contenedor\n</code></pre> <p>Un mismo contenedor puede tener varios puertos mapeados hacia el host.</p> <p>El protocolo usado por el puerto puede ser especificado de manera opcional:</p> Port mapping - compose.yml (con protocolos)<pre><code>services:\n\n  servicio_ip:\n    image: imagen-servicio\n    ports:\n      - puerto_host:puerto_contenedor/protocolo\n</code></pre> <p>donde las elecciones disponibles son <code>tcp</code> y <code>udp</code>. V\u00e9ase el anexo sobre TCP y UDP para m\u00e1s informaci\u00f3n sobre estos protocolos.</p>"},{"location":"contenedores/puertos/#ejemplo-webapp-con-python","title":"Ejemplo: webapp con Python","text":"<p>Sup\u00f3ngase un servidor de una p\u00e1gina web din\u00e1mica implementada con el framework Flet, que se utiliza con Python.</p> <p>Se busca desplegarlo en un contenedor y conectarlo al anfitri\u00f3n mediante port mapping.</p> <pre><code>---\ntitle: \"Port Mapping - Web Din\u00e1mica con Flet\"\n---\nflowchart LR\n\n    subgraph proyecto [Entorno proyecto]\n\n        subgraph services [Servicios]\n        front[\"`Servidor Flet\n            webapp-flet:8000`\"]\n        end\n\n\n    end\n    subgraph host [Host]\n        subgraph ports [Puertos]\n            port1[\"`Navegador\n            localhost:9999`\"]\n        end\n    end\n\n    port1 --&gt;|9999:8000| front</code></pre> <p>Para aceptar las peticiones se eligi\u00f3 arbitrariamente el puerto <code>9999</code>.</p>"},{"location":"contenedores/puertos/#proyecto-demo","title":"Proyecto demo","text":"<p>Este es el \u00e1rbol del proyecto:</p> demo webapp - \u00c1rbol de archivos<pre><code>.\n\u251c\u2500\u2500 compose.yml\n\u251c\u2500\u2500 demo\n\u2502   \u2514\u2500\u2500 main.py\n\u251c\u2500\u2500 Dockerfile\n\u2514\u2500\u2500 requirements.txt\n</code></pre> <p>Dentro del archivo de requisitos se indica la versi\u00f3n de Flet requerida, la cual debe ser un paquete completo:</p> demo webapp - requirements.txt<pre><code>flet[all]==0.26.0\n</code></pre> <p>El c\u00f3digo del programa es un demo oficial de Flet que consiste en un contador num\u00e9rico y un bot\u00f3n flotante. Cuando se aprieta el bot\u00f3n el contador se incrementa en uno.</p> demo webapp - C\u00f3digo fuente<pre><code># importaci\u00f3n\nimport flet as ft\n\n\n# Dise\u00f1o de p\u00e1gina y eventos\ndef main(page: ft.Page):\n\n    #contador: barra de texto\n    counter = ft.Text(\"0\", size=50, data=0)\n\n    # evento: contar cuando se clickea el bot\u00f3n\n    def increment_click(e):\n        counter.data += 1\n        counter.value = str(counter.data)\n        counter.update()\n\n    # bot\u00f3n flotante\n    page.floating_action_button = ft.FloatingActionButton(\n        icon=ft.Icons.ADD, on_click=increment_click\n    )\n\n    # maquetado de p\u00e1gina\n    page.add(\n        ft.SafeArea(\n            ft.Container(\n                counter,\n                alignment=ft.alignment.center,\n            ),\n            expand=True,\n        )\n    )\n\n# objeto desplegable con servidor (Uvicorn)\napp = ft.app(main, export_asgi_app=True)\n</code></pre>"},{"location":"contenedores/puertos/#entorno-virtual","title":"Entorno virtual","text":"<p>La aplicaci\u00f3n se instala localmente en un entorno virtual para probar su funcionamiento:</p> demo webapp - Instalaci\u00f3n (entorno virtual)<pre><code>py -m venv .venv\nsource  .venv/bin/activate\npip install -r requirements.txt\n</code></pre> <p>La puesta en marcha  en entorno local se realiza con el servidor Uvicorn el cual viene incluido con Flet y es llamado con el siguiente comando:</p> demo webapp - Despliegue (entorno virtual)<pre><code>cd demo/ \nuvicorn main:app --port 8000 --host 0.0.0.0\n</code></pre> <p>de manera que la p\u00e1gina local podr\u00e1 ser visitada  con el navegador en la ruta http://localhost:8000. En este ejemplo se eligi\u00f3 el puerto <code>8000</code>.</p> <p>IP comod\u00edn</p> <p>La IP <code>0.0.0.0</code> (comod\u00edn) se indica para que el servidor acepte peticiones desde cualquier IP v\u00e1lida.</p>"},{"location":"contenedores/puertos/#despliegue-con-contenedores","title":"Despliegue con contenedores","text":"<p>Con el archivo Dockerfile se adapta la instalaci\u00f3n y el comando de arranque a una imagen de Python:</p> demo webapp - Dockerfile<pre><code># imagen de referencia\nFROM python:alpine\n\n# directorio de trabajo (se crea autom\u00e1ticamente)\nWORKDIR /code\n\n# instalaci\u00f3n de dependencias\nCOPY requirements.txt ./\nRUN pip install -r requirements.txt --no-cache-dir \n\n# copia de rutinas al directorio de trabajo\nCOPY demo/ ./\n\n# puerto de entrada (INFORMATIVO)\nEXPOSE 8000\n\n# comando, opciones y argumentos\nCMD [\"uvicorn\", \"main:app\", \"--port\", \"8000\", \"--host\", \"0.0.0.0\"]\n</code></pre> <p>El mapeo entre anfitri\u00f3n y contenedor se realiza en el archivo <code>compose.yml</code>. En este ejemplo se eligi\u00f3 el puerto <code>9999</code> del host.</p> demo webapp - compose.yml<pre><code>name: demo-puertos\n\nservices:\n\n  webapp-flet:    \n    build: .        \n    image: webapp-flet\n    ports:\n    - 9999:8000\n</code></pre> <p>El despliegue se realiza con el comando <code>compose</code>:</p> demo webapp - Despliegue (con contenedor)<pre><code>podman compose up -d\n</code></pre> <p>Finalmente para ver la p\u00e1gina web en funcionamiento se abre el navegador en la ruta  <code>http://localhost:9999</code>.</p>"},{"location":"contenedores/secretos/","title":"Secrets","text":"<p>Los secretos son elementos auxiliares creados para cargar informaci\u00f3n sensible a los contenedores que la necesiten.</p>"},{"location":"contenedores/secretos/#uso-en-compose","title":"Uso en Compose","text":""},{"location":"contenedores/secretos/#definicion","title":"Definici\u00f3n","text":"<p>Los secrets tienen su propia secci\u00f3n dentro del archivo Compose:</p> compose.yml - Secci\u00f3n de secretos<pre><code># archivo 'compose.yml'\nsecrets:\n  secreto-servicio:\n    file: ./secreto-archivo.txt \n</code></pre> <p>El archivo puede estar guardado en la carpeta personal del usuario, en tal caso su ruta se suele indicar con la variable <code>HOME</code>:</p> compose.yml - Secci\u00f3n de secretos<pre><code># archivo 'compose.yml'\nsecrets:\n  secreto-servicio:\n    file: $HOME/secreto-archivo.txt \n</code></pre> <p>Secretos externos</p> <p>Algunas implementaciones del comando Compose no admiten la especificaci\u00f3n de secretos externos.</p>"},{"location":"contenedores/secretos/#asignacion","title":"Asignaci\u00f3n","text":"<p>S\u00f3lo aquellos contenedores a los que se les d\u00e9 acceso expl\u00edcito a los secretos podr\u00e1n leer los datos guardados en ellos. El acceso a los secretos se asigna mediante listas con el campo <code>secrets</code>:</p> compose.yml - Asignaci\u00f3n de secretos<pre><code># archivo 'compose.yml'\nservices:\n\n  servicio:\n    build: .\n    secrets:\n      - secreto-servicio\n\nsecrets:\n  secreto-servicio:\n    file: ./secreto-archivo.txt\n</code></pre>"},{"location":"contenedores/secretos/#ruta-interna","title":"Ruta interna","text":"<p>Los secretos se montan como archivos que el contenedor encontrar\u00e1 dentro de la ruta <code>/run/secrets</code>. El contenedor necesita conocer de antemano el nombre o ruta del secreto para poder leerlo. Esto se soluciona en muchas im\u00e1genes creando una variable de entorno a la cual se le asigna la ruta del secreto:</p> compose.yml - Ruta en variables de entorno<pre><code># archivo 'compose.yml'\nservices:\n\n  servicio:\n    build: .\n    environment:\n      RUTA_SECRETO: /run/secrets/secreto-servicio\n    secrets:\n      - secreto-servicio\n\nsecrets:\n  secreto-servicio:\n    file: ./secreto-archivo.txt\n</code></pre>"},{"location":"contenedores/secretos/#lectura","title":"Lectura","text":"<p>Los programas de Python que tengan un secreto montado podr\u00e1n leer sus archivos  como lo hacen con cualquier archivo normal.</p> Secretos - Lectura en Python<pre><code>ruta_secreto = \"/run/secrets/secreto-servicio\"\n\nwith open(ruta_secreto, \"r\",encoding=\"utf-8\") as archivo:\n    data = archivo.read()\n    logging.info(\"Valor le\u00eddo: '%s'\", data)\n</code></pre> <p>Es una pr\u00e1ctica habitual indicar la ruta a dicho secreto mediante una variable de entorno:</p> Secretos - Lectura en Python (ruta en variable de entorno)<pre><code>import os\n\nruta_secreto = os.getenv(\"RUTA_SECRETO\")\n\nwith open(ruta_secreto, \"r\",encoding=\"utf-8\") as archivo:\n    data = archivo.read()\n    logging.info(\"Valor le\u00eddo: '%s'\", data)\n</code></pre>"},{"location":"contenedores/secretos/#ejemplo","title":"Ejemplo","text":"<p>Se crea un demo sencillo que lee un secreto guardado en archivo TXT y lo muestra en la ventana de logs.</p> Demo secretos - \u00e1rbol de archivos<pre><code>.\n\u251c\u2500\u2500 compose.yml\n\u251c\u2500\u2500 demo\n\u2502   \u2514\u2500\u2500 main.py\n\u251c\u2500\u2500 Dockerfile\n\u2514\u2500\u2500 secreto-archivo.t\n</code></pre> Demo secretos - rutina en Python<pre><code>import logging\nimport os\n\nlogging.basicConfig(\n    level=logging.INFO, # m\u00ednimo nivel de log a publicar\n    format=\"%(message)s\", #info incorporada\n    )\n\nruta_secreto = os.getenv(\"RUTA_SECRETO\")\n\nlogging.info(\"Secretos - desde archivo\")\nlogging.info(\"Ruta interna: '%s'\", ruta_secreto)\n\nwith open(ruta_secreto, \"r\",encoding=\"utf-8\") as archivo:\n    data = archivo.read()\n    logging.info(\"Valor le\u00eddo: '%s'\", data)\n\nlogging.info(\"Finalizado\")\n</code></pre> Demo secretos - Dockerfile<pre><code># imagen de referencia\nFROM python:alpine\n\n# directorio de trabajo (se crea autom\u00e1ticamente)\nWORKDIR /code\n\n# copia de rutinas al directorio de trabajo\nCOPY demo/ ./\n\n# comandos \nCMD [\"python\", \"main.py\"]\n</code></pre> Demo secretos - compose.yml<pre><code>name: demo_secretos\n\nservices:\n\n  secreto:\n    build: .\n    image: demo_secretos\n    environment:\n      RUTA_SECRETO: /run/secrets/secreto-servicio\n    secrets:\n      - secreto-servicio\n\n\nsecrets:\n  secreto-servicio:\n    file: ./secreto-archivo.tx\n</code></pre> <p>El valor secreto elegido como ejemplo es:</p> Demo secretos - secreto-archivo.txt<pre><code>(No se lo digas a nadie)\n</code></pre>"},{"location":"contenedores/secretos/#referencias","title":"Referencias","text":"<p>DockerHub - Manage secrets securely in Docker Compose</p>"},{"location":"contenedores/volumenes/","title":"Volumenes","text":"<p>Los volumenes son almacenamientos persistentes ubicados en el sistema anfitri\u00f3n a los cuales los contenedores tienen acceso. Son necesarios para prevenir la p\u00e9rdida de los datos internos de los contenedores cada vez que \u00e9stos son borrados o recreados.</p> <p>Algunos usos habituales:</p> <ul> <li>bases de datos;</li> <li>archivos de los usuarios;</li> <li>reportes de funcionamiento;</li> <li>etc.</li> </ul>"},{"location":"contenedores/volumenes/#introduccion","title":"Introducci\u00f3n","text":"<p>Las rutas internas de los contenedores est\u00e1n aisladas del sistema anfitri\u00f3n. Asimismo los contenedores son incapaces de interactuar con los directorios y archivos del sistema anfitri\u00f3n. host directamente.</p> <p>El gestor de contenedores crea los volumenes en una ruta permitida del anfitri\u00f3n. Luego crea un \"punto de montaje\" (una equivalencia) entre las rutas internas de los contenedores y las rutas internas de los volumenes.</p> <pre><code>---\ntitle: \"Volumenes - Idea general\"\n---\nflowchart LR\n\n    subgraph proyecto [Entorno proyecto]\n        subgraph services [Servicios]\n            subgraph c1 [\"`Contenedor 1`\"]\n            r1[\"/ruta_1\"]\n            r2[\"/ruta_2\"] \n            end\n            subgraph c2 [\"`Contenedor 2`\"]\n            r3[\"/ruta_3\"]\n            end\n        end\n    end\n\n    subgraph host [Host]\n        subgraph volumenes [Volumenes]\n            vol1[\"`Volumen 1\n            ruta_A`\"]\n            vol2[\"`Volumen 2\n            ruta_B`\"]\n            vol3[\"`Volumen 3\n            ruta_C`\"]\n\n        end\n    end\n\n    vol1 o-.-o|montaje| r1\n    vol2 o-.-o|montaje| r2\n    vol3 o-.-o|montaje| r3</code></pre> <p>De esta manera los contenedores tienen acceso limitado al sistema de archivos del anfitri\u00f3n a trav\u00e9s de los volumenes. Si los contenedores son eliminados los volumenes y sus contenidos siguen existiendo y pueden ser reutilizados, migrados, etc.</p>"},{"location":"contenedores/volumenes/#asignacion-de-volumenes","title":"Asignaci\u00f3n de volumenes","text":"<p>El acceso de los contenedores a los volumenes se indica  mediante el campo <code>volumes</code> del archivo <code>compose.yml</code>. Un mismo proyecto permite definir m\u00faltiples volumenes; adem\u00e1s un mismo contenedor puede acceder a varios volumenes simult\u00e1neamente.</p> <p>Hay varias variantes de volumenes que pueden ser creados, las cuales se muestran a continuaci\u00f3n.</p>"},{"location":"contenedores/volumenes/#volumenes-anonimos","title":"Volumenes an\u00f3nimos","text":"<p>Los volumenes an\u00f3nimos se crean asignando un \u00fanico valor que corresponde a la ruta interna del contenedor:</p> compose.yml - volumenes an\u00f3nimos<pre><code>name: nombre_proyecto\n\nservices:\n\n  servicio_volumen:\n    build: .\n    # lista de rutas internas\n    volumes:\n      - ruta_contenedor\n</code></pre> <p>En este caso el programa gestor de los contenedores crea un volumen y le reserva al contenedor un directorio para guardar los datos persistentes.</p> <p>Si el despliegue se realiza en sistemas GNU/Linux entonces los vo\u00famenes se suelen alojar en la ruta <code>/home/USUARIO/.local/share/containers/storage/volumes/</code></p> <p>Al volumen an\u00f3nimo se le asigna un nombre aleatorio de manera autom\u00e1tica. Este tipo de volumenes  es pr\u00e1ctico para datos  que no requieran ser transferidos ni preservados por mucho tiempo: cach\u00e9s, algunos archivos de configuraci\u00f3n, etc.</p>"},{"location":"contenedores/volumenes/#volumenes-con-nombre","title":"Volumenes con nombre","text":"<p>Los volumenes con nombre son similares a los volumenes an\u00f3nimos. En este caso a cada ruta interna del contenedor se le asigna un nombre que funciona como un alias.</p> compose.yml - volumenes con nombre<pre><code>name: nombre_proyecto\n\nservices:\n\n  servicio_volumen:\n    build: .\n    # lista de volumenes accedidos\n    volumes:\n      # montajes (equivalencias)\n      - nombre_volumen:/root/logs\n\n\n# lista de volumenes implementados\nvolumes:\n  nombre_volumen:\n</code></pre> <p>El nombre asignado al volumen  suele estar compuesto por el nombre del proyecto y el alias definido para el volumen. Por ejemplo en este caso el volumen se llamar\u00eda <code>nombre_proyecto_alias_volumen</code>.</p> <p>Este tipo de volumenes puede ser accedido por m\u00faltiples contenedores mediante su alias. Si el volumen requerido proviene de otro proyecto entonces hace falta especificar el par\u00e1metro <code>external</code> como <code>true</code>:</p> compose.yml - volumenes externos<pre><code># lista de volumenes implementados\nvolumes:\n  nombre_volumen:\n    external: true\n    name: nombre_completo_volumen\n</code></pre> <p>Los volumenes con nombre son una buena opci\u00f3n para datos que necesiten ser preservados y posiblemente transferidos a otras plataformas: bases de datos de producci\u00f3n, publicaciones de usuarios (ej: entradas de WordPress), etc. pero que no necesiten ser manipulados frecuentemente por desarrolladores ni administradores.</p>"},{"location":"contenedores/volumenes/#volumenes-de-host","title":"Volumenes de host","text":"<p>En este tipo de asignaci\u00f3n no se crea un elemento de volumen sino que se monta una ruta del sistema anfitri\u00f3n  (el host) a la ruta de inter\u00e9s del contenedor.</p> compose.yml - volumenes de host<pre><code>services:\n\n  servicio_volumen:\n    build: .\n    # lista de volumenes accedidos\n    volumes:\n      # montajes (equivalencias)\n      -  ruta_host:ruta_contenedor\n    # opciones de seguridad\n    security_opt: \n      - label=disable\n</code></pre> <p>Si la ruta indicada en el sistema host no existe entonces se crear\u00e1 autom\u00e1ticamente.</p> <p>Este tipo de volumenes es pr\u00e1ctico para darle un acceso inmediato de los archivos  a desarrolladores y administradores del proyecto.</p> <p>Read only</p> <p>Los volumenes admiten el montaje en el modo de s\u00f3lo lectura (read only). Esto se realiza agregando <code>:ro</code> detra\u015b de los mapeos como se muestra:</p> compose.yml - read only<pre><code>services:\n\n  servicio_volumen:\n    build: .\n    volumes:\n      -  ruta_host:ruta_contenedor:ro\n    security_opt: \n      - label=disable\n</code></pre> <p>Security Options</p> <p>El atributo <code>security_opt</code> es opcional en Docker pero es indispensable en Podman para otorgar y configurar los permisos de acceso a los recursos del host por parte del contenedor. Haciendo <code>label=disable</code> se libera el acceso al contenedor de los recursos del usuario actual del sistema pero no se da acceso a los recursos que requieran permisos de administrador.</p>"},{"location":"contenedores/volumenes/#root","title":"root","text":""},{"location":"contenedores/volumenes/#usuario-root","title":"Usuario root","text":"<p>En los contenedores que corren im\u00e1genes basadas en Linux el usuario predeterminado es el usuario <code>root</code> (\"raiz\"), que es el usuario administrador del sistema. Su carpeta de usuario se encuentra en la carpeta <code>/root</code>, en contraposici\u00f3n a los usuarios comunes, que tienen sus archivos de usuario dentro de la carpeta <code>/home</code>.</p>"},{"location":"contenedores/volumenes/#permisos-de-root","title":"Permisos de root","text":"<p>Docker hace funcionar a los contenedores con plenos permisos de administrador. Por este motivo en Docker el usuario <code>root</code> de cada contenedor posee todos los permisos de administrador por default. Esto puede implicar un riesgo de seguridad, la llamada \"escalada de permisos\", si a los contenedores se les da un acceso demasiado permisivo a los recursos del sistema anfitri\u00f3n.</p> <p>Esto es diferente en Podman, el cual funciona en modo rootless (sin permisos de superusuario) por default y por tanto el usuario root de cada contenedor no tiene dichos permisos especiales a menos que se inicie Podman en modo rootful deliberadamente.</p>"},{"location":"contenedores/volumenes/#ejemplo-demo","title":"Ejemplo demo","text":"<p>En este demo se adapta la rutina del contador pero en este caso los logs salen por consola y por archivo en simult\u00e1neo. El archivo es creado  con el nombre <code>reporte.log</code> y los reportes son acumulativos.</p> demo contar contar.py<pre><code>from time import sleep\nfrom pathlib import Path\nimport sys\nimport logging\n\n# ruta al reporte (en contenedor) : /root/logs/reporte.log\nruta_log = Path( \"~/logs/reporte.log\").expanduser()\n\nlogging.basicConfig(\n    level=logging.INFO, # m\u00ednimo nivel de log a publicar\n    format=\"%(asctime)s - %(levelname)s - %(message)s\", #info incorporada\n    handlers=[\n        # salida por consola\n        logging.StreamHandler(), \n        # salida por archivo\n        logging.FileHandler(\n            filename=ruta_log,\n            mode=\"a\",\n            encoding=\"utf-8\",\n            delay=True,\n            ),\n        ],\n    )\n\ntry:\n    # el numero maximo a contar se asigna como argumento\n    n = int(sys.argv[1])\n    logging.info(\"Contando hasta %i\", n)\n\nexcept Exception:\n    # valor m\u00e1ximo por default en caso de error\n    logging.warning(\"Argumento de entrada faltante o incorrecto (debe ser un entero)\")\n    n = 10\n    logging.warning(\"Contando hasta %i (valor default)\", n)\n\nfinally:\n    # el contador se incrementa cada 1 segundo\n    i = 0\n    while i &lt;= n:\n        logging.info(\"i: %4i\",i)\n        sleep(1)\n        i += 1\n</code></pre> Dockerfile<pre><code># imagen de referencia\nFROM python:alpine\n\n# directorio de trabajo (se crea autom\u00e1ticamente)\nWORKDIR /code\n\n# copia de rutinas al directorio de trabajo\nCOPY demo/ ./\n\n# comando, opciones y argumentos fijos\nENTRYPOINT [\"python\", \"contar.py\"]\n\n# opciones y argumentos sobreescribibles\nCMD [\"4\"]\n</code></pre> <p>A continuaci\u00f3n se muestran varias implementaciones alternativas de la gesti\u00f3n de volumenes:</p> Volumen an\u00f3nimoVolumen con nombreVolumen de host Arbol de archivos<pre><code>.\n\u251c\u2500\u2500 compose.yml\n\u251c\u2500\u2500 Dockerfile\n\u2514\u2500\u2500 demo\n    \u2514\u2500\u2500 contar.py\n</code></pre> compose.yml<pre><code>name: demo_volumen\n\nservices:\n\n  servicio_volumen:\n    build: .\n    volumes:\n      - /root/logs\n</code></pre> Arbol de archivos<pre><code>.\n\u251c\u2500\u2500 compose.yml\n\u251c\u2500\u2500 Dockerfile\n\u2514\u2500\u2500 demo\n    \u2514\u2500\u2500 contar.py\n</code></pre> compose.yml<pre><code>name: demo_volumen\n\nservices:\n\n  servicio_volumen:\n    build: .\n    volumes:\n      - registro_persistente:/root/logs\n\n\nvolumes:\n  registro_persistente:\n</code></pre> Arbol de archivos<pre><code>.\n\u251c\u2500\u2500 compose.yml\n\u251c\u2500\u2500 Dockerfile\n\u251c\u2500\u2500 demo\n\u2502   \u2514\u2500\u2500 contar.py\n\u2514\u2500\u2500 registro\n    \u2514\u2500\u2500 reporte.log\n</code></pre> compose.yml<pre><code>name: demo_volumen\n\nservices:\n\n  servicio_volumen:\n    build: .\n    volumes:\n      - ./registro:/root/logs\n    security_opt: \n      - label=disable\n</code></pre>"},{"location":"contenedores/volumenes/#manejo-manual","title":"Manejo manual","text":""},{"location":"contenedores/volumenes/#listar-e-inspeccionar","title":"Listar e inspeccionar","text":"<p>La lista de volumenes existentes se consulta con el comando <code>volume list</code>:</p> Volumenes - Listado<pre><code>podman volume list\n</code></pre> <p>Los par\u00e1metros del volumen de inter\u00e9s se consultan con el comando <code>volume inspect</code>:</p> Volumenes - Inspecci\u00f3n<pre><code>podman volume inspect NOMBRE_VOLUMEN \n</code></pre> <p>La ruta al contenido del volumen se indica dentro del campo <code>Mountpoint</code>. Su valor se puede consultar as\u00ed:</p> Volumenes - Ubicaci\u00f3n<pre><code>podman volume inspect NOMBRE_VOLUMEN --format='{{.Mountpoint}}'\n</code></pre> <p>Accediendo a esta ruta se podr\u00e1 acceder a los datos para realizar copias de seguridad, restablecer los datos, realizar una migraci\u00f3n de plataforma, etc.</p> <p>Gesti\u00f3n gr\u00e1fica</p> <p>Las aplicaciones de escritorio de Docker y de Podman permiten visualizar y administrar los volumenes existentes de manera gr\u00e1fica.</p>"},{"location":"contenedores/volumenes/#creacion","title":"Creaci\u00f3n","text":"<p>Los volumenes se pueden crear deliberadamente con el comando <code>create</code>:</p> <p>Volumenes - Creaci\u00f3n (con nombre)<pre><code>podman volume create  NOMBRE_VOLUMEN\n</code></pre> El nombre asignado servir\u00e1 para poder ser accedido desde los contenedores como volumen externo:</p> compose.yml - volumen externo<pre><code>services:\n\n  volumen_nombre:\n    build: .\n    volumes:\n      - NOMBRE_VOLUMEN:/root/logs\n\n\nvolumes:\n  NOMBRE_VOLUMEN:\n    external: true \n</code></pre>"},{"location":"contenedores/volumenes/#borrado","title":"Borrado","text":"<p>A los volumenes  y a su contenido se los borra uno a uno con el comando <code>remove</code>:</p> Volumenes - Borrado<pre><code>podman volume remove NOMBRE_VOLUMEN\n</code></pre> <p>Borrar no usados</p> <p>Los volumenes no utilizados por ning\u00fan contenedor se pueden borrar en masa autom\u00e1t\u00edcamente con el comando <code>prune</code> (\"podar\"):</p> Volumenes - Borrado (no utilizados)<pre><code>podman volume prune\n</code></pre> <p>Esta opci\u00f3n debe usarse con mucho cuidado, dado que puede haber volumenes con datos de producci\u00f3n que est\u00e9n hu\u00e9rfanos al momento de ejecutar este comando.</p>"},{"location":"contenedores/images/","title":"Im\u00e1genes para contenedores","text":"<p>En esta secci\u00f3n se repasan algunas im\u00e1genes \u00fatiles y sus par\u00e1metros m\u00e1s importantes.</p>"},{"location":"contenedores/images/#contenidos","title":"Contenidos","text":"<p>{{ pagetree(siblings)}}</p>"},{"location":"contenedores/images/bases_datos/","title":"Contenedores de bases de datos","text":""},{"location":"contenedores/images/bases_datos/#urls","title":"URLs","text":"<p>Los contenedores  de bases de datos mostrados a continuaci\u00f3n normalmente aceptan peticiones mediante URLs que cumplan con el siguiente formato: </p> URLs t\u00edpicas<pre><code>DATABASE_URL=\"mysql://USER:PASSWORD@NOMBRE_SERVICIO:PUERTO/NOMBRE_DATABASE\"\n</code></pre> <p>Data sensible</p> <p>N\u00f3tese que usuarios y contrase\u00f1as de las bases de datos quedan expuestos como parte de la URL, por tal motivo es vital limitar el acceso a las bases de datos mediante el uso de networks a medida. Tambi\u00e9n debe tenerse cuidado de no registrar las URLs peticionadas mediante los logs de los programas clientes.</p>"},{"location":"contenedores/images/bases_datos/#bases-sql","title":"Bases SQL","text":"<p>Las bases de datos SQL son bases de datos relacionales, las cuales guardan los datos en forma de tablas.</p> <p>A continuaci\u00f3n se resumen los par\u00e1metros para los sistemas de administraci\u00f3n (RDBMS) m\u00e1s habituales.</p> MySQLMariaDBPostgreSQL Par\u00e1metro Valor Conexi\u00f3n puerto escucha <code>3306</code> protocolo URL <code>mysql://</code> Volumenes ruta de datos <code>/var/lib/mysql</code> ruta de configuraci\u00f3n <code>/etc/mysql/conf.d</code> Variables entorno user <code>MYSQL_USER</code> pass <code>MYSQL_PASSWORD</code> database <code>MYSQL_DATABASE</code> pass (root) <code>MYSQL_ROOT_PASSWORD</code> Secretos user <code>MYSQL_USER_FILE</code> pass <code>MYSQL_PASSWORD_FILE</code> database <code>MYSQL_DATABASE_FILE</code> pass (root) <code>MYSQL_ROOT_PASSWORD_FILE</code> <p>Documentaci\u00f3n oficial: Docker Hub - MySQL</p> Par\u00e1metro Valor Conexi\u00f3n puerto escucha <code>3306</code> protocolo URL <code>mariadb://</code> Volumenes ruta de datos <code>/var/lib/mysql</code> ruta de backup <code>/backup</code> ruta de configuraci\u00f3n <code>/etc/mysql/conf.d</code> Variables entorno user <code>MARIADB_USER</code> pass <code>MARIADB_PASSWORD</code> database <code>MARIADB_DATABASE</code> pass (root) <code>MARIADB_ROOT_PASSWORD</code> Secretos user <code>MARIADB_USER_FILE</code> pass <code>MARIADB_PASSWORD_FILE</code> database <code>MARIADB_DATABASE_FILE</code> pass (root) <code>MARIADB_ROOT_PASSWORD_FILE</code> <p>Documentaci\u00f3n oficial: Docker Hub - MariaDB</p> Par\u00e1metro Valor Conexi\u00f3n puerto escucha <code>5432</code> protocolo URL <code>postgresql://</code> Volumenes ruta de datos <code>/var/lib/postgresql/data</code> ruta de configuraci\u00f3n <code>/etc/postgresql/postgresql.conf</code> Variables entorno user <code>POSTGRES_USER</code> pass <code>POSTGRES_PASSWORD</code> database <code>POSTGRES_DB</code> Secretos user <code>POSTGRES_USER_FILE</code> pass <code>POSTGRES_PASSWORD_FILE</code> database <code>POSTGRES_DB_FILE</code> <p>Documentaci\u00f3n oficial: Docker Hub - PostgreSQL</p>"},{"location":"contenedores/images/bases_datos/#ejemplo-de-uso","title":"Ejemplo de uso","text":"<p>Los tres gestores de bases de datos SQL explicadas se manejan de manera muy similar en el entorno de los contenedores. Se adjunta un ejemplo de uso b\u00e1sico con una imagen PostgreSQL:</p> SQL - compose.yml (PostgreSQL)<pre><code>services:\n  db-postgres:\n    restart: always\n    image: postgres:17.2-bookworm     \n    ports:\n      - ${PUERTO_DB:-5432}:5432\n    volumes:\n      - volumen_db:/var/lib/postgresql/data\n    environment:\n      POSTGRES_USER:     ${USUARIO}\n      POSTGRES_DB:       ${NOMBRE_DB}\n      POSTGRES_PASSWORD_FILE: /run/secrets/secreto_db\n    secrets:\n      - secreto_db\n\nvolumes:\n  volumen_db:\n\nsecrets:\n  secreto_db:\n    file: ./secreto.txt    \n</code></pre>"},{"location":"contenedores/images/bases_datos/#no-sql","title":"No SQL","text":"<p>Las bases de datos no relacionales t\u00edpicamente guardan los datos en forma de diccionarios (pares clave-valor).</p>"},{"location":"contenedores/images/bases_datos/#mongodb","title":"MongoDB","text":"Par\u00e1metro Valor Conexi\u00f3n puerto escucha <code>27017</code> protocolo URL <code>mongodb://</code> Volumenes ruta de datos <code>/data/db</code> Variables entorno user (root) <code>MONGO_INITDB_ROOT_USERNAME</code> pass (root) <code>MONGO_INITDB_ROOT_PASSWORD</code> database <code>MONGO_INITDB_DATABASE</code> Secretos user (root) <code>MONGO_INITDB_ROOT_USERNAME_FILE</code> pass (root) <code>MONGO_INITDB_ROOT_PASSWORD_FILE</code> <p>Documentaci\u00f3n oficial: Docker Hub - MongoDB</p>"},{"location":"contenedores/images/bases_datos/#redis","title":"Redis","text":"<p>Redis es un motor de bases de datos que almacena la informaci\u00f3n en memoria RAM, aunque puede usarse como base de datos persistente.</p> Par\u00e1metro Valor Conexi\u00f3n puerto escucha <code>6379</code> protocolo URL <code>redis://</code> Volumenes ruta de datos <code>/data</code> ruta de configuraci\u00f3n <code>/usr/local/etc/redis</code> <p>Documentaci\u00f3n oficial: Docker Hub - Redis</p>"},{"location":"contenedores/images/bases_datos/#healthchecks","title":"Healthchecks","text":"<p>En el repositorio HEALTHCHEK de Docker Library se proponen algunos tests gen\u00e9ricos para comprobar el funcionamiento correcto de algunas bases de datos habituales.</p>"},{"location":"contenido/2-variables_asignaciones/","title":"Variables y Asignaciones","text":"","tags":["Funciones","Operadores","Tipos","Variables"]},{"location":"contenido/2-variables_asignaciones/#tipos-de-variables","title":"Tipos de Variables","text":"<p>Las variables se crean al asignarles valor. Hay cuatro grandes tipos de variables:</p> Funci\u00f3n Uso <code>int</code> N\u00fameros enteros. <code>float</code> N\u00fameros flotantes. La parte decimal se indica con un punto. <code>string</code> 'Cadena de caracteres': secuencias de caracteres alfanum\u00e9ricos, lo m\u00e1s cercano al formato texto simple. <code>bool</code> Valores l\u00f3gicos booleanos. Dos opciones: <code>True</code> y <code>False</code>. <p>No hay valor l\u00edmite para las  variables num\u00e9ricas. Python distingue entre may\u00fasculas y min\u00fasculas a la hora de definir variables. </p> <p>Es convenci\u00f3n en Python que todas  las letras en los nombres de variables sean enteramente en min\u00fasculas y si est\u00e1n formados por varias palabras \u00e9stas se unan mediante guiones bajos (<code>_</code>). Pueden a\u00f1adirse n\u00fameros en los nombres pero no al comienzo.</p> <p>Tipado din\u00e1mico</p> <p>Python tiene tipado din\u00e1mico:  las variables pueden cambiar de tipo durante la ejecuci\u00f3n, por ejemplo de <code>int</code> a <code>string</code>, de <code>string</code> a <code>float</code>, etc. a medida que se guardan nuevos valores.</p> <p>funci\u00f3n <code>type()</code></p> <p>El tipo de datos de una variable puede averiguarse con la funci\u00f3n <code>type()</code>.</p> Funci\u00f3n type()<pre><code>type(16)      # 'int'\ntype(1.27)    # 'float'\ntype(\"hola\")    # 'str'\n</code></pre> <p>Tip: n\u00fameros complejos</p> <p>Python incluye la posibilidad de trabajar con n\u00fameros complejos indicados como:  Formato<pre><code>complejo = real + imag j \n</code></pre> , donde tanto la parte real como la imaginaria pueden ser tanto <code>int</code> como <code>float</code>. (Aunque t\u00e9cnicamente los complejos en Python son una clase predefinida) Ejemplo<pre><code>n = 3 + 4j \n</code></pre></p>","tags":["Funciones","Operadores","Tipos","Variables"]},{"location":"contenido/2-variables_asignaciones/#asignaciones","title":"Asignaciones","text":"<p>Las asignaciones se realizan con el operador <code>=</code>:</p> Asignacion<pre><code>nombre_variable = valor\n</code></pre> <p>No hay car\u00e1cter de fin de instrucci\u00f3n visible, sino que se interpreta como tal el fin de rengl\u00f3n.</p> <p>Los espacios en blanco a ambos lados del signo <code>=</code> son buena pr\u00e1ctica en este lenguaje. Vienen dados por convenci\u00f3n.</p> Ejemplos: asignaciones<pre><code>entero = 16      \nflotante = 1.27\nmensaje = \u201cHola mundo\u201d   #(tambi\u00e9n pueden usarse comillas simples)\n</code></pre> <p>Tip: asignacion multiple</p> <p>Se puede crear y asignar valor a m\u00faltiples variables en un solo rengl\u00f3n.  <pre><code>A, B, C = 1.6, 1 , \u201cHola mundo\u201d\nA, *otros, ultimo = 1.6, 1 , \u201cHola mundo\u201d, 14 , 8.9 , \u201cchanchito\u201d  \n#ver \u201cdesempaquetado de listas\u201d\n</code></pre> Tambien se puede asignar el mismo valor a varias variables en simult\u00e1neo: <pre><code>A = B = C = 7\n</code></pre></p>","tags":["Funciones","Operadores","Tipos","Variables"]},{"location":"contenido/2-variables_asignaciones/#indexacion-de-strings","title":"Indexaci\u00f3n de strings","text":"<p>En Python el primer valor de las cadenas de caracteres es el cero.  Para conocer la longitud de los string se usa la funci\u00f3n <code>len()</code>:</p> <p>Longitud de strings<pre><code>longitud = len(texto)\n</code></pre> Si la longitud del vector es n entonces su \u00faltimo elemento ser\u00e1 el n\u00famero (n-1). Para acceder a un elemento puntual se utiliza los corchetes ( <code>[]</code> ):</p> indice<pre><code>letra = texto[indice]\n</code></pre> <p>Si el indice cae afuera del string (indice &gt; n-1 )el programa da error de memoria y cancela la ejecuci\u00f3n. Sin embargo, en Python se tolera el uso de \u00edndices negativos mientras el m\u00f3dulo del \u00edndice sea menor a a la longitud de la cadena.</p> Ejemplo: indice fuera de rango<pre><code>texto = \"Hola mundo\"\nn= len(texto)         # n = 10 (diez letras)\n\nletra = texto[ 0]      # letra 'H'  \nletra = texto[ 9]      # letra 'o'  \nletra = texto[10]     # Error: fuera de rango \n\nletra = texto[-10]    # letra 'H' \nletra = texto[-11]    # Error: fuera de rango \n</code></pre> <p>Tip: indices y listas</p> <p>Este manejo de \u00edndices tambi\u00e9n se usa en los 'vectores' de Python, que son llamados 'listas' (o 'list'). Ver listas de Python.</p>","tags":["Funciones","Operadores","Tipos","Variables"]},{"location":"contenido/2-variables_asignaciones/#rebanado-slicing","title":"Rebanado (Slicing)","text":"<p>El rebanado consiste en seleccionar una parte del vector o string en base a \u00edndices num\u00e9ricos. Algunas formas de usar el rebanado son:</p> Rebanado<pre><code>vector[ inicio : ]  # copia desde el \u00edndice inicial hasta el final;\nvector[ : final ]   # copia desde el elemento cero hasta (final-1 );\nvector[ inicio : final ] #copia desde indice inicial hasta (final-1) ;\nvector[ inicio : final : paso ] #copia entre valores de \u00edndices pero salteando elementos definidos por 'paso' (valor de incremento);\nvector[ : ]     # copia todo;\n</code></pre> <p>Para invertir el orden de un vector se puede hacer:</p> Inversion de vector<pre><code>vector[:: -1]     # copia todo, incremento -1 --&gt; inversion del vector\n</code></pre>","tags":["Funciones","Operadores","Tipos","Variables"]},{"location":"contenido/2-variables_asignaciones/#conversion-de-variables","title":"Conversion de variables","text":"<p>A veces es necesario convertir los valores de una variable a un tipo de variable distinto. Otras veces se necesita asegurar que el tipo de variable es el requerido para una aplicaci\u00f3n y no otro. Para estos casos existen funciones en Python encargadas de la conversion de variables, estas son:</p> Funci\u00f3n Uso <code>str( )</code> Convierte a texto <code>int( )</code> Convierte a entero <code>float( )</code> Convierte a flotante <code>bool( )</code> Convierte a valor l\u00f3gico (booleano) <p>Las funciones son rutinas reutilizables con nombre, las cuales se usan as\u00ed: Uso funciones<pre><code>variable_salida = nombre_funcion( variable_entrada )\n</code></pre></p> Ejemplos: conversion de tipo<pre><code>pi = 3.1416   # numero flotante ('float')\n\ntexto = str( pi )     # '3.1416'\nentero = int(pi)      # '3'\nflotante = float(texto)       # '3.1416'\n</code></pre> <p>Las conversiones de un tipo a otro no siempre dan resultados evidentes. Como ejemplo, se muestra el resultado de convertir a valores l\u00f3gicos v\u00eda la funcion <code>bool()</code>:</p> <p>Conversi\u00f3n a booleanos<pre><code># entrada: enteros\nprint( bool( 2) )  # True\nprint( bool( 1) )  # True\nprint( bool( 0) )  # False\nprint( bool(-1) )  # True\n\n# entrada: caracteres y texto\nprint( bool(\"\")  )  # False\nprint( bool(\" \") )  # False\nprint( bool(\"a\") )  # True\n\n# entrada: flotantes\nprint(  bool(3.14) ) # True\nprint(  bool(0.0)  ) # False\n</code></pre> Hay que tener en cuenta que no todas las conversiones pueden realizarse, pudiendo dar lugar a la interrupci\u00f3n del programa. A continuacion se muestran algunos ejemplos: <pre><code># Ejemplo N\u00ba1\nentero = int( \"10\" )    # uso correcto\nentero = int( \"hola\" )  # ERROR: \u00bfqu\u00e9 numero equivale a \"hola\"?\n\n# Ejemplo N\u00ba2\nentero = int('3.1416')   # ERROR: se necesita pasar a flotante primero\nentero = int(float('3.1416'))   # correcto\n</code></pre></p>","tags":["Funciones","Operadores","Tipos","Variables"]},{"location":"contenido/2-variables_asignaciones/#tipado-de-variables","title":"Tipado de variables","text":"<p>Python permite 'tipar' (preasignar un tipo) a las variables. Esto permitir\u00e1 que el int\u00e9rprete pueda detectar inconsistencias al asignar valores a las variables.</p> <p>La forma de tipar los datos es usando los dos puntos y el nombre del tipo de datos. </p> <p>Formato: Tipado de variables<pre><code>entero   :  int\nflotante :  float\ntexto    :  str\nlogica   :  bool\n</code></pre></p> <p>Reducci\u00f3n de bugs por tipado</p> <p>El tipado manual en Python es suave: no impedir\u00e1 la ejecuci\u00f3n del programa ni tampoco la abortar\u00e1 al llegar a las asignaciones de valor no compatibles por tipos. En cambio \u00e9stas asignaciones ser\u00e1n remarcadas por el entorno de desarrollo, permitiendo que el desarrollador corrija el c\u00f3digo de ser necesario durante su escritura y ayudando a prevenir bugs (errores durante la ejecuci\u00f3n del programa) los cuales pueden ser dif\u00edciles de identificar sin el uso del tipado.</p> <p>Ejemplo aplicado: indexado de un string</p> <p><pre><code>indice: int             # tipado \ntexto = \"A la grande le puse Cuca\"\n\nindice = 10             # asignacion correcta\nletra = texto[indice]   # indexado correcto --&gt; letra 'e'\n\nindice = \"Simon\"        # tipo incorrecto --&gt; el int\u00e9rprete marca el error\nletra = texto[indice]   # fallo de programa\n</code></pre> N\u00f3tese como el tipado de la variable indice ayuda a prever el fallo de programa al asignarle un texto como valor, mas no impide su ejecuci\u00f3n </p>","tags":["Funciones","Operadores","Tipos","Variables"]},{"location":"contenido/2-variables_asignaciones/#metodos","title":"M\u00e9todos","text":"<p>Los m\u00e9todos son operaciones comunes que afectan a las variables. Son similares a las funciones  pero est\u00e1n dedicados a los elementos. Los m\u00e9todos se utilizan as\u00ed: Uso de m\u00e9todos<pre><code>nombre_variable.nombre_metodo(argumento_1, argumento_2, ...)\n</code></pre> donde los argumentos son valores de entrada que el m\u00e9todo utiliza para procesar y dar su resultado. Los argumentos pueden ser opcionales \u00fa obligatorios, dependiendo de cada m\u00e9todo y de la informacion que da cada argumento.</p> <p>Cada tipo de variable tiene sus propios m\u00e9todos predefinidos. En particular, las variables de tipo string tienen muchos m\u00e9todos dedicados para manejarlas. Algunos de sus m\u00e9todos m\u00e1s usados son:</p> M\u00e9todo (string) Uso <code>find( seq )</code> Indica la primera ubicacion de la secuencia indicada <code>replace( seq1, seq2 )</code> Reemplaza una secuencia por otra. <code>title()</code> Formatea como t\u00edtulo. <code>index()</code> Indica posici\u00f3n de  comienzo de la secuencia buscada. <code>isalnum()</code> Verifica si solo hay valores numericos (devuelve <code>True</code> o <code>False</code>). <code>isalpha()</code> Verifica si solo hay letras (devuelve <code>True</code> o <code>False</code>). <code>isdecimal()</code> Verifica si solo hay decimales (devuelve <code>True</code> o <code>False</code>). <code>isdig()</code> Verifica si solo hay d\u00edgitos (devuelve <code>True</code> o <code>False</code>). <code>islower()</code> Verifica si solo hay min\u00fasculas (devuelve <code>True</code> o <code>False</code>). <code>isupper()</code> Verifica si solo hay may\u00fasculas (devuelve <code>True</code> o <code>False</code>). <code>capitalize()</code> Devuelve el texto con primera letra  may\u00fascula y lo dem\u00e1s en minusculas. <code>lower()</code> Devuelve el texto en min\u00fasculas. <code>upper()</code> Devuelve el texto en may\u00fasculas. <code>strip()</code> Elimina del texto espacios en blanco a derecha y a izquierda. <code>lstrip()</code> Elimina del texto espacios en blanco a izquierda. <code>rstrip()</code> Elimina del texto espacios en blanco a derecha. <code>split( seq )</code> Divide el texto al detectar un car\u00e1cter o secuencia indicada. Devuelve una \"lista\" (arreglo) de strings. El caracter o secuencia <code>seq</code> se elimina del resultado. <p>La mayor\u00eda de estos m\u00e9todos mencionados no requiere argumentos obligatorios, aunque muchos de ellos implementan argumentos opcionales. </p> <p>Una excepci\u00f3n a la regla es el m\u00e9todo <code>split()</code> : <pre><code>lista_strings = texto_original.split( caracter_secuencia )\n</code></pre> Ejemplo de uso:</p> <p>Ejemplo: m\u00e9todo <code>split()</code></p> <pre><code>original = \"tengo 2 naranjas.\"\n# da una lista (arreglo) de strings\nnuevo = original.split(\"2\") # da [\"tengo \", \" naranjas.\"]\n# se separan los dos textos de la lista\nparte_1 = nuevo[0]  # \"tengo \"\nparte_2 = nuevo[1]  # \" naranjas.\"\n</code></pre> <p>Otra excepci\u00f3n es el m\u00e9todo <code>replace()</code>: <pre><code>nuevo = texto_original.replace(subcadena_a_reemplazar, texto_reemplazo, numero_reemplazos)\n</code></pre></p> <p>Ejemplo: m\u00e9todo <code>replace()</code></p> <pre><code>original = \"tengo 2 naranjas y 2 manzanas.\"\nnuevo = texto_original.replace(\"2\", \"dos\", 0 ) # no hace nada\nnuevo = texto_original.replace(\"2\", \"dos\", 1 ) # s\u00f3lo reemplaza el primer \"2\" por \"dos\"\nnuevo = texto_original.replace(\"2\", \"dos\", 2 ) # reemplaza ambos \"2\" por \"dos\"\n</code></pre>","tags":["Funciones","Operadores","Tipos","Variables"]},{"location":"contenido/2-variables_asignaciones/#entrada-de-datos-de-usuario","title":"Entrada de datos de usuario","text":"<p>Para que el usuario pueda ingresar datos se usa la funci\u00f3n <code>input()</code>:</p> input()<pre><code>texto_variable = input (mensaje_consola)\n</code></pre> <p>Ejemplo: lectura entero<pre><code>num = input(\u201cIngrese un n\u00famero: \u201d)    # 'string'\nnumero = int(num)                     # 'int'\n</code></pre> El retorno de <code>input()</code> es un <code>string</code>. Para convertir strings en entero puede usarse la funci\u00f3n <code>int()</code> , es tanto que para convertir strings en flotante se puede usar la funci\u00f3n <code>float()</code>. </p> <p>Importante: booleanos</p> <p>La funci\u00f3n <code>bool()</code> devuelve el valor l\u00f3gico <code>False</code> si su entrada es cero \u00f3 un string vac\u00edo, en caso contrario da <code>True</code>.</p>","tags":["Funciones","Operadores","Tipos","Variables"]},{"location":"contenido/2-variables_asignaciones/#salida-de-datos-a-pantalla","title":"Salida de datos a pantalla","text":"<p>La funci\u00f3n <code>print()</code> permite escribir en pantalla todos los tipos de variables del lenguaje sin importar su tipo. Adem\u00e1s elige autom\u00e1ticamente el formato m\u00e1s id\u00f3neo para la mayor\u00eda de los casos: si la variable es un entero se imprime un entero; si es un numero flotante se escribe como un numero flotante, si es un texto se escribe como un <code>string</code>, etc.</p> <p>Para imprimir el valor de una variable en pantalla simplemente se indica su nombre como argumento: variable en pantalla<pre><code>print(nombre_variable)\n</code></pre> Si se necesita hacer lo mismo con m\u00faltiples variables en un mismo rengl\u00f3n se escriben todas en orden, separadas por comas: multiples variables en pantalla<pre><code>print(&lt;variable1&gt;, &lt;variable2&gt;, &lt;variable3&gt;, &lt;...&gt; )\n</code></pre> <code>print()</code> concatena todos los argumentos que se le da al momento de la llamada.</p> <p>Es posible combinar textos fijos con variables, nuevamente esto se realiza separando textos y variables con comas.</p> <p>Ejemplo aplicado: texto fijo y variables</p> <pre><code>numero = 17\nprint(\"Valor num\u00e9rico: \", numero )\n</code></pre> <p>Hay una alternativa con mejor desempe\u00f1o en lo referente a la ejecuci\u00f3n llamada <code>f-string</code>, se explica a continuaci\u00f3n.</p>","tags":["Funciones","Operadores","Tipos","Variables"]},{"location":"contenido/2-variables_asignaciones/#f-strings","title":"F-Strings","text":"<p>Los formatted-strings son variables de texto que son afectadas por otras variables. Este es el formato: formato f-strings<pre><code>texto_variable = f'&lt;texto&gt; {&lt;variable&gt;}'\n</code></pre> Se comienza el string con una letra 'f', se abren comillas simples \u00f3 dobles y dentro de ellas se escriben los textos y las variables, estas \u00faltimas entre llaves. Puede haber m\u00faltiples segmentos de texto y m\u00faltiples variables, siempre y cuando cada variable tenga sus propias llaves:</p> formato f-strings - varias variables<pre><code>texto_variable  = f'&lt;texto1&gt; {&lt;variable1&gt;} &lt;texto2&gt; {&lt;variable2&gt;} &lt;...&gt;'\n</code></pre> <p>Los f-strings son muy usados adentro de  <code>print()</code> directamente:</p> salida a consola<pre><code>numero = 17\nprint(f\"Valor de la variable: {numero}\")  # \"Valor de la variable: 17\"\n</code></pre> <p>Colocando dos puntos y un n\u00famero se reservan espacios para el valor de una variable, los cuales se devan vac\u00edos en caso de ser necesario:</p> f-strings - espacios reservados<pre><code>numero = 17\nprint(f\"Valor de la variable: {numero:10}\") # diez espacios reservados para el n\u00famero\n</code></pre> <p>Para los n\u00fameros flotantes, colocar un numero tras un punto permite elegir cu\u00e1ntos decimales usar para representar el valor:</p> <p>f-strings - n\u00ba decimales<pre><code>flotante = 13.5136717\nprint(f\"Flotante: {flotante:.1}\")   # Muestra 'Flotante: 1e+01'\nprint(f\"Flotante: {flotante:.2}\")   # Muestra 'Flotante: 1.4e+01'\nprint(f\"Flotante: {flotante:.3}\")   # Muestra 'Flotante: 13.5'\nprint(f\"Flotante: {flotante:.4}\")   # Muestra 'Flotante: 13.51'\n</code></pre> Este mecanismo es combinable con la reserva de espacios vista previamente:</p> <p>Ejemplo: f-strings con espacios y decimales</p> <p><pre><code>flotante = 13.5136717\ntexto = f\"Flotante:{flotante:7.4}\" # seis espacios reservados para el numero, cuatro cifras\n\nprint(texto)  # da 'Flotante:  13.51'  \n</code></pre> N\u00f3tese que en el ejemplo previo hay una variable de cuatro cifras , un punto y siete espacios, por ello se autocompletar\u00e1 con dos espacios vac\u00edos. </p> <p>Para m\u00e1s opciones de formato ver el manual de entrada y salida de Python</p>","tags":["Funciones","Operadores","Tipos","Variables"]},{"location":"contenido/3-expresiones_operadores/","title":"Expresiones y Operadores","text":""},{"location":"contenido/3-expresiones_operadores/#expresiones","title":"Expresiones","text":"<p>Las expresiones son un conjunto de operandos (variables y valores) y operadores que al evaluarse dan un valor. Las expresiones se eval\u00faan de izquierda a derecha y respetando la jerarqu\u00eda de las operaciones. </p>"},{"location":"contenido/3-expresiones_operadores/#operadores","title":"Operadores","text":""},{"location":"contenido/3-expresiones_operadores/#operadores-aritmeticos","title":"Operadores Aritm\u00e9ticos","text":"<p>A continuaci\u00f3n se muestran los operadores aritm\u00e9ticos de Python, los cuales sirven para trabajar con n\u00fameros enteros y flotantes.</p> Operador S\u00edmbolo Suma <code>+</code> Resta <code>-</code> Multiplicaci\u00f3n <code>*</code> Division <code>/</code> Division entera <code>//</code> Exponente <code>**</code> M\u00f3dulo <code>%</code> <p>Modo de uso: Formato operaciones aritm\u00e9ticas<pre><code>resultado = numero_1 operador numero_2\n</code></pre></p> Ejemplo: uso operaciones aritm\u00e9ticas<pre><code>n = 7 + 3   #  '10'  \nn = 7 - 3   #  '4'\nn = 7 * 3   #  '21'\nn = 7 / 3   #  '2.3333333333333335'\nn = 7 // 3  #  '2'\nn = 7 % 3   #  '1'\n</code></pre> <p>Tip: operadores aritm\u00e9ticos sobre strings</p> <p>Algunos operadores de Python permiten trabajar con <code>strings</code>: textos, frases, etc:</p> <ul> <li>El operador + tambi\u00e9n puede usarse para concatenar cadenas de texto (<code>strings</code>). </li> <li>Con el operador * se puede concatenar la misma frase un n\u00famero fijo de veces</li> </ul> Ejemplo: aritmetica sobre strings<pre><code>texto = \"hola_\"\ntexto + texto     # 'hola_hola_'\ntexto * 3         # 'hola_hola_hola_'\n</code></pre> <p>Las operaciones aritm\u00e9ticas tienen una jerarqu\u00eda de aplicacion por defecto. Este es el orden de jerarqu\u00eda de las operaciones, de las primeras en aplicarse a las \u00faltimas: </p> <ol> <li>Par\u00e9ntesis </li> <li>Exponente </li> <li>Multiplicaci\u00f3n </li> <li>Divisi\u00f3n  </li> <li>Adici\u00f3n </li> <li>Sustracci\u00f3n</li> </ol> <p>Nemot\u00e9cnico jerarqu\u00edas: PEMDAS</p>"},{"location":"contenido/3-expresiones_operadores/#operadores-de-asignacion","title":"Operadores de Asignaci\u00f3n","text":"<p>Combinan operaciones aritm\u00e9ticas con la asignaci\u00f3n (<code>=</code>) a continuaci\u00f3n. A la variable de entrada se la afecta con el operador aritm\u00e9tico indicado y una variable o valor adicional.</p> <p>Ejemplo:  <pre><code>edad += 3\n</code></pre> equivale a: </p> <pre><code>edad = edad + 3\n</code></pre>"},{"location":"contenido/3-expresiones_operadores/#operadores-logicos","title":"Operadores L\u00f3gicos","text":"<p>Los operadores l\u00f3gicos trabajan con valores y variables booleanos. </p> <p>Modo de uso: Formato operaciones l\u00f3gicas<pre><code>resultado = valor_logico_1 operador valor_logico_2\n</code></pre> Los operadores disponibles son los siguientes:</p> Operador S\u00edmbolo Salida en 'True' Y (AND) <code>and</code> Ambas entradas son 'True' O (OR) <code>or</code> Al menos una entrada es 'True' NO (NOT) <code>not</code> Entrada 'False' O exclusiva (XOR) <code>^</code> Entradas distintas <p>Esta es la jerarqu\u00eda de las operaciones l\u00f3gicas, de mayor a menor:</p> <ol> <li><code>not</code> </li> <li><code>and</code> </li> <li><code>or</code></li> </ol> Anexo: tablas de verdad <p>Los resultados de cada operador l\u00f3gico se describen habitualmente con las tablas de verdad,  donde el emoji \u2705 es <code>True</code> y la celda vac\u00eda es <code>False</code>.:</p> entrada salida NOT \u2705 \u2705 entrada X entrada Y salida AND \u2705 \u2705 \u2705 \u2705 \u2705 entrada X entrada Y salida OR \u2705 \u2705 \u2705 \u2705 \u2705 \u2705 \u2705 entrada X entrada Y salida XOR \u2705 \u2705 \u2705 \u2705 \u2705 \u2705 <p>Las tablas de verdad  son est\u00e1ndar: no dependen del lenguaje de implementaci\u00f3n</p>"},{"location":"contenido/3-expresiones_operadores/#operadores-bit-a-bit","title":"Operadores Bit a Bit","text":""},{"location":"contenido/3-expresiones_operadores/#logicos","title":"L\u00f3gicos","text":"<p>Estos operadores aplican las operaciones l\u00f3gicas vistas previamente pero bit a bit. Lo que hacen estos operadores es basarse en la representaci\u00f3n binaria de la(s) variable(s) de entrada.</p> Operador S\u00edmbolo Bit salida en 'True' Y (AND) <code>&amp;</code> Ambos bits son 'True' O (OR) <code>|</code> Al menos un bit es 'True' NO (NOT) <code>~</code> Bit 'False' O exclusiva (XOR) <code>^</code> Bits distintos <p>Ejemplos de uso: </p> <pre><code>7 &amp; 5   # '111' and '101' -&gt; '7' (111)\n7 | 5   # '111' or  '101' -&gt; '5' (101)\n7 ^ 5   # '111' xor '101' -&gt; '2' (010)\n</code></pre>"},{"location":"contenido/3-expresiones_operadores/#desplazamiento-shift","title":"Desplazamiento (shift)","text":"<p>Con los operadores de desplazamiento se lee una variable como binario y se elige cu\u00e1ntas posiciones se 'corre'. Los espacios faltantes se autocompletan con ceros.</p> Operador S\u00edmbolo Corrimiento a derecha <code>&gt;&gt;</code> Corrimiento a izquierda <code>&lt;&lt;</code> <p>Ejemplos: </p> Desplazamiento - a izquierda<pre><code>1 &lt;&lt; 0 # no corrimiento -&gt; '1'  (0001) \n1 &lt;&lt; 1 # 1 bit          -&gt; '2'  (0010)\n1 &lt;&lt; 3 # 2 bits         -&gt; '4'  (0100)\n1 &lt;&lt; 3 # 3 bits         -&gt; '8'  (1000) \n</code></pre> Desplazamiento - a derecha<pre><code>7 &gt;&gt; 0 # no corrimiento -&gt; '7'  (0111)\n7 &gt;&gt; 1 # 1 bit          -&gt; '3'  (0011)\n7 &gt;&gt; 2 # 2 bits         -&gt; '1'  (0001)\n7 &gt;&gt; 3 # 3 bits         -&gt; '0'  (0000)\n</code></pre>"},{"location":"contenido/3-expresiones_operadores/#operadores-relacionales","title":"Operadores Relacionales","text":"<p>Los operadores relacionales permiten comparar n\u00fameros enteros y flotantes. </p> <p>Los operadores disponibles en Python son:</p> Operador S\u00edmbolo mayor <code>&gt;</code> menor <code>&lt;</code> igual <code>==</code> mayor o igual <code>&gt;=</code> menor o igual <code>&lt;=</code> distinto a <code>!=</code> <p>Tip: operadores relacionales sobre strings</p> <p>El operador <code>==</code> sirve para comparar si dos <code>strings</code> (caracteres, frases, etc) son id\u00e9nticos. Los otros operadores tambi\u00e9n pueden usarse para comparar strings por longitud y por contenido de caracteres. </p> Ejemplo: comparando strings<pre><code>print('B'  &lt; 'A')   # False\nprint('B'  &gt;= 'A')  # True\nprint('ABC' &gt; 'A')  # True\nprint('ABC' == 'A') # False\nprint('ABC' &lt;= 'A') # False\n</code></pre>"},{"location":"contenido/3-expresiones_operadores/#operador-de-pertenencia","title":"Operador de Pertenencia","text":"<p>El operador de pertenencia <code>in</code> es el encargado de verificar que un elemento o secuencia est\u00e9 o no en una secuencia.</p> <p>El operador de pertenencia son:</p> Operador S\u00edmbolo pertenencia <code>in</code> <p>El retorno es un booleano: <code>True</code> si el elemento existe dentro de la secuencia y <code>False</code> en caso contrario.</p> <p>Ejemplo: Pertenencia - valores<pre><code>inclusion = \"a\"  in \"hola\"  # 'True'\ninclusion = \"b\"  in \"hola\"  # 'False'\n</code></pre></p> <p>La secuencia puede ser una variable <code>string</code> como tambi\u00e9n una lista, una tupla, etc.</p> <p>Con <code>in</code> tambi\u00e9n se puede verificar la existencia o no de una secuencia particular dentro de otra:</p> Pertenencia - secuencias<pre><code>inclusion = \"la\"  in \"hola\"  # 'True'\ninclusion = \"al\"  in \"hola\"  # 'False'\n</code></pre> <p>La cl\u00e1usula se puede usar combinada con el operador l\u00f3gico <code>not</code>:</p> No pertenencia<pre><code>inclusion =  \"n\" not in \"hola\" # 'True'\ninclusion = \"al\" not in \"hola\" # 'True'\n</code></pre>"},{"location":"contenido/3-expresiones_operadores/#operador-de-identidad","title":"Operador de identidad","text":"<p>El operador de identidad <code>is</code> se encarga de verificar si dos variables ocupan el mismo espacio en memoria.</p> Operador S\u00edmbolo identidad <code>is</code> <p>El retorno es un booleano: <code>True</code> si se cumple la identidad y <code>False</code> en caso contrario.</p> <p>Este operador tambi\u00e9n suele usarse como alternativa al operador relacional de igualdad:</p> <pre><code>valor = None\n# uso\nidentidad = valor is True       # 'False'\nidentidad = valor is False      # 'False'\nidentidad = valor is None       # 'True'\n</code></pre>"},{"location":"contenido/5-control_flujo/","title":"Control de Flujo","text":""},{"location":"contenido/5-control_flujo/#saltos-condicionales-y-bucles","title":"Saltos condicionales y bucles","text":"<p>El control de flujo se realiza mediante saltos condicionales (cl\u00e1usulas <code>if</code>, <code>else</code>, etc) y mediante bucles condicionales (<code>while</code>, <code>for</code>).</p>"},{"location":"contenido/5-control_flujo/#saltos-condicionales","title":"Saltos Condicionales","text":""},{"location":"contenido/5-control_flujo/#clausula-if-si","title":"Clausula <code>if</code> (\"si\")","text":"<p>Ejecuta un trozo de c\u00f3digo solamente si el primer condicional es verdadero (retorna 'True').</p> condicional if<pre><code>if condicion:\n    # SI condicion == 'True':\n    # c\u00f3digo_condicional\n</code></pre>"},{"location":"contenido/5-control_flujo/#clausula-else-sino","title":"Cl\u00e1usula <code>else</code> (\"sino\"  )","text":"<p>Permite agregar rutinas que se ejecutan si las condiciones pevias no se cumplen.</p> condicional if-else<pre><code>if condicion:\n    # SI condicion == 'True':\n    # c\u00f3digo_condicional\nelse:\n    # SI condicion ==  'False':\n    # codigo_alternativo\n</code></pre>"},{"location":"contenido/5-control_flujo/#clausula-elif-sino-si","title":"Cl\u00e1usula <code>elif</code> (\"sino si\")","text":"<p>Permite agregar rutinas con condicionales  alternativos a la primera condici\u00f3n. condicional if-elif-else<pre><code>if condicion_1:\n    # SI condicion_1 == 'True':\n    # c\u00f3digo_condicional\nelif condicion_2:\n    # SI condicion_1 ==  'False' Y condicion_2 == 'True':\n    # codigo_condicional_alternativo\nelse:\n    # SI condicion_1 ==  'False' Y condicion_2 == 'False':\n    # codigo_alternativo_defecto\n</code></pre></p> <p>Puede haber m\u00faltiples cl\u00e1usulas elif pero s\u00f3lo una else y una sola if.</p> <p>Dos puntos</p> <p>Prestar atenci\u00f3n a los dos puntos ( <code>:</code> ), los cuales marcan el final de cada condicional.</p> <p>Indentaci\u00f3n</p> <p>Hay que respetar la indentaci\u00f3n que impone Python para que el programa funcione, de otro modo el programa se interrumpe. </p> <p>Es habitual en Python usar cuatro espacios para el tabulado; </p> <p>Hay una forma resumida para escribir la clausula if - else en un solo reng\u00f3n, esta es: <pre><code>instruccion1 if &lt;condicion&gt; else instruccion2\n</code></pre></p>"},{"location":"contenido/5-control_flujo/#bucles-condicionales","title":"Bucles condicionales","text":""},{"location":"contenido/5-control_flujo/#ciclos-while-mientras","title":"Ciclos <code>while</code> (\"mientras\")","text":"<p>Estructura de control que repite una instrucci\u00f3n o rutina mientras su condici\u00f3n de control se cumpla. Este tipo de bucles no tiene un numero predeterminado de iteraciones. Si la condici\u00f3n siempre es verdadera entonces el bucle ser\u00e1 infinito. Verificar que la condici\u00f3n de control se haga falsa eventualmente para permitir la salida del bucle es responsabilidad del programador. Formato:</p> bucle while<pre><code>while condicion:    # 'mientras condici\u00f3n == True:'\n    # rutina\n    # actualizacion variable control\n</code></pre> <p>Para forzar la interrupci\u00f3n la ejecuci\u00f3n de un bucle se puede usar la orden <code>break</code>, esto se hace dentro de un condicional interno del bucle. </p> <p>Si en cambio el bucle es infinito (<code>while True</code>) es indispensable incluir la orden <code>break</code> con un condicional acorde:</p> bucle while-True<pre><code>while True: # 'mientras SIEMPRE'\n    # rutina\n    # actualizacion variable control\n    if condicion_escape:\n        break\n</code></pre> <p>El bucle while puede ser usado en conjunci\u00f3n con el condicional <code>else</code> lo cual permite ejecutar una rutina alterna al bucle:</p> bucle while-else<pre><code>while condicion:    # 'mientras condici\u00f3n == True:'\n    # rutina\n    # actualizacion variable control\nelse:               # 'sino:'\n    #rutina alterna\n</code></pre> <p>Hint: cancelar ejecuci\u00f3n</p> <p>Si se ejecuta un prograam con un bucle infinito es posible interrumpirlo apretando \u2018Ctrl\u2019 + \u2018C\u2019</p>"},{"location":"contenido/5-control_flujo/#ciclos-for-para","title":"Ciclos <code>for</code> (\"para\")","text":"<p>Estructura de control que repite una instrucci\u00f3n o rutina un n\u00famero predefinido de veces. El fin del bucle se indica con el indentado, por tanto debe respetarse. Formato habitual:</p> bucle for - range()<pre><code>for indice in range(inicio, fin, incremento):\n    # Instruccion1\n    # Instruccion2\n    # \u2026\n</code></pre> <p>La variable <code>indice</code> es la variable que mantiene el conteo de las repeticiones. Tener en cuenta que el valor <code>fin</code> no se alcanza, sino que el bucle se interrumpe justo un ciclo antes. Si <code>inicio</code> es cero (<code>0</code>) no hace falta indicarlo. Y si el <code>incremento</code> es unitario (<code>1</code>) entonces tampoco hace falta indicarlo.</p> <p>Ejemplo: contar hasta tres<pre><code>for i in range(4):\n    # i: variable indice\n    print(i)        # da los n\u00fameros del cero al tres.\n</code></pre> N\u00f3tese el uso de una funci\u00f3n dentro del bucle llamada <code>range()</code>. \u00c9sta es una funci\u00f3n que retorna una lista (<code>list</code>) con los valores enteros entre los n\u00fameros <code>inicio</code> y <code>fin</code> (sin incluir este \u00faltimo) y con el <code>incremento</code> indicado. Ejemplos:</p> funci\u00f3n range() - completa<pre><code>inicio = 3\nfin = 12\nincremento = 2 \nlista_enteros = range(inicio, fin, incremento) # '[3, 5, 7, 9, 11]'\n</code></pre> funci\u00f3n range() - m\u00ednimo<pre><code>fin = 5\nlista_enteros = range( fin) # '[0, 1, 2, 3, 4]'\n</code></pre> <p>A diferencia de otros lenguajes de programaci\u00f3n, Python implementa el bucle <code>for</code> en base a recorrer un vector de elementos, una 'lista'. Esto permite implementar bucles <code>for</code> que no requieran el uso de variables indice sino que usan directamente los elementos internos, sean del tipo que sean. Formato: </p> bucle for - lista<pre><code>lista_elementos: list\nfor elemento in lista_elementos:\n    # Instruccion1\n    # Instruccion2\n    # \u2026\n</code></pre> <p>El bucle for puede aplicarse sobre strings, listas, tuplas y diccionarios:  </p> Ejemplo: recorrer string<pre><code>texto = \"hola mundo\"\nfor letra in texto:     #'texto' es 'str'\n    print(letra)        # muestra una letra a la vez\n</code></pre> <p>Listas y tuplas muestran un comportamiento an\u00e1logo (un elemento por iteraci\u00f3n), en tanto que los diccionarios podr\u00edan recorrerse as\u00ed:</p> <p>recorrer claves de diccionario<pre><code>for clave in diccionario:\n    print(clave)\n</code></pre> muestra las claves del diccionario una por una, en tanto que para mostrar los valores se puede usar el m\u00e9todo <code>values()</code>:</p> <p>recorrer valores de diccionario<pre><code>for valor in diccionario.values():\n    print(valor)\n</code></pre> Para consultar ambos elementos de a pares se puede recurrir al m\u00e9todo <code>items()</code> :</p> recorrer pares clave-valor de diccionario<pre><code>for clave, valor in diccionario.items():\n    print(clave, valor)\n</code></pre> <p><code>break</code> y <code>continue</code></p> <p>Para interrumpir el bucle antes de tiempo se puede usar la orden <code>break</code> asociada a un condicional. Como contrapartida de <code>break</code> existe la orden <code>continue</code> (similar al <code>goto</code> de C) sin embargo su uso es considerado actualmente como una mala pr\u00e1ctica.</p>"},{"location":"contenido/enlaces/","title":"Recursos de inter\u00e9s","text":""},{"location":"contenido/enlaces/#enlaces-oficiales","title":"Enlaces oficiales","text":"<p>Sitio Oficial (en ingles por defecto)</p> <p>Funciones Built-In</p> <p>Guia de Estilo: PEP8</p>"},{"location":"contenido/enlaces/#videos","title":"Videos","text":""},{"location":"contenido/enlaces/#introduccion","title":"Introducci\u00f3n","text":""},{"location":"contenido/enlaces/#programacion-orientada-a-objetos","title":"Programaci\u00f3n Orientada a Objetos","text":""},{"location":"contenido/modulos/","title":"M\u00f3dulos","text":"<p>Los programas a medida que crecen se dividen en m\u00f3dulos para facilitar el dise\u00f1o, el mantenimiento y la reutilizaci\u00f3n.  Un m\u00f3dulo es un archivo Python que contiene definiciones y sentencias relacionados. </p>"},{"location":"contenido/modulos/#importacion-de-modulo","title":"Importaci\u00f3n de m\u00f3dulo","text":"<p>La importaci\u00f3n es una sentencia que da acceso a las funciones y constantes definidas en el m\u00f3dulo especificado <pre><code>import modulo\n</code></pre> Las importaciones deben hacerse antes de usar sus componentes.  T\u00edpicamente se hacen al comienzo del archivo. </p>"},{"location":"contenido/modulos/#uso-de-componentes","title":"Uso de componentes","text":"<p>Las funciones del m\u00f3dulo importado se usan as\u00ed:</p> <p><pre><code>modulo.funcion(argumento)\n</code></pre> Las constantes se acceden as\u00ed:</p> <pre><code>modulo.constante\n</code></pre>"},{"location":"contenido/modulos/#alias-de-modulo","title":"Alias de m\u00f3dulo","text":"<p>Al m\u00f3dulo se lo puede importar y asignarle un nombre alternativo dentro del programa: <pre><code>import modulo as alias_modulo\n</code></pre> esto permite usar alias m\u00e1s cortos para usar sus componentes: <pre><code>alias.constante\nalias.funcion(argumento)\n</code></pre></p>"},{"location":"contenido/modulos/#importacion-de-elementos","title":"Importaci\u00f3n de elementos","text":"<p>Para importar un elemento espec\u00edfico de un m\u00f3dulo se puede usar la sentencia: <pre><code>from modulo import elemento\n</code></pre> Los elementos tambi\u00e9n se pueden importar con nuevo nombre: <pre><code>from modulo import elemento as alias_elemento\n</code></pre></p> <p>Importaci\u00f3n sin nombre</p> <p>Una mala pr\u00e1ctica muy habitual es importar un m\u00f3dulo con la sentencia: <pre><code>from modulo import *\n</code></pre> \u00c9sta permite llamar a todos los elementos del m\u00f3dulo pero sin mencionarlo. Puede dar lugar a conflictos al llamar a m\u00faltiples m\u00f3dulos.  Por ejemplo, tanto el m\u00f3dulo <code>pathlib</code> como el m\u00f3dulo <code>os</code> poseen una funci\u00f3n llamada <code>Path()</code>.</p>"},{"location":"contenido/modulos/#modulos-estandar","title":"M\u00f3dulos estandar","text":"<p>La Biblioteca Est\u00e1ndar de Python enumera y explica todos los m\u00f3dulos est\u00e1ndar del lenguaje Python.</p>"},{"location":"contenido/modulos/#modulos-locales","title":"M\u00f3dulos locales","text":""},{"location":"contenido/modulos/#crear-modulos-y-submodulos","title":"Crear m\u00f3dulos y subm\u00f3dulos","text":"<p>Los m\u00f3dulos se crean dentro de archivos con extensi\u00f3n `.py. Si estos archivos se ubican dentro de subdirectorios en tal caso se habla de subm\u00f3dulos </p> <p>Exportaci\u00f3n de elementos</p> <p>A diferencia de otros lenguajes, en Python todos los elementos internos son visibles y por eso no es necesario ordenar la exportaci\u00f3n de elementos para que \u00e9stos sean accesibles por fuera del m\u00f3dulo. </p> <p>Para reducir la visibilidad de los elementos internos se puede recurrir a los archivos init</p>"},{"location":"contenido/modulos/#sintaxis-de-importacion","title":"Sintaxis de importaci\u00f3n","text":"<p>Las barras(<code>/</code>) o barras invertidas (<code>\\</code>) de la ruta de archivo se reemplazan por puntos (<code>.</code>) y del nombre de archivo se omite la extensi\u00f3n.</p>"},{"location":"contenido/modulos/#importacion-absoluta","title":"Importaci\u00f3n absoluta","text":"<p>La importacion absoluta indica la ruta del archivo de m\u00f3dulo respecto al directorio ra\u00edz del proyecto.  Por ejemplo, si el archivo est\u00e1 adentro de un directorio interno del proyecto la importaci\u00f3n queda as\u00ed:</p> Importaci\u00f3n absoluta<pre><code>import directorio.archivo                                # importar modulo\nimport directorio.archivo as alias                       # importar modulo con alias\nfrom directorio.archivo import elemento, funcion, Clase  # importar elementos particulares\n</code></pre>"},{"location":"contenido/modulos/#importacion-relativa","title":"Importaci\u00f3n relativa","text":"<p>La importaci\u00f3n relativa se basa en definir la ruta del archivo de m\u00f3dulo respecto a la ruta del archivo actual:</p> Importaci\u00f3n relativa<pre><code>from . import modulo_A      # archivo en directorio actual\nfrom .. import modulo_B     # archivo en directorio padre\n</code></pre> <p>Rutas relativas</p> <p>El uso de importaciones relativas es motivo de debate respecto de las buenas pr\u00e1cticas y suele ser origen de m\u00faltiples problemas de dependencias.</p>"},{"location":"contenido/modulos/#ejecutar-modulo","title":"Ejecutar m\u00f3dulo","text":"<p>Si el archivo del m\u00f3dulo tiene c\u00f3digo para ejecutar (por ejemplo, un demo o un test) esto se realiza imitando la importaci\u00f3n absoluta, mediante la sintaxis:</p> Ejecuci\u00f3n de m\u00f3dulo<pre><code># ruta ra\u00edz del proyecto\npy -m directorio.archivo    # ejecucion m\u00f3dulo\n</code></pre>"},{"location":"contenido/modulos/#archivos-__init__py","title":"Archivos <code>__init__.py</code>","text":"<p>Es habitual colocar archivos llamados <code>__init__.py</code> al lado de los archivos de subm\u00f3dulo, los cuales permiten reducir la visibilidad de los mismos, acelerar la carga y prevenir errores. </p> Archivo __init__.py - ubicaci\u00f3n<pre><code>directorio\n    \u251c\u2500 submodulo1.py\n    \u251c\u2500 submodulo2.py\n    \u251c\u2500 submodulo3.py\n    \u251c\u2500 ....\n    \u251c\u2500 submoduloN.py\n    \u2514\u2500 __init__.py       \n</code></pre> <p>Para especificar qu\u00e9 subm\u00f3dulos deben ser accesibles se recurre al objeto <code>__all__</code> dentro de <code>__init__.py</code>:</p> <p>Archivo __init__.py - contenido<pre><code>## archivo '__init__.py'\n__all__ = [\n    \"submodulo1\",      # archivo 'submodulo1.py'\n    \"submodulo2\",      # archivo 'submodulo2.py'\n    ]\n</code></pre> De esta forma, si un archivo aleda\u00f1o intentara importar todo:</p> <p><pre><code>from directorio import *  # importa 'modulo1.py' y'modulo2.py'\n</code></pre> se importar\u00e1 solamente a estos dos subm\u00f3dulos especificados en <code>__init__.py</code> incluso si hay otros m\u00f3dulos en el directorio.</p> <p>init.py vac\u00edos</p> <p>Antiguamente era una pr\u00e1ctica muy popular crear archivos <code>__init__.py</code> vac\u00edos en cada subdirectorio, la cual era considerada necesaria.  Sin embargo, esto actualmente no es necesario y puede ser contraproducente. </p> <p>Por ejemplo, al intentar ejecutar programas compilados con PyInstaller \u00e9stos son incapaces de acceder a los m\u00f3dulos creados y por ello la ejecuci\u00f3n es abortada. </p>"},{"location":"contenido/modulos/#referencias","title":"Referencias","text":"<p>Documentacion oficial - M\u00f3dulos</p> <p>Hektorprofe - M\u00f3dulos</p>"},{"location":"contenido/paquetes/","title":"Paquetes","text":"<p>Los paquetes son similares a los m\u00f3dulos pero no son componentes oficiales de Python. Adem\u00e1s de la importaci\u00f3n, los m\u00f3dulos requieren instalaci\u00f3n previa para su uso. </p>"},{"location":"contenido/paquetes/#instalacion","title":"Instalaci\u00f3n","text":""},{"location":"contenido/paquetes/#pip-y-pypi","title":"PIP y Pypi","text":"<p>PIP es el instalador de Paquetes de Python. Se instala autom\u00e1ticamente con el int\u00e9rprete de Python.</p> <p>Primeros comandos de PIP:</p> PIP - Instalar y actualizar<pre><code>pip install pip             # instalar PIP (normalmente innecesario)\npip --version               # version PIP actual  \npip install --upgrade pip   # actualizar PIP\n</code></pre> <p>PyPi es el repositorio oficial para obtener y publicar los paquetes. Sitio oficial de PyPi</p>"},{"location":"contenido/paquetes/#instalacion-de-paquetes","title":"Instalaci\u00f3n de paquetes","text":"<p>Comandos \u00fatiles para manejar paquetes:</p> <p>PIP - Comandos b\u00e1sicos<pre><code>pip install paquete     # instalar paquete (m\u00e1s reciente)\npip show paquete        # mostrar data del paquete\npip uninstall paquete   # desinstalar paquete\npip list                # enumerar paquetes instalados \n</code></pre> Opciones para manejar versiones de paquetes: PIP - Comandos b\u00e1sicos<pre><code>pip install paquete==?          # consultar versiones online del paquete \npip install paquete==version    # instalar version especificada\npip install paquete&gt;=version    # instalar version especificada o m\u00e1s reciente\n</code></pre> Listado de dependencias e instalacion desde las mismas:</p> <pre><code># guardado en texto de paquetes actuales y su versi\u00f3n actual\npip freeze &gt; requirements.txt\n# instalacion desde archivo\npip install -r requirements.txt\n</code></pre>"},{"location":"contenido/paquetes/#actualizacion-de-paquetes","title":"Actualizaci\u00f3n de paquetes","text":"<p>Para actualizar los paquetes se puede usar el paquete auxiliar pip-review:</p> <pre><code>pip install pip-review\npip-review --local --interactive\n</code></pre> <p>Ubicacion de paquetes locales: <pre><code>python -m site --user-site\n</code></pre></p>"},{"location":"contenido/paquetes/#importacion","title":"Importaci\u00f3n","text":"<p>El manejo de los paquetes ya instalados es id\u00e9ntico al de los m\u00f3dulos. </p> <p>Para usar el paquete se importa haciendo:</p> <pre><code>import paquete\n</code></pre> <p>Si s\u00f3lo se necesita usar algunas funciones (o subm\u00f3dulos) del paquete se usa:</p> <pre><code>from paquete import &lt;mi_archivo_funciones&gt;\n</code></pre> <p>A los paquetes tambi\u00e9n se les puede poner alias en el programa:</p> <p><pre><code>import paquete as alias\n</code></pre> Ejemplo resumen: importando Rich (paquete de cosm\u00e9ticos para la consola).</p> <pre><code># alias para el paquete\nimport rich as r\nr.print(\"[bold yellow]Textos enriquecidos!\")\n\n# sustitucion de funciones\nfrom rich import print\nprint(\"[bold green]Funcion 'print' sustituida\")\n\n# renombrado funciones\nfrom rich import print as rprint\nrprint(\"[bold cyan]Funcion 'print' renombrada\")\n</code></pre>"},{"location":"contenido/paquetes/#crear-paquetes","title":"Crear paquetes","text":"<p>Para crear un paquete se puede crear una carpeta con el nombre del paquete e introducir: - Un archivo vac\u00edo llamado '__init__.py' dentro de cada subdirectorio incluido dentro del paquete; - Uno (o varios) archivos de Python con las funciones , constantes etc a\u00f1adidos; - Un archivo 'setup.py' para crear el archivo comprimido con el paquete, el cual tendr\u00e1 terminaci\u00f3n zip en Windows \u00f3 tar.gz en GNU/Linux.</p> <p>El proceso se explica m\u00e1s facilmente mediante ejemplos:</p> <ol> <li> <p>Supongamos la creaci\u00f3n de un paquete llamado \"mipak\" compuesto por un \u00fanico script. Para ello se colocan en un mismo directorio los siguientes tres archivos:</p> <pre><code>__init__.py     # archivo vac\u00edo\nmipak.py        # archivo con todo el contenido del paquete: funciones, clases, etc\nsetup.py        # archivo instalacion\n</code></pre> <p>El archivo de Python setup.py tendr\u00e1 todas las configuraciones pertinentes:</p> <p><pre><code># archivo 'setup.py' aleda\u00f1o al script 'mipak.py'\nfrom setuptools import setup\n\nsetup(\n    name=\"mipak\",    # nombre dek paquete, se usar\u00e1 para instalar e importar   \n    version=\"0.3\",   # numero de version, \u00fatil para gestionar las actualizaciones\n    # info para la publicaci\u00f3n online (opcional)\n    description=\"Paquete con script \u00fanico\",\n    author=\"Yo\",\n    author_email=\"yo@miserver.yo\",\n    url=\"http://miurl.com\",\n    # informacion de la composicion (importante)\n    packages=['.'],                 # Ruta del directorio del paquete\n    scripts=['mipak.py']            # Nombre script -- DEBE COINCIDIR con el nombre de paquete\n)\n</code></pre> El paquete comprimido se crea ejecutando el archivo de setup con la opcion sdist:  </p> <p><pre><code>python setup.py sdist \npy setup.py sdist           #version  abreviada\n</code></pre> Se crear\u00e1 un archivo comprimido (zip en Windows, tar.gz en Linux) con todo el contenido del paquete. \u00c9ste se encuentra en el subdirectorio /dist.</p> <p>La instalaci\u00f3n local del paquete se har\u00e1 con el comando pip install. En el ejemplo: <pre><code>pip install dist/mipak-0.3.tar.gz       # instalaci\u00f3n local\n</code></pre> Para poder usar este m\u00f3dulo en los scripts la importaci\u00f3n se hace como:</p> <pre><code>import mipak\n</code></pre> </li> <li> <p>T\u00f3mese por referencia el ejemplo online de Hektorprofe de un paquete con dos subm\u00f3dulos:</p> <p><pre><code>paquete/\n    __init__.py     # archivo vac\u00edo\n    hola/\n        __init__.py     # archivo vac\u00edo   \n        saludos.py \n    __init__.py     # archivo vac\u00edo\n    adios/\n        __init__.py     # archivo vac\u00edo   \n        despedidas.py   \n\nsetup.py        # archivo instalacion\n</code></pre> A este paquete le corresponde un 'setup.py' como el siguiente:</p> <p><pre><code>from setuptools import setup\n\nsetup(\n    name=\"paquete\",\n    version=\"0.1\",\n    description=\"Este es un paquete de ejemplo\",\n    packages=['paquete','paquete.hola','paquete.adios'], # Rutas del directorio y subdirectorios \n    scripts=[]                  # queda vac\u00edo\n)\n</code></pre> Los pasos siguientes son empaquetar e instalar, tal como antes: <pre><code>py setup.py sdist                       # crear paquete\npip install dist/paquete-0.1.tar.gz     # instalaci\u00f3n local\n</code></pre> En este caso la importaci\u00f3n deber\u00e1 dar cuenta de toda la ruta de archico. Por ejemplo: <pre><code>import paquete.hola.saludos     as saludos\nimport paquete.adios.despedidas as despedidas\n</code></pre> 3. Si del ejemplo previo se eliminaran las subcarpetas pero se dejaran ambos scripts: <pre><code>paquete/\n    __init__.py     # archivo vac\u00edo \n    saludos.py \n    despedidas.py   \n\nsetup.py        # archivo instalacion\n</code></pre> al paquete le corresponder\u00eda un 'setup.py' como el siguiente:</p> <p><pre><code>from setuptools import setup\n\nsetup(\n    name=\"paquete\",\n    version=\"0.2\",\n    description=\"Este es un paquete de ejemplo\",\n    packages=['paquete'],       # Ruta del directorio \n    scripts=[]                  # queda vac\u00edo\n)\n</code></pre> El empaquetado  e instalacion son analogos al caso previo: <pre><code>py setup.py sdist                       # crear paquete\npip install dist/paquete-0.2.tar.gz     # instalaci\u00f3n local\n</code></pre> Y la importaci\u00f3n queda como: <pre><code>import paquete.saludos    as saludos\nimport paquete.despedidas as despedidas\n</code></pre></p> </li> </ol> <p>Links \u00fatiles:</p> <p>https://docs.hektorprofe.net/python/modulos-y-paquetes/paquetes/</p>"},{"location":"datos/","title":"Tipos de Datos","text":"<p>Python tiene sus propios tipos de datos predefinidos para facilitar el manejo y la organizacion de la data guardada en las variables, agrup\u00e1ndolas en estructuras m\u00e1s grandes y con diferentes propiedades. </p> <p>A continuacion se explican los tipos de datos est\u00e1ndar de Python y algunas herramientas \u00fatiles para ellos. </p>"},{"location":"datos/#contenidos","title":"Contenidos","text":"<p>{{ pagetree(siblings) }}</p>"},{"location":"datos/diccionarios/","title":"Diccionarios (<code>dict</code>)","text":"<p>Los diccionarios son colecciones de pares clave-valor.</p>","tags":["datos","diccionarios","JSON"]},{"location":"datos/diccionarios/#sintaxis","title":"Sintaxis","text":"<p>Los diccionarios se definen con llaves (<code>{}</code>), el formato es el que sigue: Formato diccionario<pre><code>diccionario = {clave_1: valor_1, clave_2: valor_2, ... }\n</code></pre> Las claves deben ser \u00fanicas e inmutables, y sirven para acceder a su valor asociado. Deben ser de tipo <code>string</code>.</p> Diccionarios - definicion<pre><code>diccionario = {\"A\": 45, \"B\": \"hola\"}\n</code></pre> <p>Otra forma de definir las funciones es mediante el uso de la funci\u00f3n <code>dict()</code>:</p> Diccionarios - funci\u00f3n dict()<pre><code>diccionario = dict(A=45, B=\"hola\")\n</code></pre> <p>Los valores pueden ser de cualquier tipo. Los pares clave-valor s\u00ed pueden ser modificados, a\u00f1adidos y eliminados, es decir son mutables.</p> <p>Una misma clave puede tener m\u00faltiples valores agrupados en un tipo de datos acorde: una lista, una tupla, un set, un diccionario interno, etc.</p> Diccionarios - valores m\u00faliples<pre><code>diccionario = {\"A\": {45, 30}}   # hace A = {45,30} (set)\ndiccionario = {\"A\": {45, 30} , \"A\": 5} # hace A=5 \n</code></pre> <p>Claves repetidas</p> <p>Hay que tener cuidado de no repetir las claves porque sino se pierden los valores m\u00e1s antiguos.</p>","tags":["datos","diccionarios","JSON"]},{"location":"datos/diccionarios/#metodos-y-operadores","title":"M\u00e9todos y operadores","text":"","tags":["datos","diccionarios","JSON"]},{"location":"datos/diccionarios/#lecturas","title":"Lecturas","text":"<p>Para acceder a un valor del diccionario se lo busca por su clave, la cual debe ser preexistente: <pre><code>valor = diccionario[clave]      # si la clave no existe da error\n</code></pre> Otra forma es usar el m\u00e9todo <code>get()</code>, el cual es m\u00e1s seguro :  <pre><code>diccionario.get(clave)  # si no se encuentra la clave se devuelve 'None'\n</code></pre></p> <p>La lectura de todas las claves de un diccionario se puede usar el m\u00e9todo <code>keys()</code>: <pre><code>claves = diccionario.keys()\n</code></pre> En tanto que las lectura de los valores se realiza con el m\u00e9todo <code>values()</code>: <pre><code>valores = diccionario.values()\n</code></pre></p> <p>La lectura de a pares clave-valor se hace con el m\u00e9todo <code>items()</code>: <pre><code>objeto_items = diccionario.items()   # objeto 'dict_items'\nlista_items = list(objeto_items)          # conversion a lista de tuplas clave-valor\n</code></pre> donde cada par se engloba en una tupla y el conjunto se agrupa en una lista.</p>","tags":["datos","diccionarios","JSON"]},{"location":"datos/diccionarios/#agregar-y-modificar","title":"Agregar y modificar","text":"<p>Para a\u00f1adir o modificar un par clave - valor se hace una asignaci\u00f3n: <pre><code>diccionario[ nueva_clave ] = nuevo_valor\n</code></pre></p>","tags":["datos","diccionarios","JSON"]},{"location":"datos/diccionarios/#eliminar","title":"Eliminar","text":"<p>Para eliminar una clave se usa el operador <code>del</code> (delete): <pre><code>del diccionario[clave]\n</code></pre></p>","tags":["datos","diccionarios","JSON"]},{"location":"datos/diccionarios/#verificar","title":"Verificar","text":"<p>Con el operador <code>in</code> podemos chequear la existencia de una clave particular \u00f3 de un valor: <pre><code>existe_clave = clave in diccionario             # verificacion de clave directa\nexiste_valor = valor in diccionario.values()    # lectura de valores previa\n</code></pre></p> <p>Para crear un nuevo diccionario con claves pero todas con valor <code>None</code> existe el m\u00e9todo <code>fromkeys()</code>: <pre><code>diccionario = dict.fromkeys([clave_1, clave_2, ...] ) \n</code></pre></p>","tags":["datos","diccionarios","JSON"]},{"location":"datos/diccionarios/#combinar","title":"Combinar","text":"<p>Dos diccionarios se pueden unir mediante el operador <code>|</code>:</p> <pre><code>diccionario_juntos = diccionario_A | diccionario_B\n</code></pre>","tags":["datos","diccionarios","JSON"]},{"location":"datos/diccionarios/#actualizar","title":"Actualizar","text":"<p>Un diccionario puede ser actualizado y expandido con los pares clave-valor de otro mediante el uso del m\u00e9todo <code>update()</code>:</p> <pre><code>diccionario_original.update(diccionario_agregado)\n</code></pre> <p>El m\u00e9todo guarda los cambios de forma permanente.</p>","tags":["datos","diccionarios","JSON"]},{"location":"datos/diccionarios/#vaciar","title":"Vaciar","text":"<p>El m\u00e9todo <code>clear()</code> borra todos los datos internos del diccionario.</p> <pre><code>diccionario.clear()\n</code></pre>","tags":["datos","diccionarios","JSON"]},{"location":"datos/diccionarios/#archivos-json","title":"Archivos JSON","text":"<p>Los archivos JSON est\u00e1n dedicados al guardado de pares clave-valor. Los diccionarios pueden guardarse y leerse en estos archivos con ayuda del  m\u00f3dulo <code>json</code>.</p>","tags":["datos","diccionarios","JSON"]},{"location":"datos/funciones/","title":"Funciones para datos","text":"<p>Python incluye varias funciones predefinidas para manipular sus tipos de datos predefinidos. </p>","tags":["datos","funciones","tuplas","listas","diccionarios","sets"]},{"location":"datos/funciones/#identificar-elemento-type","title":"Identificar elemento - <code>type</code>","text":"<p>El tipo de datos de una variable o estructura puede consultarse con la funci\u00f3n <code>type()</code>:</p> tipo de datos<pre><code>tipo = type(elemento)  \nprint(tipo)\n</code></pre>","tags":["datos","funciones","tuplas","listas","diccionarios","sets"]},{"location":"datos/funciones/#enumerar-elementos-enumerate","title":"Enumerar elementos - <code>enumerate</code>","text":"<p>La funci\u00f3n <code>enumerate()</code> permite enumerar los elementos de una lista, convirti\u00e9ndolos a tupla. Require el uso de la funci\u00f3n <code>list()</code> para recuperar la data.</p> enumerate()<pre><code>lista = [1, \"hola\", True]\n\nobjeto = enumerate(lista) # tipo 'enumerate'\nenumerados = list(objeto) # conversion a lista\n\n# da '[(0, 1), (1, 'hola'), (2, True)]'\n</code></pre> <p>El \u00edndice inicial es <code>0</code> salvo indicaci\u00f3n contraria. El valor elegido como \u00edndice inicial se pasa como segundo valor de entrada para la funci\u00f3n <code>enumerate()</code>: </p> enumerate()<pre><code>lista = [1, \"hola\", True]\nindice_inicial = 27\n\nobjeto = enumerate(lista, indice_inicial )  # tipo 'enumerate'\nenumerados = list(objeto)   # conversion a lista\n\n# da '[(27, 1), (28, 'hola'), (29, True)]'\n</code></pre> <p>El resultado final  es una lista de tuplas que incluyen cada una un par indice-elemento. Ambos datos pueden extraerse f\u00e1cilmente con la cl\u00e1usula <code>for</code>:</p> Extraccion de valores<pre><code>for indice, elemento in enumerados:\n    print(f\"Indice: {indice}; elemento: {elemento}\")\n\n# texto en pantalla\n# 'Indice: 27; elemento: 1'\n# 'Indice: 28; elemento: hola'\n# 'Indice: 29; elemento: True'\n</code></pre> <p>M\u00e1s sobre la cl\u00e1usula <code>for</code>: control de flujo </p>","tags":["datos","funciones","tuplas","listas","diccionarios","sets"]},{"location":"datos/funciones/#ordenamiento-de-datos-sorted","title":"Ordenamiento de datos - <code>sorted</code>","text":"<p>La funci\u00f3n <code>sorted()</code> ordena los elementos de listas y diccionarios, por defecto de manera ascendente / alfab\u00e9tica. </p> <p>Ordenamiento de listas - sorted()<pre><code>lista_ordenada = sorted( lista                )   # orden ascendente\nlista_ordenada = sorted( lista, reverse=True  )   # orden descendente\nlista_ordenada = sorted( lista, key = funcion_ordenamiento )   # criterio de ordenamiento definido por funci\u00f3n\n</code></pre> Esta funci\u00f3n es muy similar al m\u00e9todo <code>sort()</code> de las listas, de hecho tiene los mismos argumentos de entrada (<code>reverse</code> y <code>key</code>). El resultado es una lista con los elementos.</p> <p>Esta funci\u00f3n tambi\u00e9n sirve para ordenar diccionarios:</p> Ordenamiento de diccionario - por clave<pre><code>lista_ordenada = sorted( diccionario                )   # orden ascendente\nlista_ordenada = sorted( diccionario, reverse=True  )   # orden descendente\nlista_ordenada = sorted( diccionario, key = funcion_ordenamiento )   # criterio de ordenamiento definido por funci\u00f3n\n</code></pre> <p>La funci\u00f3n presupone que el ordenamiento es por clave. Si en cambio se busca ordenar los elementos por valores hay que usar el m\u00e9todo <code>values()</code>:</p> Ordenamiento de diccionario - por valor<pre><code>lista_ordenada = sorted( diccionario.values()                )   # orden ascendente\nlista_ordenada = sorted( diccionario.values(), reverse=True  )   # orden descendente\nlista_ordenada = sorted( diccionario.values(), key = funcion_ordenamiento )   # criterio de ordenamiento definido por funci\u00f3n\n</code></pre> <p>El resultado en estos casos es una lista de tuplas con los pares clave-valor.</p>","tags":["datos","funciones","tuplas","listas","diccionarios","sets"]},{"location":"datos/funciones/#conversion-desde-string-eval","title":"Conversion desde string - <code>eval</code>","text":"<p>Para poder evaluar una variable <code>str</code> que representa sint\u00e1cticamente un tipo de datos (una lista, un diccionario, etc.)  se usa la funci\u00f3n <code>eval()</code></p> Funci\u00f3n eval()<pre><code>data = eval(string_datos)\n</code></pre> <p>Algunos ejemplos sencillos:</p> Funci\u00f3n eval() - lista<pre><code>texto = '[\"hola\", 3]'\ndata = eval(texto)\ntype(data)      # da  \"&lt;class 'list'&gt;\"\n</code></pre> Funci\u00f3n eval() - diccionario<pre><code>texto = '{\"valor\": 3}'\ndata = eval(texto)\ntype(data)      # da  &lt;class 'dict'&gt;\n</code></pre> <p>Esta funci\u00f3n es \u00fatil, por ejemplo, para interpretar un string de datos procedente de un archivo de texto o de una p\u00e1gina web.</p> <p>Ejecuci\u00f3n de c\u00f3digo</p> <p><code>eval()</code> interpreta el c\u00f3digo ingresado como texto y lo ejecuta, sin importar su objetivo real. Por ello deben extremarse las precauciones al usar esta funci\u00f3n, especialmente si los usuarios pueden pueden interactuar con el texto de entrada. </p>","tags":["datos","funciones","tuplas","listas","diccionarios","sets"]},{"location":"datos/funciones/#copia-de-datos-deepcopy","title":"Copia de datos - <code>deepcopy</code>","text":"<p>La funci\u00f3n <code>deepcopy</code> crea una r\u00e9plica estricta de los datos de entrada: listas, diccionarios, etc., copiando tambi\u00e9n sus datos y variables internos. Para su uso se requiere su importaci\u00f3n desde el m\u00f3dulo <code>copy</code>:</p> copia profunda<pre><code>from copy import deepcopy   # importacion \n\ncopia = deepcopy(original)   # copia profunda\n</code></pre> <p>De esta forma la copia se vuelve completamente independiente de la informaci\u00f3n de entrada.</p>","tags":["datos","funciones","tuplas","listas","diccionarios","sets"]},{"location":"datos/listas/","title":"Listas (<code>list</code>)","text":"","tags":["datos","listas"]},{"location":"datos/listas/#introduccion","title":"Introducci\u00f3n","text":"<p>La lista es una estructura de datos para almacenar m\u00faltiples valores en secuencia. Los valores internos se agrupan con los corchetes ( <code>[]</code> ) y se delimitan entre ellos con comas (<code>,</code>). Se habit\u00faa dejar un espacio entre cada coma y su elemento siguiente.</p> Formato de listas<pre><code>lista = [elemento_1, elemento_2,  ...]\n</code></pre> <p>Los datos pueden ser de distintos tipos y pueden ser modificados tanto en valor como en tipo. </p> <p>Ejemplo:</p> <p><pre><code>Listado = [1, \u201chola\u201d, 78.3]\n</code></pre> Para acceder a un elemento de la lista en base a su indice \u00e9ste se indica entre corchetes: <pre><code>elemento = lista[indice]\n</code></pre> El primer \u00edndice tiene valor cero. Si el \u00edndice iguala o supera la longitud de la lista da error. Dicha longitud de la lista se puede obtener con la funci\u00f3n <code>len()</code> (viene del ingl\u00e9s length): <pre><code>longitud = len(lista)\n</code></pre></p> <p>Indices negativos</p> <p>Se pueden usar indices negativos hasta la longitud m\u00e1xima: \u00edndice <code>-1</code> es el \u00faltimo valor, \u00edndice <code>-2</code> es el pen\u00faltimo elemento, etc.</p> <p>Ejemplo: si una lista tiene 10 elementos entonces el rango de \u00edndices permitidos va de -10 a 9.</p> <p>Las listas pueden crearse vac\u00edas para ser completadas m\u00e1s tarde: <pre><code>lista = []\n</code></pre></p> <p>Las listas pueden ser definidas tambi\u00e9n usando la funci\u00f3n <code>list()</code>. Esta funcion tambi\u00e9n permite convertir otros tipos de datos a lista.</p> <p>Ejemplo aplicacion: Matrices</p> <p>En matem\u00e1ticas las matrices son colecciones de valores de dos dimensiones o m\u00e1s y ayudan a representar sistemas de ecuaciones, transferencias (relaciones entrada-salida) de sistemas, etc. Para hacer una matriz de valores se la puede construir en base a una lista que contenga a m\u00faltiples listas internas  separadas con comas.  Ejemplo: matriz 2 x 3<pre><code>matriz=[ [v11, v12, v13] ,  [v21, v22, v23] ]   # lista de listas de valores\n</code></pre></p>","tags":["datos","listas"]},{"location":"datos/listas/#metodos-de-las-listas","title":"M\u00e9todos de las listas","text":"","tags":["datos","listas"]},{"location":"datos/listas/#agregar-elementos","title":"Agregar elementos","text":"<p>Para a\u00f1adir un nuevo elemento al final de la lista podemos usar el m\u00e9todo <code>append()</code>: <pre><code>lista.append(elemento)\n</code></pre></p> <p>Si buscamos a\u00f1adir un elemento en una posici\u00f3n particular podemos hacerlo indicando un valor indice dentro del m\u00e9todo <code>insert()</code>:</p> <pre><code>lista.insert(indice , elemento)\n</code></pre>","tags":["datos","listas"]},{"location":"datos/listas/#eliminar-elementos","title":"Eliminar elementos","text":"<p>Para eliminar un elemento puede usarse el m\u00e9todo <code>remove()</code>.\u00c9ste elimina la primera aparici\u00f3n del m\u00e9todo indicado. Si el elemento indicado no existe el m\u00e9todo devuelve error. <pre><code>lista.remove(elemento)\n</code></pre></p> <p>Para eliminar un elemento por \u00edndice y poder retornarlo se usa el m\u00e9todo <code>pop()</code>.Si el elemento indicado no existe el m\u00e9todo devuelve error.</p> <pre><code>elemento = lista.pop( )           # elimina  el \u00faltimo elemento\nelemento = lista.pop( indice )    # elimina el elemento por indice\n</code></pre>","tags":["datos","listas"]},{"location":"datos/listas/#busqueda","title":"B\u00fasqueda","text":"<p>La b\u00fasqueda de la posici\u00f3n de un elemento se hacer con el m\u00e9todo <code>index()</code>,el cual presupone que el elemento existe : <pre><code>indice = lista.index(elemento)\n</code></pre></p> <p>Tip: operador <code>in</code></p> <p>Para verificar la existencia de un elemento en la lista se puede usar el operador <code>in</code> el cual devuelve un valor booleano.</p> <p><pre><code>existe_elemento = elemento in lista     # valor l\u00f3gico: 'True' o 'False'\n</code></pre> Combinando este operador con el uso de condicionales se puede prevenir errores de ejecuci\u00f3n por intentar afectar elementos inexistentes.</p> <p>Ejemplo de uso: eliminar elemento</p> <p>1\u00ba aparicion<pre><code>if elemento in lista:\n    indice = lista.index(elemento) \n    lista.remove(elemento)\n</code></pre> por indice<pre><code>if indice &lt; len(lista):\n    elemento = lista.pop(indice) \n</code></pre></p>","tags":["datos","listas"]},{"location":"datos/listas/#modificar","title":"Modificar","text":"<p>Reescribir una posicion particular de la lista: <pre><code>lista[indice]  = nuevo_valor\n</code></pre></p>","tags":["datos","listas"]},{"location":"datos/listas/#contar-repeticiones","title":"Contar repeticiones","text":"<p>Contar repeticiones de un elemento: m\u00e9todo <code>count()</code> <pre><code>lista.count(elemento):\n</code></pre></p>","tags":["datos","listas"]},{"location":"datos/listas/#concatenar","title":"Concatenar","text":"<p>Concatenar una segunda lista al final de la primera: m\u00e9todo <code>extend()</code></p> <pre><code>lista_1.extend(lista_2)\n</code></pre>","tags":["datos","listas"]},{"location":"datos/listas/#borrado","title":"Borrado","text":"<p>Eliminar todo el contenido de la lista:</p> <pre><code>lista.clear()\n</code></pre>","tags":["datos","listas"]},{"location":"datos/listas/#reordenado","title":"Reordenado","text":"<p>Invertir el orden de los elementos (cambios persistentes): m\u00e9todo <code>reverse()</code> <pre><code>lista.reverse()\n</code></pre></p> <p>Ordenar los elementos (cambios persistentes): m\u00e9todo <code>sort()</code> <pre><code>lista.sort()  # Orden ascendente por defecto\nlista.sort( reverse = True)  # Orden descendente\nlista.sort( key = funcion_ordenamiento)  # Criterios personalizables mediante una funcion lambda\n</code></pre></p> <p>Los argumentos de entrada <code>reverse</code> y <code>key</code> permiten alterar el orden y el criterio de ordenamiento de la funci\u00f3n: </p> <ul> <li><code>reverse</code>: booleano que permite invertir el orden. Es <code>False</code> por defecto.   </li> <li><code>key</code>: funci\u00f3n para especificar el criterio de ordenamiento de los elementos. Esta funci\u00f3n debe aceptar un solo elemento de la lista como entrada. Por defecto es <code>None</code>.</li> </ul> <p>Ejemplos de uso:</p> <p>Ejemplos: ordenar una lista de strings con <code>sort()</code></p> ordenamiento alfab\u00e9tico<pre><code>lista = [\"aaa\",  \"cccc\", \"bb\"]\nlista.sort()\nprint(lista)        # '['aaa', 'bb', 'cccc']'\n</code></pre> ordenamiento alfab\u00e9tico inverso<pre><code>lista = [\"aaa\",  \"cccc\", \"bb\"]\nlista.sort(reverse = True)\nprint(lista)        # '['cccc', 'bb', 'aaa']'\n</code></pre> ordenamiento por longitud de caracteres<pre><code>lista = [\"aaa\", \"bb\", \"c\"]\nlista.sort(key=len)     # hace 'len( elemento)' \nprint(lista)        # '['c', 'bb', 'aaa']'\n</code></pre>","tags":["datos","listas"]},{"location":"datos/listas/#copia-y-referencia-de-listas","title":"Copia y referencia de listas","text":"<p>Python permite apuntar a una lista preexistente con una simple asignaci\u00f3n: </p> Apuntador a lista<pre><code>referencia = lista\n</code></pre> <p>Si los elementos de la lista original son modificados entonces estos cambios se ver\u00e1n replicados en la lista de salida.</p> <p>Ejemeplo: cambios sobre lista</p> <pre><code># creacion de lista original\noriginal = [ 1, \"hola\", True]\n\n# la nueva lista muestra el mismo contenido que la oiginal \nreferencia = original            #  referencia\nprint(referencia)       # '[1, 'hola', True]'\n\n# al modificar la lista original la lista de salida cambia tambi\u00e9n\noriginal[1] = \"chau\"\nprint(referencia)            # '[1, 'chau', True]'\n</code></pre> <p>Si se requiere independizar una lista de la otra y as\u00ed prevenir cambios imprevistos se recurre a la copia.</p> <p>Tip: copia de listas</p> <p>Las listas tienen varias opciones para la copia de los valores. Una de ellas es el m\u00e9todo <code>copy()</code>:</p> <p>m\u00e9todo copy()<pre><code>copia = original.copy()\n</code></pre> funci\u00f3n list()<pre><code>copia = list(original)\n</code></pre> slicing y comprensi\u00f3n<pre><code>copia = original[:]             # copia por slicing\ncopia = [i for i in original]   # copia por comprension\n</code></pre></p> <p>Copia superficial y copia profunda</p> <p>Los m\u00e9todos de copia descritos previamente son de copia superficial. Esto significa que se copian los valores de las variables internas, pero en caso de haber listas u otros tipos de datos en el interior \u00e9stos se pasar\u00e1n por referencia y por tanto ser\u00e1n susceptibles a cambios.</p> <p>La alternativa es la copia profunda, la cual copia recursivamente todo el contenido interno de la lista creando as\u00ed una r\u00e9plica totalmente independiente del original.</p> <p>En Python se implement\u00f3 para tal fin la funci\u00f3n <code>deepcopy()</code>:</p> funci\u00f3n deepcopy<pre><code>from copy import deepcopy   # importacion de la funcion\ncopia = deepcopy(original)   # copia profunda\n</code></pre>","tags":["datos","listas"]},{"location":"datos/listas/#listas-por-comprension-comprehension","title":"Listas por comprensi\u00f3n (comprehension)","text":"<p>Las listas por comprensi\u00f3n se basan en el uso de variables calculadas a partir de una iteraci\u00f3n. Algunos ejemplos de listas creadas a partir de un bucle <code>for</code> pueden ser:</p> Listas por comprensi\u00f3n<pre><code>lista_ascendente  = [ i             for i in range(valor_maximo) ]  \nlista_cuadrados   = [ i * i         for i in range(valor_maximo) ]\nlista_ambas       = [ (i, i  * i )  for i in range(valor_maximo) ]\n</code></pre>","tags":["datos","listas"]},{"location":"datos/sets/","title":"Conjuntos (<code>set</code>)","text":"<p>Los conjuntos o sets on una colecci\u00f3n de elementos no repetidos y no ordenados. Para definirlos se usa la funci\u00f3n <code>set()</code> la cual descarta los elementos repetidos:</p> <pre><code>conjunto = set( lista_elementos  )\n</code></pre> <p>Los conjuntos tambi\u00e9n pueden ser inicializados con llaves ( <code>{}</code> ):</p> <pre><code>conjunto = {elemento_1, elemento_2, ...}\n</code></pre> <p>Los elementos de los sets no pueden ser consultados por \u00edndice. </p> <p>Sets de strings</p> <p><code>set()</code> trata las variables string como si fueran vectores de letras y por ello las descompone, devolviendo el conjunto de letras. </p> <p>Ejemplo: <pre><code>conjunto = {\"hola\"}         # '{'hola'}'\nconjunto = set(\"hola\")      #'{'l', 'o', 'h', 'a'}' \n</code></pre> Para mantener los strings integros estos pueden agruparse dentro de una lista mediante corchetes: <pre><code>conjunto = set( [\"hola\"] )    # '{'hola'}'\n</code></pre></p>","tags":["datos","sets"]},{"location":"datos/sets/#metodos-de-los-sets","title":"M\u00e9todos de los Sets","text":"<p>Para a\u00f1adir y quitar elementos se puede usar los m\u00e9todos <code>add()</code> y <code>remove()</code>: <pre><code>set_1.add(elemento)\nset_1.remove(elemento)\n</code></pre></p> <p>Los conjuntos no pueden ser consultados por \u00edndice. Para vaciar por completo el conjunto se usa el m\u00e9todo  <code>clear()</code>:</p> <p><pre><code>set_1.clear()\n</code></pre> Para crear un conjunto que re\u00fana elementos de otros dos se puede usar el m\u00e9todo <code>union()</code></p> <pre><code>nuevo_set = set_1.union( set_2 )\n</code></pre> <p>Con el m\u00e9todo <code>difference()</code> se puede listar todos aquellos elementos del primer conjunto que no est\u00e9n compartidos con el segundo:</p> <pre><code>set_no_compartidos = set_1.difference(set_2)\n</code></pre>","tags":["datos","sets"]},{"location":"datos/sets/#operadores-de-los-sets","title":"Operadores de los Sets","text":"<p>Los conjuntos se pueden relacionar tambi\u00e9n con operadores:</p> Operacion Retorno Elementos Simbolo Uni\u00f3n todos <code>|</code> Intersecci\u00f3n comunes <code>&amp;</code> Diferencia no repetidos (del set izquierdo) <code>-</code> Diferencia Sim\u00e9trica no repetidos (ambos sets) <code>^</code> <p>Ejemplo aplicado: operaciones sobre sets</p> Ejemplo aplicado: operaciones sobre sets<pre><code># conjuntos de ejemplo\nset_1 = {\"A\", \"B\", \"C\" , 1}\nset_2 = {\"A\", 1, \"X\"}\n\n# operaciones\nunion                = set_1 | set_2    # {1, 'C', 'B', 'X', 'A'}\ninterseccion         = set_1 &amp; set_2    # {1, 'A'}\ndiferencia           = set_1 - set_2    # {'C', 'B'}\ndiferencia_simetrica = set_1 ^ set_2    # {'C', 'B', 'X'}\n</code></pre>","tags":["datos","sets"]},{"location":"datos/tipado/","title":"Tipado de datos","text":"<p>Los datos pueden ser tipados manualmente para ayudar a prevenir y corregir errores por incompatibilidad de tipos. </p> <p>Tipado d\u00e9bil</p> <p>Al igual que en el caso de las variables, el tipado manual es d\u00e9bil y no impide la ejecuci\u00f3n del programa en caso de encontrarse inconsistencias.</p>","tags":["datos","tuplas","listas","diccionarios","sets","tipado"]},{"location":"datos/tipado/#datos-simples","title":"Datos simples","text":"<p>La notaci\u00f3n b\u00e1sica es igual a la del tipado de variables :</p> <p>Notaci\u00f3n general:</p> Tipado simple<pre><code>dato: tipo_dato\n</code></pre> <p>Ejemplos:</p> Tipado elemental<pre><code>lista_textos:       list\ntupla_enteros:      tuple\nconjunto_textos:    set\ndiccionario:        dict     \n</code></pre>","tags":["datos","tuplas","listas","diccionarios","sets","tipado"]},{"location":"datos/tipado/#tipado-interno","title":"Tipado interno","text":"<p>Las variables internas de los datos tambi\u00e9n se pueden tipar. Para ello se a\u00f1ade el uso de corchetes para delimitar los tipos de variables internas.</p> Tipado de variables<pre><code>dato: tipo_dato[ tipo_variable_1, tipo_variable_2, ...]\n</code></pre> <p>Ejemplos</p> Tipado de variables: listas, tuplas y conjuntos<pre><code>lista_textos:       list[  str ] # lista de cadenas de caracteres\ntupla_enteros:      tuple[ int ] # tupla de numeros enteros\nconjunto_textos:    set[   str ] # set de cadenas de caracteres\n</code></pre> Tipado de variables: diccionario<pre><code>diccionario: dict[str, int]     # clave texto, valor entero\ndiccionario = {\n    \"primero\": 4,     # correcto\n    \"segundo\": 7.5,   # error: tipo valor flotante\n        27   : 10 ,    # error: tipo clave entera\n    }\n</code></pre>","tags":["datos","tuplas","listas","diccionarios","sets","tipado"]},{"location":"datos/tipado/#datos-compuestos","title":"Datos compuestos","text":"<p>El tipado tambi\u00e9n se puede usar para datos compuestos, agrupando los tipos internos mediante corchetes (<code>[]</code>). </p> <p>T\u00f3mese por ejemplo el tipado de un diccionario con claves de texto y listas de enteros como valor</p> <pre><code># tipado\ndiccionario_listas_enteros: dict[  str, list[int]  ]\n\n# uso\ndiccionario_listas_enteros = { \n    \"hola\": [1, 2, 7],          # correcto\n    \"chau\": [4,\"b\", 1],         # error:  string en la lista de valor \n    \"adios\": (4, 6) ,           # error: tupla como valor       \n    }\n</code></pre> <p>El tipado detallado para datos puede ser un desaf\u00edo debido a la variedad de datos y variables internos, especialmente cuando los datos son compuestos.</p>","tags":["datos","tuplas","listas","diccionarios","sets","tipado"]},{"location":"datos/tuplas/","title":"Tuplas (<code>tuple</code>)","text":"<p>Las tuplas son similares a las listas pero inmutables, es decir no permiten modificar sus contenidos internos. Las tuplas se indican con par\u00e9ntesis ( <code>()</code> ) :</p> Definicion de tuplas<pre><code>tupla = (elemento_1, elemento_2, ...)\n</code></pre> <p>Las tuplas tambi\u00e9n pueden definirse mediante la funci\u00f3n <code>tuple()</code>.</p> Definicion de tuplas<pre><code>tupla = tuple(elemento_1, elemento_2, ...)\n</code></pre> <p>conversi\u00f3n de lista a tupla</p> <pre><code>lista = [3, \"a\", False]     # 'list'\ntupla = tuple( lista )      # 'tuple'\n</code></pre> <p>Los m\u00e9todos m\u00e1s habituales para trabajar con tuplas son <code>count()</code> e <code>index()</code>, este \u00faltimo combinado con el operador <code>in</code>.</p>","tags":["datos","tuplas"]},{"location":"entornos/","title":"Entornos virtuales","text":"<p>Los entornos virtuales son instalaciones locales de los paquetes que permiten un mejor control de los paquetes y sus versiones, minimizando el riesgo de incompatibilidades entre paquetes, evitar problemas debidos a la actualizaci\u00f3n descuidada de los mismos, etc.</p>"},{"location":"entornos/#contenidos","title":"Contenidos","text":"<p>{{  pagetree(siblings) }}</p>"},{"location":"entornos/fundamentos/","title":"Fundamentos de los entornos virtuales","text":"<p>En esta secci\u00f3n se analiza de manera general el funcionamiento de los entornos virtuales.</p>"},{"location":"entornos/fundamentos/#creacion","title":"Creaci\u00f3n","text":"<p>Los entornos virtuales se construyen siguiendo los siguientes pasos:</p> <ol> <li>Crear un directorio (es decir, una carpeta) independiente de la instalaci\u00f3n de Python global, t\u00edpicamente en la ubicaci\u00f3n del proyecto o en una carpeta del usuario;</li> <li>Crear una r\u00e9plica del int\u00e9rprete de Python o un enlace simb\u00f3lico al mismo en el directorio.</li> <li>Instalar los paquetes requeridos en dicho directorio, permitiendo especificar qu\u00e9 versi\u00f3n se necesita de cada uno.</li> </ol>"},{"location":"entornos/fundamentos/#activacion","title":"Activaci\u00f3n","text":"<p>Los entornos virtuales requieren activaci\u00f3n para su uso. La activaci\u00f3n del entorno virtual consiste en modificar  en la sesi\u00f3n actual (enti\u00e9ndase la shell actual) la variable <code>PATH</code> del sistema operativo, coloc\u00e1ndole al comienzo la ruta del entorno virtual creado.</p> <p>De esta manera el sistema operativo dar\u00e1 prioridad a los ejecutables y paquetes del entorno virtual respecto a sus equivalentes globales.</p> <p>Por ejemplo: el int\u00e9rprete global de Python en un sistema GNU/Linux suele ser <code>/usr/bin/python</code>. Dicha ruta puede ser consultada en la shell Bash con el comando <code>which</code>:</p> <p>Bash - Ruta de Python<pre><code>which python\n</code></pre> Tras activar el entorno virtual, al repetir la consulta el resultado cambia a una ruta de la forma <code>RUTA_ENTORNO/bin/python</code>.</p> <p>Los cambios mencionados en la variable <code>PATH</code> pueden verificarse con el comando:</p> Bash - variable PATH<pre><code>echo $PATH\n</code></pre>"},{"location":"entornos/fundamentos/#eliminacion","title":"Eliminaci\u00f3n","text":"<p>Los entornos virtuales pueden ser eliminados f\u00e1cilmente mediante el borrado de su carpeta contenedora, sin afectar en modo alguno a los entornos de otros proyectos ni al int\u00e9rpete principal de Python.</p>"},{"location":"entornos/fundamentos/#ventajas-e-inconvenientes","title":"Ventajas e inconvenientes","text":"<p>El uso de entornos virtuales introduce algunas ventajas respecto al uso del int\u00e9rprete global:</p> <ul> <li>Cada proyecto puede tener una versi\u00f3n diferente de un mismo paquete, evitando conflictos de instalaci\u00f3n y de actualizaci\u00f3n;</li> <li>Se evita la carga de paquetes no incluidos en el proyecto, permitiendo entornos mejor controlados para cada proyecto;</li> <li>Es posible agregar enlaces simb\u00f3licos de m\u00faltiples versiones de Python, lo cual permite ejecutar el proyecto con distintas versiones del mismo.</li> </ul> <p>Como contrapartida aumenta el espacio en disco ocupado debido a que cada entorno virtual tiene su propia copia de los paquetes.</p>"},{"location":"entornos/venv/","title":"VENV","text":"<p><code>venv</code> es la herramienta integrada de Python para trabajar con entornos virtuales. Se incluye desde la versi\u00f3n 3.4.</p>"},{"location":"entornos/venv/#creacion-entorno-virtual","title":"Creacion entorno virtual","text":"<p>Se elige la ruta de un directorio donde se crear\u00e1 el entorno virtual: Creaci\u00f3n de entorno virtual<pre><code>py -m venv RUTA_ENTORNO\n</code></pre> Se crea autom\u00e1ticamente la carpeta contenedora y dentro de ella se crear\u00e1n todos los archivos y directorios auxiliares necesarios para empezar a trabajar, incluyendo el ejecutable de Python y el de PIP. Al\u00ed se guardar\u00e1n tambi\u00e9n los paquetes a a\u00f1adirse al proyecto.</p> <p>Es muy habitual crear el entorno virtual dentro del directorio del proyecto en una carpeta oculta llamada <code>venv</code>:</p> Creaci\u00f3n - dentro del proyecto<pre><code>py -m venv .venv\n</code></pre> \u00c1rbol de archivos <p>Cuando se crea el entorno virtual se crea una estructura de archivos similar a la siguiente:</p> <p><pre><code>.venv\n\u251c\u2500\u2500 bin                      \n\u2502       # rutinas de shell -&gt; comando 'deactivate'\n\u2502   \u251c\u2500\u2500 activate\n\u2502   \u251c\u2500\u2500 activate.csh\n\u2502   \u251c\u2500\u2500 activate.fish\n\u2502   \u251c\u2500\u2500 Activate.ps1\n\u2502       # clientes PIP\n\u2502   \u251c\u2500\u2500 pip\n\u2502   \u251c\u2500\u2500 pip3\n\u2502   \u251c\u2500\u2500 pip3.13\n\u2502       # enlaces simb\u00f3licos al int\u00e9rprete Python global\n\u2502   \u251c\u2500\u2500 python -&gt; /usr/bin/python\n\u2502   \u251c\u2500\u2500 python3 -&gt; python\n\u2502   \u2514\u2500\u2500 python3.13 -&gt; python\n\u2502\n\u251c\u2500\u2500 include\n\u2502   \u2514\u2500\u2500 python3.13            # (vac\u00edo)\n\u2502\n\u251c\u2500\u2500 lib\n\u2502   \u2514\u2500\u2500 python3.13\n\u2502       \u2514\u2500\u2500 site-packages     # paquetes instalados localmente\n\u2502           \u251c\u2500\u2500 pip                       # c\u00f3digo de paquete   \n\u2502           \u2514\u2500\u2500 pip-24.3.1.dist-info      # informaci\u00f3n de paquete\n\u2502\n\u251c\u2500\u2500 lib64 -&gt; lib\n\u2502\n\u2514\u2500\u2500 pyvenv.cfg                # configuraci\u00f3n del entorno actual (autom\u00e1tico)\n</code></pre>   donde la numeraci\u00f3n de PIP y de Python corresponde a la versi\u00f3n global disponible, en este ejemplo la 3.13.</p> <p>En el caso de Windows la carpeta <code>bin</code> es reemplazada por la carpeta <code>Scripts</code>. </p> <p>El archivo de configuraci\u00f3n <code>pyenv.cfg</code>   tiene un contenido como el siguiente:</p> <pre><code>home = /usr/bin\ninclude-system-site-packages = false\nversion = 3.13.3\nexecutable = /usr/bin/python3.13\ncommand = /usr/bin/python -m venv RUTA_PROYECTO/.venv\n</code></pre> <p>El diagrama de \u00e1rbol previo puede trazarse con el comando <code>tree</code> de Bash:</p> <pre><code>tree .venv  -L 4\n</code></pre>"},{"location":"entornos/venv/#activacion-entorno-virtual","title":"Activacion entorno virtual","text":"<p>La activaci\u00f3n consiste en ejecutar alguno de los scripts de nombre \"activate\". El script correcto depender\u00e1 de la terminal usada:</p> BashCMDPowerShell Activaci\u00f3n - Bash<pre><code>source RUTA_ENTORNO/bin/activate  # Linux y MacOs\nsource RUTA_ENTORNO/Scripts/activate  # Windows\n</code></pre> Activaci\u00f3n - CMD<pre><code>RUTA_ENTORNO\\Scripts\\activate.bat\n</code></pre> Activaci\u00f3n - PowerShell<pre><code>RUTA_ENTORNO\\Scripts\\Activate.ps1\n</code></pre> <p>En el caso de haber creado la carpeta oculta <code>venv</code>:</p> BashCMDPowerShell Activaci\u00f3n (local) - Bash<pre><code>source .venv/bin/activate  # Linux y MacOs\nsource .venv/Scripts/activate  # Windows\n</code></pre> Activaci\u00f3n (local) - CMD<pre><code>.venv\\Scripts\\activate.bat\n</code></pre> Activaci\u00f3n (local) - PowerShell<pre><code>.venv\\Scripts\\Activate.ps1\n</code></pre> <p>La activaci\u00f3n se verifica en Bash con el comando <code>which</code>:</p> <p>Consultar int\u00e9rprete actual<pre><code>which python\n</code></pre> cuyo resultado debe apuntar a alguno de los enlaces a Python internos:</p> Int\u00e9rprete actual<pre><code>RUTA_ENTORNO/bin/python   # Linux y MacOs\nRUTA_ENTORNO/Scripts/python   # Windows\n</code></pre> <p>Adem\u00e1s se debe verificar que PIP no detecta paquetes adicionales instalados:</p> <p>Paquetes preinstalados<pre><code>pip list\n</code></pre> dando lugar a una lista como esta: <pre><code>Package Version\n------- -------\npip     24.3.1\n</code></pre></p> <p>El entorno virtual permanecer\u00e1 activado hasta que se cierre la terminal o se desactive expl\u00edcitamente con el comando <code>deactivate</code>.</p>"},{"location":"entornos/venv/#instalar-paquetes-manualmente","title":"Instalar paquetes manualmente","text":"<p>Los paquetes se instalan con ayuda de PIP: Instalar paquete Python<pre><code>pip install nombre_paquete\n</code></pre> Hay que asegurarse primero que el entorno virtual est\u00e9 activado.</p> <p>La lista de paquetes disponibles localmente se realiza con el comando <code>list</code>: Listar paquetes<pre><code>pip list\n</code></pre> La lista puede guardarse en archivo: Guardar lista de paquetes<pre><code>pip list &gt; nombre_archivo.txt\n</code></pre></p>"},{"location":"entornos/venv/#anotar-e-instalar-dependencias","title":"Anotar e instalar dependencias","text":"<p>La versi\u00f3n actual de los paquetes se puede guardar en formato texto con el comando freeze: Registrar paquetes<pre><code># paquetes actuales y su versi\u00f3n actual\npip freeze &gt; requirements.txt\n</code></pre> En el ejemplo se guardan todos los nombres de paquete y sus versiones en el archivo de texto requirementsd.txt. Esta lista creada sirve para automatizar la descarga e instalaci\u00f3n de todos los paquetes necesarios con un \u00fanico comando:</p> <p>Instalar lista de paquetes<pre><code># instalacion desde archivo\npip  install -r requirements.txt\n</code></pre> En el contexto de un entorno virtual se minimiza la lista de paquetes a instalar, mejorando el control sobre el proyecto y evitando instalar dependencias in\u00fatiles para el proyecto actual.</p>"},{"location":"entornos/venv/#desactivar-entorno-virtual","title":"Desactivar entorno virtual","text":"<p>El entorno virtual se desactiva f\u00e1cilmente con el comando deactivate: Desactivar entorno<pre><code>deactivate\n</code></pre> De esta manera se retoma el uso de los paquetes globales de manera inmediata y el int\u00e9rprete de Python detectado vuelve a ser el global:</p> Int\u00e9rprete global<pre><code>which python      # En Linux: '/usr/bin/python'\n</code></pre>"},{"location":"entornos/venv/#uso-sin-activacion","title":"Uso sin activaci\u00f3n","text":"<p>El int\u00e9rprete local de Python puede ser ejecutado directamente a partir de su ruta. Invoc\u00e1ndolo directamente se ahorra el paso de activaci\u00f3n de su entorno virtual.</p> <p>Uso en Bash:</p> Sin activaci\u00f3n - interprete local<pre><code>RUTA_ENTORNO/bin/python   # Linux y MacOs\nRUTA_ENTORNO/Scripts/python   # Windows\n</code></pre>"},{"location":"entornos/venv/#eliminar-entorno-virtual","title":"Eliminar entorno virtual","text":"<p>El entorno virtual se elimina borrando los directorios auxiliares del entorno:</p> Eliminar entorno<pre><code>deactivate\nrm -r ruta_directorio  # eliminacion recursiva\n</code></pre> <p>Eliminar entorno</p> <p>Prestar atenci\u00f3n a no incluir c\u00f3digo del proyecto  adentro del directorio del entorno virtual. De otro modo, al eliminar el entorno virtual, tambi\u00e9n se eliminar\u00eda parte del c\u00f3digo de programa.</p>"},{"location":"entornos/venv/#referencias","title":"Referencias","text":"<p>Documentaci\u00f3n oficial - VENV</p> <p>PythonLand - How to Create, Activate, Deactivate, And Delete</p>"},{"location":"entornos/poetry/","title":"Poetry","text":"<p>Poetry es una herramienta para el manejo de dependencias y empaquetado en Python. Requiere la versi\u00f3n 3.9 de Python o superior para funcionar.</p>"},{"location":"entornos/poetry/#contenidos","title":"Contenidos","text":"<p>{{ pagetree(siblings) }}</p>"},{"location":"entornos/poetry/#referencias","title":"Referencias","text":"<p>Sitio oficial de Poetry</p>"},{"location":"entornos/poetry/crear/","title":"Crear proyecto","text":"<p>Poetry proporciona herramientas para crear nuevos proyectos y tambi\u00e9n puede ser agregado a un proyecto preexistente.</p>"},{"location":"entornos/poetry/crear/#archivo-toml","title":"Archivo TOML","text":"<p>El archivo <code>pyproject.toml</code> es el archivo de configuraci\u00f3n principal. En \u00e9l se incluye la informaci\u00f3n de las dependencias, las versiones de Python compatibles, la informaci\u00f3n del autor y su contacto, etc. Lo habitual es dejar a Poetry crear este archivo mediante comandos.</p>"},{"location":"entornos/poetry/crear/#proyecto-vacio","title":"Proyecto vac\u00edo","text":"<p>El comando <code>new</code> permite crear un nuevo proyecto, junto a algunos directorios:</p> Nuevo proyecto<pre><code>poetry new nuevo_proyecto\n</code></pre> <p>Tras ejecutar este comando se abre un men\u00fa interactivo en consola para configurar las opciones del proyecto una por una, informaci\u00f3n del autor y de contacto, licencia del proyecto, etc. Es mejor que el directorio del proyecto no exista previamente para asegurar que Poetry cree todos los archivos y carpetas internos.</p> <p>Este es el contenido generado:</p> Nuevo proyecto - arbol de archivos<pre><code>nuevo_proyecto\n\u251c\u2500\u2500 pyproject.toml\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 src\n\u2502   \u2514\u2500\u2500 nuevo_proyecto\n\u2502       \u2514\u2500\u2500 __init__.py\n\u2514\u2500\u2500 tests\n    \u2514\u2500\u2500 __init__.py\n</code></pre> <p>Poetry asume por default que el proyecto ser\u00e1 dedicado al desarrollo de paquetes, por eso crea un directorio con el mismo nombre de proyecto adentro de la carpeta <code>src</code>. El directorio <code>tests</code> est\u00e1 pensado para correr tests unitarios mediante paquetes como Pytest.</p> <p>Todos los archivos se crean vac\u00edos, excepto el archivo <code>pyproject.toml</code> el cual es configurado interactivamente.</p> <p>src-layout</p> <p>El esquema de archivos seguido por Poetry es llamado comunmente src-layout.</p> <p>El archivo TOML resultante tiene un contenido como este:</p> <pre><code>[project]\nname = \"nuevo_proyecto\"\nversion = \"0.1.0\"\ndescription = \"\"\nauthors = [{name = \"\", email = \"yo@miserver.me\"}]\nreadme = \"README.md\"\nrequires-python = \"&gt;=3.13\"\ndependencies = [\n]\n\n[tool.poetry]\npackages = [{include = \"paquete\", from = \"src\"}]\n\n[build-system]\nrequires = [\"poetry-core&gt;=2.0.0,&lt;3.0.0\"]\nbuild-backend = \"poetry.core.masonry.api\"\n</code></pre> <p>Los campos creados pueden ser modificados manualmente. Tambi\u00e9n pueden agregarse los campos adicionales que se indican en la  documentaci\u00f3n oficial.</p>"},{"location":"entornos/poetry/crear/#crear-toml","title":"Crear TOML","text":"<p>Para crear solamente el archivo <code>pyproject.toml</code> dentro del directorio actual se usa el comando <code>init</code>:</p> Nuevo archivo de proyecto<pre><code>poetry init\n</code></pre> <p>Tras ejecutar este comando se abre el mismo men\u00fa interactivo que en el caso del comando <code>new</code>. La organizaci\u00f3n de los archivos queda en este caso a discreci\u00f3n del desarrollador.</p>"},{"location":"entornos/poetry/dependencias/","title":"Gesti\u00f3n de dependencias","text":"<p>Los paquetes y otras dependencias son gestionadas por Poetry mediante comandos espec\u00edficos.</p>"},{"location":"entornos/poetry/dependencias/#agregado","title":"Agregado","text":"<p>Para agregar un nuevo paquete al proyecto se usa el comando <code>add</code>:</p> <p>Paquetes - agregar<pre><code>poetry add nombre_paquete\n</code></pre> Este comando incluye el paquete autom\u00e1ticamente como dependencia en el archivo TOML.</p> <p>Este comando tambi\u00e9n:</p> <ul> <li>crea un entorno para el proyecto actual si a\u00fan no existe;</li> <li>instala el paquete en el entorno actual.</li> </ul> <p>Poetry admite tambi\u00e9n el agregado de paquetes ubicados en el sistema de archivos en base a su ruta relativa:</p> Paquetes - agregar (local)<pre><code>poetry add ruta-pack-local/                              # carpeta del paquete\npoetry add ruta-pack-local/dist/pack-local-0.1.0.tar.gz  # comprimido\npoetry add ruta-pack-local/dist/pack-local-0.1.0.whl     # 'wheel'\n</code></pre> <p>y tambi\u00e9n se pueden agregar dependencias remotas con repositorios Git, admitiendo la URL correspondiente en varios formatos:</p> Paquetes - agregar (remoto)<pre><code>poetry add git+https://github.com/autor/paquete-remoto.git    # HTTPS\npoetry add git+ssh://git@github.com/autor/paquete-remoto.git  # SSH\n</code></pre> <p>M\u00e1s detalles en la p\u00e1gina oficial de Poetry.</p> <p>Opci\u00f3n editable</p> <p>Agregando la opci\u00f3n <code>editable</code> a la incorporaci\u00f3n de paquetes se habilita el modo de desarrollo de dicho paquete. Con este modo se consigue que los cambios en el c\u00f3digo fuente del paquete se vean instant\u00e1enamente en el proyecto que lo incorpora sin necesidad de reinstaci\u00f3n.</p> <p>Uso: </p> Paquetes - modo editable<pre><code>poetry add --editable ruta-pack-local/ \n</code></pre> <p>Ubicacion de entornos</p> <p>A diferencia de VENV, Poetry crea todos los entornos locales en una misma carpeta dedicada a tal fin. Por ejemplo en Linux dicha carpeta suele ser: <code>CARPETA_USUARIO/.cache/pypoetry/virtualenv</code></p>"},{"location":"entornos/poetry/dependencias/#especificacion-de-versiones","title":"Especificacion de versiones","text":"<p>Las versiones de cada paquete se pueden asignar mediante el uso de restricciones (constraints) junto al comando <code>add</code>, los cuales se enumeran a continuaci\u00f3n:</p> Simbolo Significado Ejemplo <code>^</code> S\u00f3lo actualizaciones menores y patches <code>n.x.x</code> <code>~</code> S\u00f3lo actualizaciones patch <code>n.m.x</code> <code>@</code> Version exacta <code>n.m.o</code> <p>Ejemplos de uso: definiendo versiones del paquete cosm\u00e9tico <code>rich</code>:</p> Paquete - agregar (ejemplos)<pre><code>poetry add rich^13.0       # versiones 13.0.0 a 14.0.0 \npoetry add rich~13.0       # versiones 13.0.0 a 13.1.0 \npoetry add rich@13.0.1     # s\u00f3lo versi\u00f3n 13.1.0\n</code></pre> <p>Los cambios se ver\u00e1n reflejados en el archivo TOML. Por ejemplo, si se elige especificar s\u00f3lo la versi\u00f3n mayor del paquete:</p> <p>Paquetes - agregar version mayor<pre><code>poetry add rich^13.0 \n</code></pre> Entonces el rango se indicar\u00e1 en el archivo <code>pyproject.toml</code> entre par\u00e9ntesis bajo la secci\u00f3n <code>[project]</code>:</p> TOML - dependencias<pre><code># archivo 'pyproject.toml'\n[project]\ndependencies = [\n    \"rich (&gt;=13.0,&lt;14.0)\",\n]\n</code></pre>"},{"location":"entornos/poetry/dependencias/#actualizacion","title":"Actualizaci\u00f3n","text":"<p>Se dispone del comando <code>update</code> para actualizar los paquetes de acuerdo a los rangos de versiones predefinidos en el proyecto.</p> Paquetes - actualizaci\u00f3n<pre><code>poetry update\n</code></pre>"},{"location":"entornos/poetry/dependencias/#remocion","title":"Remoci\u00f3n","text":"<p>El paquete se elimina del proyecto con el comando <code>remove</code>:</p> <p>Paquetes - remover<pre><code>poetry remove nombre_paquete\n</code></pre> el cual desinstala el paquete del entorno actual y lo borra de la lista de dependencias.</p>"},{"location":"entornos/poetry/ejecutar/","title":"Ejecuci\u00f3n","text":"<p>Aqu\u00ed se explica c\u00f3mo ejecutar los programas gestionados por Poetry de la manera m\u00e1s simple posible.</p>"},{"location":"entornos/poetry/ejecutar/#ejecucion-directa","title":"Ejecuci\u00f3n directa","text":"<p>El comando <code>run</code> de Poetry permite ejecutar las rutinas del proyecto  al tiempo que carga las dependencias:</p> Entorno virtual - comando run<pre><code>poetry run python nombre_rutina\n</code></pre>"},{"location":"entornos/poetry/ejecutar/#ejecucion-desde-entorno-virtual","title":"Ejecuci\u00f3n desde entorno virtual","text":"<p>El entorno virtual de Poetry se activa en Bash con la siguiente expresi\u00f3n:</p> Entorno virtual - activar<pre><code>eval $(poetry env activate)\n</code></pre> <p>de esta manera el int\u00e9rprete de Python puede ser llamado directamente:</p> Entorno virtual - ejecutar rutina<pre><code>python nombre_rutina\n</code></pre> <p>Por \u00faltimo, se dispone del comando <code>deactivate</code> para deshabilitar el entorno actual:</p> Entorno virtual - desactivar<pre><code>deactivate\n</code></pre> <p>Entornos VENV</p> <p>Si en la carpeta del proyecto actual hay un entorno virtual creado por VENV es posible que se active este \u00faltimo en vez del entorno virtual gestionado por Poetry.</p>"},{"location":"entornos/poetry/empaquetar/","title":"Empaquetar y publicar","text":"<p>Aqu\u00ed se repasan los comandos m\u00e1s importantes para crear paquetes distribuibles y publicarlos. </p>"},{"location":"entornos/poetry/empaquetar/#construir","title":"Construir","text":"<p>El comando <code>build</code> empaqueta el contenido del proyecto:</p> Empaquetado - construir<pre><code>poetry build\n</code></pre> <p>creando la carpeta <code>dist</code> con dos distribuibles:</p> <ul> <li>un archivo comprimido TAR.GZ;</li> <li>un archivo .WHL (Wheel Package)</li> </ul> <p>Agregando la opci\u00f3n <code>clean</code> se asegura que se limpia el directorio de salida antes de crear los nuevos paquetes:</p> Empaquetado - construir (post limpieza)<pre><code>poetry build --clean\n</code></pre>"},{"location":"entornos/poetry/empaquetar/#publicar","title":"Publicar","text":"<p>Las subidas a PyPI se hacen con el comando <code>publish</code>:</p> Empaquetado - publicar<pre><code>poetry publish   # subida en PyPI\n</code></pre> <p>Las configuraciones de Poetry respecto al acceso y la publicaci\u00f3n de paquetes se explican en la seccion Repositories de su p\u00e1gina oficial.</p>"},{"location":"entornos/poetry/entornos/","title":"Gesti\u00f3n de entornos virtuales","text":"<p>Poetry admite gestionar m\u00faltiples entornos de ejecuci\u00f3n para un mismo proyecto. Cada entorno virtual del proyecto viene vinculado a un int\u00e9rprete de Python disponible en el sistema, t\u00edpicamente de distintas versiones. Esto significa que Poetry permite crear un entorno virtual del proyecto para cada versi\u00f3n del int\u00e9rprete de Python a utilizar.</p>"},{"location":"entornos/poetry/entornos/#comando-python","title":"Comando <code>python</code>","text":"<p>Poetry incluye su propio gestor de int\u00e9rpretes Python desde su versi\u00f3n 2.1.0.</p>"},{"location":"entornos/poetry/entornos/#instalacion","title":"Instalaci\u00f3n","text":"<p>Estos int\u00e9rpretes se gestionan con el comando <code>python</code>:  Versi\u00f3n de Python - instalar<pre><code>poetry python install TAG_VERSION\n</code></pre></p> <p>Este comando permite disponer de int\u00e9rpretes Python desde su versi\u00f3n 3.7.x en adelante. Estos int\u00e9rpretes son basados en CPython, es decir son int\u00e9rpretes escritos en lenguaje C y luego compilados.</p> <p>Por ejemplo, para instalar la versi\u00f3n 3.9 de Python el comando ser\u00eda:</p> Versi\u00f3n de Python - ejemplo<pre><code>poetry python install 3.9\n</code></pre>"},{"location":"entornos/poetry/entornos/#consulta","title":"Consulta","text":"<p>La lista de versiones de Python descargadas y sus rutas se consulta con el comando <code>list</code>:</p> Versi\u00f3n de Python - listar<pre><code>poetry python list\n</code></pre> <p>Las versiones descargadas por Poetry se guardan en:</p> GNU/LinuxWindows <pre><code># directorio '.local'\nCARPETA_USUARIO/.local/share/pypoetry/python\n</code></pre> <pre><code>\n</code></pre>"},{"location":"entornos/poetry/entornos/#eliminacion","title":"Eliminaci\u00f3n","text":"<p>La desinstalaci\u00f3n de una versi\u00f3n espec\u00edfica de Python se realiza con el comando <code>remove</code>:</p> Versi\u00f3n de Python - eliminar<pre><code>poetry python remove TAG_VERSION\n</code></pre>"},{"location":"entornos/poetry/entornos/#uso-con-pyenv","title":"Uso con Pyenv","text":"<p>Poetry tambi\u00e9n puede ser usado junto con el plugin pyenv para elegir una versi\u00f3n espec\u00edfica de Python para el proyecto.</p> <p>Versi\u00f3n de Python - con Pyenv<pre><code>pyenv install 3.9.8     # instalar Python 3.9.8\npyenv local 3.9.8       # elegir Python 3.9.8\n</code></pre> Esta opci\u00f3n es \u00fatil para sistemas con versiones antiguas de Poetry. </p>"},{"location":"entornos/poetry/entornos/#entornos-de-poetry","title":"Entornos de Poetry","text":""},{"location":"entornos/poetry/entornos/#crear-nuevo-entorno","title":"Crear nuevo entorno","text":"<p>Mediante el comando <code>use</code> se puede elegir una versi\u00f3n de Python disponible. Con este comando, Poetry crea un nuevo entorno para el proyecto y en \u00e9l crea enlaces simb\u00f3licos al int\u00e9rprete de Python elegido. </p> <p>El int\u00e9rprete se elige por su ruta completa, por su nombre o simplemente por su n\u00famero de versi\u00f3n:</p> Entorno - crear y usar<pre><code>poetry env use ruta_interprete/bin/python3.9    # ruta completa\npoetry env use python3.9                        # nombre y versi\u00f3n\npoetry env use 3.9                              # s\u00f3lo versi\u00f3n\n</code></pre>"},{"location":"entornos/poetry/entornos/#listar-entornos","title":"Listar entornos","text":"<p>los entornos ya creados se consultan con el comando <code>list</code>:</p> Entorno - listado<pre><code>poetry env list\n</code></pre> <p>Este comando s\u00f3lo muestra los entornos correspondientes al proyecto actual, es decir no muestra los entornos correspondientes a otros proyectos.</p> <p>Las rutas en el sistema de cada entorno se consultan agregando la opci\u00f3n <code>--full-path</code>: </p> Entorno - rutas de entornos<pre><code>poetry env list --full-path\n</code></pre> <p>Los entornos virtuales ya existentes se encuentran en la ruta:</p> GNU/LinuxWindows <pre><code># directorio '.cache'\nCARPETA_USUARIO/.cache/pypoetry/virtualenvs/\n</code></pre> <pre><code>\n</code></pre>"},{"location":"entornos/poetry/entornos/#instalar-dependencias","title":"Instalar dependencias","text":"<p>Los paquetes requeridos se descargan e instalan  en el entorno actual con el comando <code>install</code>:</p> Entorno - instalar dependencias<pre><code>poetry install\n</code></pre> <p>Este comando instala todos los paquetes indicados en el proyecto.</p> <p>Empaquetado</p> <p>Este comando requiere que el empaquetado est\u00e9 deshabilitado. Para deshabilitar el empaquetado agregar al archivo TOML la secci\u00f3n <code>[tool.poetry]</code> y debajo deshabilitar el <code>package-mode</code>:</p> <pre><code>[tool.poetry]\npackage-mode = false\n</code></pre> <p>O en su defecto corregir el valor de <code>package-mode</code> por <code>false</code>.</p>"},{"location":"entornos/poetry/entornos/#informacion","title":"Informaci\u00f3n","text":"<p>La informaci\u00f3n del entorno actual se lee con el argumento <code>info</code>:</p> Entorno - informaci\u00f3n<pre><code>poetry env info                 # toda la informaci\u00f3n\npoetry env info --executable    # ruta al interprete Python\n</code></pre>"},{"location":"entornos/poetry/entornos/#eliminar","title":"Eliminar","text":"<p>Los entornos se eliminan en base al n\u00famero de versi\u00f3n de Python que usan:</p> Entorno - borrar<pre><code>poetry env remove 3.13       # entorno actual\n</code></pre> <p>o tambi\u00e9n pueden ser eliminados todos juntos:</p> Entorno - borrar todos<pre><code>poetry env remove --all  # todos\n</code></pre> <p>Nuevamente, estos comandos s\u00f3lo pueden eliminar entornos virtuales del actual proyecto.</p>"},{"location":"entornos/poetry/entrypoints/","title":"Crear comandos","text":"<p>En esta secci\u00f3n se ven las opciones que da Poetry para crear comandos propios (\"entrypoints\") del proyecto o paquete actual.</p>"},{"location":"entornos/poetry/entrypoints/#definir-comandos","title":"Definir comandos","text":"<p>Los entrypoints se crean editando manualmente  el archivo TOML del proyecto. Los comandos se especifican dentro de secciones espec\u00edficas, en base a una asignaci\u00f3n comando - namespace. </p>"},{"location":"entornos/poetry/entrypoints/#cli","title":"CLI","text":"<p>La Command Line Interface es  la interfaz mostrada al usuario desde terminal.</p> <p>A los comandos de terminal les corresponde la secci\u00f3n <code>[project.scripts]</code>:</p> Entrypoints - CLI<pre><code># archivo 'pyproject.toml'\n[project.scripts]\nnombre-cli = 'paquete.modulo-cli:funcion_comando'\n</code></pre> <p>A cada comando implementado le corresponde un namespace que represente a la funci\u00f3n a ejecutar.</p>"},{"location":"entornos/poetry/entrypoints/#gui","title":"GUI","text":"<p>Estos scripts funcionan de manera an\u00e1loga a los comandos de CLI, s\u00f3lo que se usan habitualmente para llamar a una interfaz gr\u00e1fica del programa.</p> <p>A estos comandos les corresponde la secci\u00f3n <code>[project.gui-scripts]</code>:</p> Entrypoints - GUI<pre><code># archivo 'pyproject.toml'\n[project.gui-scripts]\nnombre-gui = 'paquete.modulo-gui:funcion_llamada'\n</code></pre> <p>En este caso tambi\u00e9n se requiere indicar un namespace, que en este caso es  el de la funci\u00f3n que llame a la interfaz gr\u00e1fica.</p>"},{"location":"entornos/poetry/entrypoints/#archivos-precompilados","title":"Archivos precompilados","text":"<p>En el caso de requerirse el agregado de archivos ya compilados (por ejemplo, ejecutables) esto se realiza con el campo <code>[tool.poetry.scripts]</code>:</p> Entrypoints - Ejecutables<pre><code># archivo 'pyproject.toml'\n[tool.poetry.scripts]\nejecutable = { reference = \"archivo.exe\", type = \"file\" }\n</code></pre>"},{"location":"entornos/poetry/entrypoints/#implementar-comandos","title":"Implementar comandos","text":"<p>Los comandos se crean al llamar al comando <code>install</code> de Poetry:</p> Entrypoints - Actualizar proyecto<pre><code>poetry install\n</code></pre> <p>Este comando crear\u00e1 las rutinas auxiliares (los scripts) correspondientes a cada comando y los ubicar\u00e1 dentro del entorno virtual actual al lado del int\u00e9rprete de Python, dentro de la carpeta <code>bin</code> o <code>Scripts</code> seg\u00fan corresponda. S\u00f3lo es necesario llamarlo tras alterar el archivo TOML: los scripts implementados son meros envoltorios gen\u00e9ricos (wrappers) para las funciones de Python y, por tanto, los cambios en el c\u00f3digo Python del paquete se ven reflejados autom\u00e1ticamente.</p>"},{"location":"entornos/poetry/entrypoints/#ejecucion","title":"Ejecuci\u00f3n","text":"<p>Los scripts creados son autoejecutables, por tanto puede ser llamados sin necesidad de activar el entorno virtual expl\u00edcitamente:</p> Comando - entorno desactivado<pre><code>cd ruta_script\n./nombre-comando\n</code></pre> <p>Si en cambio el entorno virtual est\u00e1 activado entonces a los comandos se los puede llamar por su nombre directamente:</p> Comando - entorno activado<pre><code>nombre-comando\n</code></pre> <p>Uso de enlaces</p> <p>Al comando creado se le puede crear un enlace simb\u00f3lico (algo parecido a un enlace directo de Windows) mientras el entorno virtual est\u00e1 activado:</p> <p>Comando - enlace simb\u00f3lico<pre><code># activar entorno virtual\neval $(poetry env activate)\n# consultar ruta\nRUTA=`which nombre-comando`\necho $RUTA\n# crear enlace simb\u00f3lico\nln -s $RUTA ubicacion_enlace/nombre_enlace\n</code></pre> De all\u00ed en m\u00e1s, el comando se podr\u00e1 ejecutar llamando al enlace simb\u00f3lico y sin necesidad de activar previamente su entorno virtual:</p> Comando - ejecutar desde enlace<pre><code># activar entorno virtual\ncd ubicacion_enlace\n./nombre_enlace\n</code></pre>"},{"location":"entornos/poetry/entrypoints/#ejemplo-de-uso","title":"Ejemplo de uso","text":"<p>Se crea un proyecto nuevo con Poetry:</p> Comando - nuevo proyecto<pre><code>poetry new paquete\n</code></pre> <p>La estructura de archivos creados es la siguiente:</p> Comando - arbol del proyecto<pre><code>paquete\n\u251c\u2500\u2500 pyproject.toml\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 src\n\u2502   \u2514\u2500\u2500 paquete\n\u2502       \u2514\u2500\u2500  __init__.py\n\u2514\u2500\u2500 tests\n    \u2514\u2500\u2500 __init__.py\n</code></pre> <p>En el archivo <code>__init__.py</code> se crea una funci\u00f3n para ser ejecutada por consola:</p> Comando - crear funci\u00f3n<pre><code># archivo '__init__.py'\ndef texto_consola(argumentos):\n    print(\"Comando CLI correcto\")\n</code></pre> <p>Esta funci\u00f3n es agregada al archivo TOML bajo la secci\u00f3n <code>project.scripts</code> y se le da un nombre de comando, que en este ejemplo  es llamado <code>paquete-cli</code>:</p> Comando - configurar archivo TOML<pre><code># archivo 'pyproject.toml'\n[project.scripts]\npaquete-cli = \"paquete:texto_consola\"\n</code></pre> <p>En este contexto <code>paquete:texto_consola</code> es el namespace correspondiente a la funci\u00f3n de Python que debe ejecutarse. Al actualizar la configuraci\u00f3n del entorno virtual:</p> Comando - Actualizar proyecto<pre><code>poetry install\n</code></pre> <p>se observa que se crea un script ejecutable con el nombre de comando elegido, justo al lado del int\u00e9rprete de Python:</p> Comando - \u00e1rbol del entorno virtual<pre><code>ruta_entorno\n\u251c\u2500\u2500 bin\n\u2502   \u251c\u2500\u2500 activate\n\u2502   \u251c\u2500\u2500 activate.csh\n\u2502   \u251c\u2500\u2500 activate.fish\n\u2502   \u251c\u2500\u2500 activate.nu\n\u2502   \u251c\u2500\u2500 activate.ps1\n\u2502   \u251c\u2500\u2500 activate_this.py\n\u2502   \u251c\u2500\u2500 paquete-cli\n\u2502   \u251c\u2500\u2500 pip\n\u2502   \u251c\u2500\u2500 pip3\n\u2502   \u251c\u2500\u2500 pip-3.13\n\u2502   \u251c\u2500\u2500 pip3.13\n\u2502   \u251c\u2500\u2500 python -&gt; /usr/bin/python3.13\n\u2502   \u251c\u2500\u2500 python3 -&gt; python\n\u2502   \u2514\u2500\u2500 python3.13 -&gt; python\n\u251c\u2500\u2500 CACHEDIR.TAG\n\u251c\u2500\u2500 lib\n\u2502   \u2514\u2500\u2500 python3.13\n\u251c\u2500\u2500 lib64\n\u2502   \u2514\u2500\u2500 python3.13\n\u2514\u2500\u2500 pyvenv.cfg\n</code></pre> <p>Este script podr\u00e1 ser llamado por su nombre desde la terminal para ser ejecutado:</p> Comando - llamar<pre><code>paquete-cli\n</code></pre> <p>De esta forma el comando queda implementado.</p> <p>wrapper autom\u00e1tico</p> <p>El script creado del comando es un mero envoltorio para la funci\u00f3n indicada en el archivo TOML y tiene esta forma:</p> paquete-cli<pre><code>#!HOME_USUARIO/.cache/pypoetry/virtualenvs/paquete-Hah8LhV6-py3.13/bin/python\nimport sys\nfrom paquete import texto_consola\n\nif __name__ == '__main__':\n    sys.exit(texto_consola())\n</code></pre>"},{"location":"entornos/poetry/entrypoints/#referencias","title":"Referencias","text":"<p>The pyproject.toml file - scripts</p>"},{"location":"entornos/poetry/grupos/","title":"Grupos de dependencias","text":"<p>Poetry permite clasificar las dependencias de un proyecto en varios grupos. Por ejemplo, se puede crear en un mismo proyecto:</p> <ul> <li>un grupo \"dev\" con las actualizaciones m\u00e1s recientes; </li> <li>un grupo \"stable\" para despliegue, con dependencias m\u00e1s antiguas pero mejor probadas ; </li> <li>un grupo \"test\" para hacer pruebas unitarias, rutinas de integraci\u00f3n continua (CI), etc;</li> <li>etc.</li> </ul> <p>Esto permite cambiar r\u00e1pidamente los paquetes instalados en un mismo entorno en funci\u00f3n de las necesidades del momento y evitar instalar dependencias innecesarias.</p>"},{"location":"entornos/poetry/grupos/#definicion","title":"Definici\u00f3n","text":"<p>Los paquetes pueden repartirse en varios grupos  agregando la opci\u00f3n <code>group</code> en el agregado:</p> <pre><code>poetry add --group nombre_grupo  paquete_1 paquete_2 ...\n</code></pre> <p>Ahora las dependencias aparecer\u00e1n marcadas en el archivo TOML como parte de un grupo:</p> <pre><code>[tool.poetry.nombre_grupo.dependencies]\npaquete_1 = ^1.2.3\npaquete_2 = ^5.3.7\n...\n</code></pre> <p>Para que la instalacion de estos paquetes sea opcional hay que modificar manualmente el archivo TOML y agregar el parametro <code>optional</code>:</p> <pre><code>[tool.poetry.nombre_grupo.ui]\noptional = true\n[tool.poetry.nombre_grupo.dependencies]\npaquete_1 = ^1.2.3\npaquete_2 = ^5.3.7\n...\n</code></pre>"},{"location":"entornos/poetry/grupos/#instalacion","title":"Instalaci\u00f3n","text":"<p>la instalaci\u00f3n se realiza con el comando <code>install</code>, al cual se le indica la opci\u00f3n de instalaci\u00f3n requerida y el grupo de referencia.</p> <p>Instalar grupos opcionales:</p> <pre><code>poetry install --with nombre_grupo\n</code></pre> <p>Excluir grupos predefinidos:</p> <pre><code>poetry install --without nombre_grupo\n</code></pre> <p>Instalar s\u00f3lo grupos espec\u00edficos:</p> <pre><code>poetry install --only nombre_grupo\n</code></pre> <p>Instalar s\u00f3lo dependencias no agrupadas (<code>main</code>)</p> <pre><code>poetry install --only main\n</code></pre>"},{"location":"entornos/poetry/grupos/#actualizacion","title":"Actualizaci\u00f3n","text":"<p>Se actualizan los paquetes en base al archivo TOML presente. </p> <pre><code>poetry update\n</code></pre>"},{"location":"entornos/poetry/grupos/#remocion","title":"Remoci\u00f3n","text":"<p>Los paquetes pueden ser removidos de los grupos mediante el uso del comando <code>remove</code>:</p> <pre><code>poetry remove nombre_paquete --group  nombre_grupo\n</code></pre>"},{"location":"entornos/poetry/instalacion/","title":"Instalaci\u00f3n","text":"<p>Poetry tiene m\u00faltiples opciones de instalaci\u00f3n, de las cuales se muestran las m\u00e1s importantes.</p>"},{"location":"entornos/poetry/instalacion/#instalador-oficial","title":"Instalador oficial","text":"BashPowershell <p>Instalaci\u00f3n:</p> Instalador oficial - instalar<pre><code>curl -sSL https://install.python-poetry.org | python3 -\n</code></pre> <p>Desinstalaci\u00f3n</p> Instalador oficial - desinstalar<pre><code>curl -sSL https://install.python-poetry.org | python3 - --uninstall\n</code></pre> Instalador oficial - instalar<pre><code>(Invoke-WebRequest -Uri https://install.python-poetry.org -UseBasicParsing).Content | py -\n</code></pre> <p>M\u00e1s detalles: Usando el instalador oficial</p>"},{"location":"entornos/poetry/instalacion/#como-paquete","title":"Como paquete","text":"<p>Poetry puede ser instalado como un paquete de Python m\u00e1s mediante el uso de gestores como PIP y PIPX:</p> <p>Instalaci\u00f3n:</p> Manejo como paquete - instalaci\u00f3n<pre><code>pip install poetry\n</code></pre> <p>Actualizaci\u00f3n:</p> Manejo como paquete - actualizaci\u00f3n<pre><code>pip upgrade poetry\n</code></pre> <p>Desinstalaci\u00f3n:</p> Manejo como paquete - desinstalaci\u00f3n<pre><code>pip uninstall poetry\n</code></pre> <p>Entornos aislados</p> <p>En este caso, es prudente instalar Poetry en un entorno virtual exclusivo, para prevenir conflictos con las dependencias de otros paquetes y posibles errores debidos a actualizaciones descuidadas.</p> <p>PIPX</p> <p>PIPX es una vers\u00edon modificada de PIP con manejo mejorado de los paquetes. </p> <p>M\u00e1s detalles: Instalando con PIPX</p>"},{"location":"entornos/poetry/instalacion/#desde-repositorios-linux","title":"Desde repositorios Linux","text":"<p>En el caso de plataformas GNU/Linux se dispone de versiones instalables con el gestor de paqeutes oficial de la distribuci\u00f3n: APT,YUM/DNF, Pacman... Sin embargo, las versiones disponibles suelen ser anteriores a la versi\u00f3n <code>2.0.0</code>.</p>"},{"location":"entornos/poetry/instalacion/#version-actual","title":"Versi\u00f3n actual","text":"<p>La versi\u00f3n instalada de Poetry se consulta con el comando <code>--version</code>:</p> Versi\u00f3n de Poetry<pre><code>poetry --version\n</code></pre> <p>Hay que tener en cuenta que a partir de la versi\u00f3n <code>2.0.0</code> se introdujeron cambios importantes  respecto a las funcionalidades disponibles, comandos, etc.</p>"},{"location":"entornos/poetry/instalacion/#configuracion","title":"Configuraci\u00f3n","text":"<p>El resumen de las configuraciones se consultan con el comando <code>config</code>:</p> Resumen de configuraciones<pre><code>poetry config --list\n</code></pre>"},{"location":"entornos/poetry/obsoletos/","title":"Comandos antiguos","text":"<p>Aqu\u00ed se listan algunos comandos que han sido removidos de las versiones m\u00e1s recientes de Poetry pero que son reinstalables mediante plugins adicionales.</p>"},{"location":"entornos/poetry/obsoletos/#poetry-shell","title":"Poetry Shell","text":"<p>El comando <code>shell</code> fue removido de Poetry desde la versi\u00f3n 2.0.0. Este comando serv\u00eda para activar el entorno virtual actual.</p> <p>Puede instalarse mediante el plugin poetry-plugin-shell .</p> <p>Opciones de instalaci\u00f3n:</p> Shell - instalar<pre><code>poetry self add poetry-plugin-shell\npipx inject poetry poetry-plugin-shell\npip install poetry-plugin-shell\n</code></pre> <p>Con la shell se activa el entorno predeterminado del proyecto, tal como se hace con venv:</p> Shell - actualizar<pre><code>poetry shell\n</code></pre> <p>y ahora la rutina se ejecuta llamando directamente al int\u00e9rprete Python:</p> Shell - ejecutar<pre><code>python nombre_rutina\n</code></pre>"},{"location":"entornos/poetry/obsoletos/#export","title":"Export","text":"<p>El comando <code>export</code> era usado para extraer la lista de dependencias desde el archivo TOML a un archivo TXT.</p> <p>Este coamndo ha sido descartado de Poetry desde la versi\u00f3n 2.0.0. Puede reintregrarse con el plugin externo poetry-plugin-export .</p>"},{"location":"entornos/poetry/poetry/","title":"Poetry","text":"<p>https://youtu.be/Ji2XDxmXSOM</p> <p>https://python-poetry.org/docs/</p> <p>https://www.datacamp.com/tutorial/python-poetry</p> <p>entornos</p> <p>KDE Wallet</p> <p>deshabilitar:</p> <pre><code>python3 -m keyring --disable\n</code></pre> <p>https://stackoverflow.com/questions/64570510/why-does-pip3-want-to-create-a-kdewallet-after-installing-updating-packages-on-us</p>"},{"location":"entornos/poetry/poetry/#self","title":"SELF","text":"<pre><code>poetry self\npoetry self add poetry-core@latest\npoetry self install\n</code></pre>"},{"location":"entornos/poetry/poetry/#show","title":"Show","text":"<pre><code>poetry show\n</code></pre>"},{"location":"entornos/poetry/poetry/#source","title":"Source","text":""},{"location":"entornos/poetry/poetry/#update","title":"Update","text":""},{"location":"entornos/poetry/poetry/#cache","title":"cache","text":"<pre><code>poetry cache clear PyPI --all\npoetry cache list\n</code></pre>"},{"location":"entornos/poetry/poetry/#packs","title":"PACKS","text":"<p>poetry-core        poetry-plugin-shell</p>"},{"location":"entornos/poetry/sync/","title":"Sincronizaci\u00f3n de dependencias","text":""},{"location":"entornos/poetry/sync/#archivo-lock","title":"Archivo LOCK","text":"<p>El archivo <code>poetry.lock</code> es el encargado de guardar la lista exhaustiva de los paquetes usados actualmente  en el entorno actual y sus dependencias, cada uno con su n\u00famero de versi\u00f3n.</p> <p>Este archivo se crea autom\u00e1ticamente al instalar los paquetes con el comando <code>install</code>. Si el archivo LOCK ya existe, entonces <code>install</code> instalar\u00e1 la versi\u00f3n exacta de cada paquete especificado en \u00e9l.</p> <p>Este archivo ayuda a replicar de manera exacta la instalaci\u00f3n de un proyecto en distintos entornos o equipos.</p>"},{"location":"entornos/poetry/sync/#verificar-consistencia","title":"Verificar consistencia","text":"<p>El comando <code>check</code> verifica que el archivo LOCK y el archivo TOML sean consistentes entre s\u00ed.</p> Verificar consistencia<pre><code>poetry check\n</code></pre>"},{"location":"entornos/poetry/sync/#sincronizacion-de-dependencias_1","title":"Sincronizaci\u00f3n de dependencias","text":"<p>Con el comando <code>sync</code> se descartan todas las dependencias instaladas que no aparezcan en el archivo LOCK e instala aquellas dependencias que faltan.</p> <p>Uso b\u00e1sico:</p> Instalar dependencias - archivo LOCK<pre><code>poetry sync\n</code></pre> <p>sync vs install</p> <p>El comando <code>sync</code> funciona de manera similar a <code>install</code> pero tomando el archivo LOCK como referencia en vez de usar el archivo TOML.</p>"},{"location":"entornos/poetry/sync/#sincronizacion-por-grupos","title":"Sincronizaci\u00f3n por grupos","text":"<p><code>sync</code> admite la sincronizaci\u00f3n las dependencias instaladas en base a un grupo predefinido espec\u00edfico:</p> Instalar dependencias - archivo LOCK (por grupos)<pre><code>poetry sync --with nombre_grupo\npoetry sync --without nombre_grupo\npoetry sync --only nombre_grupo\n</code></pre> <p>Las opciones son las mismas disponibles en el comando <code>install</code>.</p>"},{"location":"entornos/poetry/sync/#fijar-dependencias","title":"Fijar dependencias","text":"<p>El comando <code>lock</code> crea o actualiza el archivo LOCK pero sin instalar las dependencias en el entorno virtual.</p> <p>Uso:</p> Fijar dependencias<pre><code>poetry lock\n</code></pre>"},{"location":"funciones/","title":"Funciones","text":"<p>Una funci\u00f3n es un bloque de c\u00f3digo reutilizable que ejecuta una sola tarea espec\u00edfica. </p>"},{"location":"funciones/#contenidos","title":"Contenidos","text":"<p>{{  pagetree(siblings) }}</p>"},{"location":"funciones/decoradores/","title":"Decoradores","text":"<p>Los decoradores son funciones auxiliares que permiten agregar c\u00f3digo tanto antes como despu\u00e9s de la funci\u00f3n que se les indique. \u00c9stos permite implementar modificaciones a las funciones sin modificar su c\u00f3digo interno.</p>","tags":["Funciones","Decoradores","Argumentos","Retorno"]},{"location":"funciones/decoradores/#definicion-formato-funcion","title":"Definici\u00f3n - Formato funci\u00f3n","text":"","tags":["Funciones","Decoradores","Argumentos","Retorno"]},{"location":"funciones/decoradores/#idea-basica","title":"Idea b\u00e1sica","text":"<p>Los decoradores suelen definirse mediante funciones, de forma que \u00e9stas  engloben unas dentro de otras formando una closure. Este es el formato b\u00e1sico de definici\u00f3n:</p> Definici\u00f3n de decoradores<pre><code>def nombre_decorador(funcion_entrada):\n    def funcion_envolvente()\n        # rutina previa\n        funcion_entrada()\n        # rutina posterior\n\n    return funcion_envolvente\n</code></pre>","tags":["Funciones","Decoradores","Argumentos","Retorno"]},{"location":"funciones/decoradores/#funciones-con-argumentos","title":"Funciones con argumentos","text":"<p>En la definici\u00f3n previa se asumi\u00f3 que la funci\u00f3n no requiere argumentos de entrada. Los argumentos pueden pasarse de manera gen\u00e9rica con ayuda de los xargs y kargs:</p> Definici\u00f3n de decoradores - Funciones con argumentos<pre><code>def nombre_decorador(funcion_entrada):\n    def funcion_envolvente(*args, **kwargs):\n        # rutina previa\n        funcion_entrada(*args, **kwargs)\n        # rutina posterior\n\n    return funcion_envolvente\n</code></pre> <p>Lo habitual es usar esta segunda forma, por su practicidad y sencillez.</p>","tags":["Funciones","Decoradores","Argumentos","Retorno"]},{"location":"funciones/decoradores/#decoradores-con-argumentos","title":"Decoradores con argumentos","text":"<p>Los decoradores pueden aceptar argumentos de entrada, para ello hay que agregar una  funci\u00f3n adicional envolviendo a la closure:</p> Definici\u00f3n de decoradores - Decorador con argumentos<pre><code>def nombre_decorador(argumento_decorador):\n    def _nombre_decorador(funcion_entrada):\n        def funcion_envolvente(*args, **kwargs):\n            # rutina previa\n            funcion_entrada(*args, **kwargs)\n            # rutina posterior\n\n        return funcion_envolvente\n    return _nombre_decorador\n</code></pre> <p>Esta funci\u00f3n externa es la que acepta los argumentos de entrada del decorador. </p>","tags":["Funciones","Decoradores","Argumentos","Retorno"]},{"location":"funciones/decoradores/#uso-de-decoradores","title":"Uso de decoradores","text":"","tags":["Funciones","Decoradores","Argumentos","Retorno"]},{"location":"funciones/decoradores/#asignacion","title":"Asignaci\u00f3n","text":"<p>El decorador se asigna justo antes de definir la funci\u00f3n de inter\u00e9s con su nombre precedido de un asterisco (<code>@</code>):</p> Asignaci\u00f3n de decoradores<pre><code>@nombre_decorador       # asignaci\u00f3n\ndef nombre_funcion():\n    # rutina\n    return\n</code></pre>","tags":["Funciones","Decoradores","Argumentos","Retorno"]},{"location":"funciones/decoradores/#asignacion-con-argumentos","title":"Asignaci\u00f3n con argumentos","text":"<p>Para agregarle argumentos al decorador simplemente se le agrega el valor de entrada entre par\u00e9ntesis:</p> Asignaci\u00f3n de decoradores - Con argumentos<pre><code>@nombre_decorador(valor_entrada)       # asignaci\u00f3n\ndef nombre_funcion():\n    # rutina\n    return\n</code></pre>","tags":["Funciones","Decoradores","Argumentos","Retorno"]},{"location":"funciones/decoradores/#concatenacion","title":"Concatenaci\u00f3n","text":"<p>Varios decoradores se pueden aplicar a la misma funci\u00f3n:</p> Asignaci\u00f3n de decoradores m\u00faltiples<pre><code>@nombre_decorador_1       # decorador externo\n@nombre_decorador_2       # decorador interno\ndef nombre_funcion():\n    # rutina\n    return\n</code></pre> <p>De esta manera el primer decorador se aplica alrededor del siguiente, \"rode\u00e1ndolo\". Esto se repite una y otra vez hasta acabar con los decoradores disponibles.</p>","tags":["Funciones","Decoradores","Argumentos","Retorno"]},{"location":"funciones/decoradores/#atributos-internos","title":"Atributos internos","text":"<p>A la funci\u00f3n interna del decorador se le puede agregar atributos (variables asociadas) para mantener el registro.</p> <p>Por ejemplo, el siguiente decorador cuenta cu\u00e1ntas llamadas se hace sobre una misma funci\u00f3n.  Para ello crea un atributo llamado <code>conteo_llamadas</code> que queda enlazado a cada funci\u00f3n especificada:</p> <p>Decorador 'contador_llamados' - Definici\u00f3n<pre><code>def contador_llamados(funcion):\n    def contador_funcion(*args, **kwargs):\n        # incremento de atributo contador\n        contador_funcion.conteo_llamadas += 1\n        print(f\"La funci\u00f3n '{funcion.__name__}' se ha llamado {contador_funcion.conteo_llamadas} veces.\")\n        return funcion(*args, **kwargs)\n\n    # creacion e inicializacion de atributo contador\n    contador_funcion.conteo_llamadas = 0\n    return contador_funcion\n</code></pre> Dentro del decorador se lee tanto el atributo est\u00e1ndar <code>__name__</code> de la funci\u00f3n de entrada como el atributo inventado <code>conteo_llamadas</code>.</p> <p>Para probarlo el mismo decorador se usa con distintas funciones:</p> <p>Decorador 'contador_llamados' - Asignaci\u00f3n<pre><code>@contador_llamados\ndef funcion_1():\n    pass\n\n@contador_llamados\ndef funcion_2():\n    pass\n</code></pre> Como el atributo se asigna a cada funci\u00f3n que usa el decorador el conteo de llamadas a cada funci\u00f3n se mantiene independiente:</p> Decorador 'contador_llamados' - Uso<pre><code>funcion_1() # \"La funci\u00f3n 'funcion_1' se ha llamado 1 veces.\"\nfuncion_1() # \"La funci\u00f3n 'funcion_1' se ha llamado 2 veces.\"\nfuncion_1() # \"La funci\u00f3n 'funcion_1' se ha llamado 3 veces.\"\nfuncion_2() # \"La funci\u00f3n 'funcion_2' se ha llamado 1 veces.\"\nfuncion_2() # \"La funci\u00f3n 'funcion_2' se ha llamado 2 veces.\"\nfuncion_1() # \"La funci\u00f3n 'funcion_1' se ha llamado 4 veces.\"\n</code></pre>","tags":["Funciones","Decoradores","Argumentos","Retorno"]},{"location":"funciones/decoradores/#decoradores-en-formato-de-clase","title":"Decoradores en formato de clase","text":"<p>Una forma alternativa de definir los decoradores es mediante el uso de clases:</p> Decorador - formato clase<pre><code>class nombre_decorador:\n    # Una instancia (una \"copia\" de la clase) para cada funcion asignada\n    def __init__(self, funcion_entrada):\n        # referencia a la funci\u00f3n de entrada\n        self.funcion = funcion_entrada\n\n    # Ejecucion de la funcion a traves del m\u00e9todo \n    def __call__(self, *args, **kargs):\n        # rutina previa\n        self.funcion(*args, **kargs)\n        # rutina posterior\n</code></pre> <p>El m\u00e9todo <code>__init__</code> crea una \"copia\" de la clase (una instancia) para cada funci\u00f3n que se le asigne el decorador, en tanto que el m\u00e9todo <code>__call__</code> llama internamente a dicha funci\u00f3n y ejecuta  el c\u00f3digo agregado.</p> <p>Ejemplo: decorador - formato clase</p> decorador debugger - formato clase<pre><code>class debugger:\n\n    # Una instancia (una \"copia\" de la clase) para cada funcion asignada\n    def __init__(self, funcion_entrada):\n        # Guardado de funci\u00f3n de entrada\n        self.funcion = funcion_entrada\n\n    # Ejecucion de la funcion a traves de clase\n    def __call__(self, *args, **kargs):\n        print(f\"Funcion '{self.funcion.__name__}'\")\n        print(f\"Argumentos entrada: '{args} , {kargs}'\")\n        retorno = self.funcion(*args, **kargs)\n        print(f\"Retorno: '{retorno}'\")\n</code></pre> <p>El uso y funcionamiento de estos decoradores es id\u00e9ntico al de los decoradores definidos mediante closures.</p>","tags":["Funciones","Decoradores","Argumentos","Retorno"]},{"location":"funciones/decoradores/#ejemplos-aplicados","title":"Ejemplos aplicados","text":"<p>Un ejemplo aplicado de decorador es un medidor de tiempo de ejecuci\u00f3n como se muestra:</p> <p>TIP N\u00ba1 - medidor de tiempo de ejecuci\u00f3n</p> <p>Decorador 'intervalo' - Definicion<pre><code>from time import time, sleep\n\n# creaci\u00f3n del decorador\ndef intervalo(funcion):\n    def tiempo_ejecucion(*args, **kwargs):\n        inicio = time()\n        funcion(*args, **kwargs)  \n        fin    = time()\n        print(f\"Tiempo ejecuci\u00f3n: {(fin-inicio):.6} segundos\")\n\n    return tiempo_ejecucion\n</code></pre> Decorador 'intervalo' - Asignacion y uso<pre><code># Asignacion\n@intervalo\ndef esperar(n: int):\n    sleep(0.1*n)\n    return \n\n# Uso\nesperar(5)      # 'Tiempo ejecuci\u00f3n: 0.500126 segundos'\n</code></pre></p> <p>TIP N\u00ba2 - Decorador para argumentos y retorno de funciones</p> Decorador de argumentos y retorno - Definici\u00f3n<pre><code>def debugger(debug:bool=False):\n    def _debugger(funcion_entrada):\n        def funcion_envolvente(*args, **kargs):\n            if debug:\n                print(f\"Funcion '{funcion_entrada.__name__}'\")\n                print(f\"Argumentos entrada: '{args} , {kargs}'\")\n            retorno = funcion_entrada(*args, **kargs)\n            if debug:\n                print(f\"Retorno: '{retorno}'\")\n            return    \n        return funcion_envolvente\n    return _debugger\n</code></pre> Decorador de argumentos y retorno - Asignacion y uso<pre><code>@debugger(True)\ndef funcion_test(*args,**kargs):\n    pass\n</code></pre> <p>TIP N\u00ba3 - Decoradores de logging</p> <p>Con ayuda de decoradores se pueden implementar reportes (logs) para las funciones y m\u00e9todos de clase con facilidad, lo cual ayuda a detectar y corregir problemas. Ver capitulo de logging</p>","tags":["Funciones","Decoradores","Argumentos","Retorno"]},{"location":"funciones/docstring/","title":"Docstrings","text":"<p>Los docstrings son textos de ayuda que se incluyen en la definici\u00f3n de las funciones. Funcionan a modo de manual para su consulta por los desarrolladores.</p>","tags":["Funciones","docstring","Documentacion"]},{"location":"funciones/docstring/#definicion","title":"Definici\u00f3n","text":"<p>Los docstrings se definen justo al abrir la definici\u00f3n de la funci\u00f3n y el texto se engloba entre triple corchete simple(<code>'''</code>) o entre triple corchete doble (<code>\"\"\"</code>).</p> <p>Ejemplo: </p> Docstring - definici\u00f3n<pre><code>def potencia(base: float, exp: int) -&gt; float:\n    \"\"\"\n    Esta funcion calcula la potencia deseada de un n\u00famero.\n\n    Argumentos:\n        b  (float): el numero base elegido\n        exp(int): el exponente deseado  \n\n    Retorno:\n        float: el valor resultante\n    \"\"\"\n    return base**exp\n</code></pre>","tags":["Funciones","docstring","Documentacion"]},{"location":"funciones/docstring/#manual-help","title":"Manual - <code>help</code>","text":"<p>El manual se puede desplegar con la funci\u00f3n <code>help</code> desde dentro de la rutina:</p> Docstring - lectura en manual<pre><code># ventana de ayuda\nhelp(potencia)\n</code></pre> <p>El reporte lanzado en consola tiene un aspecto como el siguiente:</p> Docstring - reporte en consola<pre><code>Help on function potencia in module __main__:\n\npotencia(base: float, exp: int) -&gt; float\n    Esta funcion calcula la potencia deseada de un n\u00famero.\n\n    Argumentos:\n        b  (float): el numero base elegido\n        exp(int): el exponente deseado\n\n    ...\nHelp on potencia line 1 (press h for help or q to quit)\n</code></pre> <p>IDE</p> <p>Los editores de texto tipo IDE incorporan funcionalidades y extensiones para desplegar los docstrings autom\u00e1ticamente cuando el desarrollador apunta sobre el nombre de las funciones.</p>","tags":["Funciones","docstring","Documentacion"]},{"location":"funciones/docstring/#lectura","title":"Lectura","text":"<p>La funci\u00f3n creada tiene un m\u00e9todo especial llamado <code>__doc__</code> donde se guarda el texto del docstring. \u00c9ste puede ser le\u00eddo para su uso en otras partes del programa.</p> <p>Ejemplo:</p> Docstring - lectura como string<pre><code>info = potencia.__doc__\n# texto por consola\nprint(info)\n</code></pre>","tags":["Funciones","docstring","Documentacion"]},{"location":"funciones/docstring/#referencia","title":"Referencia","text":"<p>Geeks for Geeks - Python Docstrings</p> <p>Python.org - PEP 257</p>","tags":["Funciones","docstring","Documentacion"]},{"location":"funciones/funciones/","title":"Sintaxis","text":"","tags":["Funciones","Operadores","Tipos","Variables","Argumentos","Retorno"]},{"location":"funciones/funciones/#llamada","title":"Llamada","text":"<p>Para llamar a una funci\u00f3n (es decir, para usarla) se la invoca por su nombre:</p> <p>Llamada a funci\u00f3n<pre><code>variable_salida = funcion( valor_entrada)\n</code></pre> La funci\u00f3n puede disponer o no de un valor de salida , como puede requerir o no valores de entrada. Un ejemplo de funci\u00f3n sin valor de retorno es la funci\u00f3n <code>print()</code> , en tanto que una funcion que a menudo se usa sin argumentos de entradas es <code>input()</code>.</p>","tags":["Funciones","Operadores","Tipos","Variables","Argumentos","Retorno"]},{"location":"funciones/funciones/#definicion","title":"Definicion","text":"<p>La definici\u00f3n de la funci\u00f3n es la especificaci\u00f3n del nombre de la funci\u00f3n y de su rutina interna,es decir su c\u00f3digo interior, el cual se ejecutar\u00e1 cada vez que la funci\u00f3n sea llamada.</p> <p>Formato de definici\u00f3n en Python:</p> Formato de definici\u00f3n<pre><code># definicion de funcion, sin valores de entrada\ndef nombre_funcion():\n    # C\u00f3digo funci\u00f3n\n    # ....\n    # final de c\u00f3digo\n\n\n# C\u00f3digo programa principal\n# ....\nnombre_funcion()         # llamada a la funci\u00f3n\n</code></pre> <p>En Python las funciones se definen antes de su primer llamado.</p> <p>Gu\u00eda de estilos</p> <p>Es una buena pr\u00e1ctica de estilo dejar dos renglones vac\u00edos debajo de cada definici\u00f3n de las funciones. Esto ayuda a interpretar visualmente hasta d\u00f3nde llega el c\u00f3digo de cada funci\u00f3n.</p>","tags":["Funciones","Operadores","Tipos","Variables","Argumentos","Retorno"]},{"location":"funciones/funciones/#argumentos","title":"Argumentos","text":"<p>Los argumentos son los valores que se le asignan a los par\u00e1metros de entrada al llamar a una funci\u00f3n.</p> argumentos de funciones<pre><code>nombre_funcion(valor_1, valor_2, ...) # funcion con argumentos de entrada asignados\n</code></pre>","tags":["Funciones","Operadores","Tipos","Variables","Argumentos","Retorno"]},{"location":"funciones/funciones/#definicion_1","title":"definici\u00f3n","text":"<p>Si la funci\u00f3n tiene par\u00e1metros de entrada , es decir variables que afectar\u00e1n al resultado de la funci\u00f3n estos se indican entre los par\u00e9ntesis y separados por comas: </p> formato de definici\u00f3n - con argumentos de entrada<pre><code># definicion de funcion, con valores de entrada\ndef nombre_funcion(parametro_1, parametro_2, ...):\n    # C\u00f3digo funci\u00f3n\n    # ....\n    # final de c\u00f3digo\n\n\n# C\u00f3digo programa principal\n# ....\nnombre_funcion(valor_1, valor_2, ...)      # llamada a la funci\u00f3n\n</code></pre>","tags":["Funciones","Operadores","Tipos","Variables","Argumentos","Retorno"]},{"location":"funciones/funciones/#xargs","title":"xargs","text":"<p>La funci\u00f3n puede aceptar un n\u00famero indefinido de par\u00e1metros (x-args) con ayuda del asterisco (<code>*</code>) :</p> argumentos indefinidos (x-args)<pre><code>def nombre_funcion( *variables ):\n    for valor in variables:\n        # C\u00f3digo funci\u00f3n\n        # ....\n        # final de c\u00f3digo\n</code></pre> <p>Esto crea una tupla interna que engloba a todos los argumentos sin nombre que se pasen por la entrada.</p> <p>T\u00f3mese por ejemplo una funci\u00f3n que muestra en pantalla los datos de entrada:</p> <p>x-args - variables entrada<pre><code>def funcion(*variables):\n    print(variables)\n    for v in variables:\n        print(f\"{v}\")\n\n\nfuncion(1, 3, 8, 4)  \n</code></pre> El resultado ser\u00e1 x-args - resultado<pre><code>(1, 3, 8, 4, 'hola')  \n1\n3\n8\n4\nhola \n</code></pre> En este caso se agrupan todos los valores de entrada juntos dentro de una tupla. Por otra parte, si a la entrada se mandan datos (listas, diccionarios, etc):</p> <p>x-args - datos entrada<pre><code>def funcion(*variables):\n    print(variables)\n\n\nfuncion( [1, 3, 8, 4] , {\"hola\":10, \"chau\":-7} )     \n# da '([1, 3, 8, 4], {'hola': 10, 'chau': -7})'   \n</code></pre> El resultado ser\u00e1 esta vez: x-args - resultado<pre><code>([1, 3, 8, 4], {'hola': 10, 'chau': -7})\n[1, 3, 8, 4]\n{'hola': 10, 'chau': -7}\n</code></pre> Se observa que se crea una tupla interna donde el primer valor es la lista de entrada y el segundo es el diccionario.</p>","tags":["Funciones","Operadores","Tipos","Variables","Argumentos","Retorno"]},{"location":"funciones/funciones/#kargs","title":"kargs","text":"<p>Para cargar par\u00e1metros de diccionario como argumento (keyword args,o  kwargs) se usa el doble asterisco:</p> keyword args (k-args)<pre><code>def nombre_funcion( **diccionario_entrada ):\n    # C\u00f3digo funci\u00f3n\n    # ....\n    # final de c\u00f3digo\n</code></pre> <p>Por ejemplo, si a una funci\u00f3n se le pasa como argumentos:</p> k-args<pre><code>def funcion( **diccionario_entrada):\n    print(diccionario_entrada)\n    print(diccionario_entrada.keys())       \n    print(diccionario_entrada.values())\n\n\nfuncion(hola=10, chau=-7, saludo=\"Buenos dias\")\n#  da:\n# '{'hola': 10, 'chau': -7, 'saludo': 'Buenos dias'}'\n# 'dict_keys(['hola', 'chau', 'saludo'])'\n# 'dict_values([10, -7, 'Buenos dias'])'\n</code></pre> <p>la funci\u00f3n construye entonces un dicconario interno al que le incorporan los strings como claves y los valores asignados como valores de claves.</p> <p>Argumentos con nombre</p> <p>Los argumentos de este tipo de funciones deben explicitarse al llamar a la funci\u00f3n, porque no hay un orden predefinido de argumentos como en otras funciones. Es decir, los argumentos s\u00ed o s\u00ed deben pasarse como pares clave-valor tal como se mostr\u00f3</p> <p>Nombres de argumentos</p> <p>Los argumentos de entrada tienen las mismas restricciones de sintaxis que los nombres de variables. De hecho, los k-args est\u00e1n pensados para ser usados internamente como variables.</p> Errores de entrada<pre><code>funcion(\"Buenos dias\"=10 )  # ERROR: no se admiten strings como nombre de argumento\nfuncion(yo soy Sam = 5)     # ERROR: los nombres de argumentos no aceptan espacios en blanco\n</code></pre>","tags":["Funciones","Operadores","Tipos","Variables","Argumentos","Retorno"]},{"location":"funciones/funciones/#valores-predefinidos","title":"valores predefinidos","text":"<p>A las funciones se les puede dar valores de entrada por defecto, de modo de poder omitir argumentos al llamarlas:</p> <p>Valores predefinidos<pre><code>def nombre_funcion( variable_1=valor_1 ,variable_2=valor_2 ):\n    #codigo\n</code></pre> Tambi\u00e9n se las puede llamar con el orden de los argumentos cambiado mediante asignaciones:</p> Valores predefinidos - cambio de orden de entrada<pre><code>retorno = nombre_funcion( variable_2=valor_2, variable_1=valor_1 )\n</code></pre>","tags":["Funciones","Operadores","Tipos","Variables","Argumentos","Retorno"]},{"location":"funciones/funciones/#valor-de-retorno","title":"Valor de retorno","text":"<p>Las funciones pueden tener un valor de retorno, es decir un valor de salida. Este se incluye al final de la definici\u00f3n de la funci\u00f3n con la sentencia return:</p> formato de definici\u00f3n - con valor de retorno<pre><code>def nombre_funcion():\n    # C\u00f3digo funci\u00f3n\n    # ....\n    # final de c\u00f3digo\n    return valor_retorno  # asignacion de retorno\n\n\n# C\u00f3digo programa principal\n# ....\nretorno = nombre_funcion()    # llamada a la funci\u00f3n\n</code></pre> <p>La sentencia <code>return</code> marca el final de la ejecuci\u00f3n de la funci\u00f3n, por tanto si hay c\u00f3digo posterior a esta sentencia no se ejecutar\u00e1.</p> <p>El valor por defecto del retorno de las funciones es <code>None</code>.  El valor de retorno en Python puede ser pr\u00e1cticamente de cualquier tipo: un booleano, un string, un numero,una lista, un diccionario, un objeto de una clase especificada, etc. El el caso de no requerirse un valor de retorno el uso de <code>return</code> es opcional, tal como se muestra en los ejemplos previos </p> <p>En la terminal, si el valor de retorno se asigna a una variable entonces no se muestra en pantalla. S\u00f3lo se lo muestra si se pasa a la funci\u00f3n <code>print()</code>.</p>","tags":["Funciones","Operadores","Tipos","Variables","Argumentos","Retorno"]},{"location":"funciones/lambda/","title":"Funciones Lambda","text":"<p>Las funciones lambda son funciones an\u00f3nimas, las cuales se definen as\u00ed:</p> funcion lambda - sin nombre<pre><code>lambda v1 , v2:  expresion\n</code></pre> <p>Un uso pr\u00e1ctico de las funciones simplificadas es crear funciones que s\u00f3lo se usar\u00e1n en una \u00fanica linea de c\u00f3digo, ahorrando la definici\u00f3n y asiganci\u00f3n de nombre habitual. Este modo de uso es muy habitual dentro de funciones <code>map()</code>, <code>reduce()</code>, etc, las cuales se explican m\u00e1s adelante.</p> <p>Si se requiere reutilizaci\u00f3n, a las funciones lambda se les puede asignar una variable para referenciarlas, el cual servir\u00e1 como nombre de funci\u00f3n:</p> <p>funcion lambda - con nombre<pre><code>variable_lambda = lambda v1 , v2:  expresion\n</code></pre> Y se llaman como una funci\u00f3n normal:</p> funcion lambda - llamado<pre><code>retorno = variable_lambda(valor_1,valor_2)\n</code></pre> <p>funci\u00f3n lambda: multiplicaci\u00f3n</p> <p>definici\u00f3n<pre><code>multiplicar = lambda a, b : a*b     \n</code></pre> uso<pre><code>resultado = multiplicar(2, 8)\n</code></pre></p> <p>Tip: funciones con argumentos preasignados</p> <p>Con las funciones lambda se puede crear variantes alternativas de otras funciones, por ejemplo asign\u00e1ndole  valores a algunos argumentos de entrada. Por ejemplo: crear varias funciones que calculan distintas potencias de un n\u00famero de entrada a partir de una funci\u00f3n gen\u00e9rica.</p> Alias de funciones<pre><code># funci\u00f3n con dos argumentos\ndef potencia(x,y):\n    return x**y\n\n# alias funcion, un argumento prefijado\ncuadrado    = lambda n: potencia(n, 2)      # y = 2\ncubo        = lambda n: potencia(n, 3)      # y = 3\n</code></pre> llamado y tipo<pre><code># uso\nprint( cuadrado(3)  )   # 3\u00b2 = 9\nprint( cubo(3)  )       # 3\u00b3 = 27\n\n# tipo\nprint(type(cuadrado ))       # &lt;class 'function'&gt;\nprint(type(cubo     ))       # &lt;class 'function'&gt;\n</code></pre> <p>Info</p> <p>N\u00f3tese que las funciones lambda son reconocidas por el int\u00e9rprete de Python como si fueran funciones normales.</p> <p>Esta forma de definirlas es \u00fatil para definir manejadores (handlers), es decir funciones que se ejecutan ante eventos espec\u00edficos del programa.</p> <p>Tip: manejadores (handlers)</p> Asignaci\u00f3n de handlers - funci\u00f3n com\u00fan<pre><code># definicion\ndef nombre_funcion(x):\n    return expresion(x)\n\n# asignacion\nhandler_evento = nombre_funcion\n</code></pre> <p>Con el uso de funciones lambda, esta rutina se reduce a:</p> Asignaci\u00f3n de handlers - funcion lambda<pre><code># defincion y asignacion en un solo pao\nhandler_evento = lambda v1 , v2:  expresion\n</code></pre> <p>Funciones flecha</p> <p>Las funciones lambda son an\u00e1logas a las funciones flecha de JavaScript y se usan de modo similar.</p>","tags":["Funciones"]},{"location":"funciones/orden_superior/","title":"Funciones de Orden Superior","text":"<p>Son funciones capaces de ejecutar a otras funciones especificadas por el usuario. Estas funciones son indicadas por su nombre como argumento de la funcion de orden superior.</p> funcion de orden superior<pre><code>def funcion_superior (valor_1, valor_2, funcion_usuario):\n    # codigo\n    # ...\n    funcion_usuario(parametros)\n    # ...\n</code></pre> ejemplo<pre><code># Funcion orden superior\ndef incrementar_4 (x, f):\n    # 'f' es una funcion de entrada\n    return f(x) + 4\n\n# Funcion externa\ndef triplicar(x):\n    return x*3\n\n# Uso\nx = 7\ny = incrementar_4(x, triplicar)\nprint(y)    # Da (x)*3+4 = 25\n</code></pre>","tags":["Funciones"]},{"location":"funciones/orden_superior/#closures","title":"Closures","text":"<p>Las  'closures' son funciones de orden superior que dan como retorno una funci\u00f3n definida internamente. </p> Closures - Sintaxis<pre><code>def nombre_closure():\n    def funcion_interna(argumentos):\n        # rutina\n        return retorno\n\n    return funcion_interna\n</code></pre> Ejemplo closure<pre><code>#definicion \ndef sumar_diez():\n    def add(valor):\n        return valor + 10\n    return add  #funcion interna como retorno\n\n#uso\nclosure_sumar = sumar_diez()\nprint(closure_sumar(7))     # da 10 + 7 = 17\n</code></pre> <p>Una utilidad posible de las closures en englobar varias funciones internas alternativas y poder elegir una u otra dependiendo de un argumento.</p> <p>Otra utilidad posible es la creaci\u00f3n de decoradores, los cuales agregan caracter\u00edsticas a las funciones. M\u00e1s sobre los decoradores de Python.</p>","tags":["Funciones"]},{"location":"funciones/orden_superior/#map","title":"Map","text":"<p>La funci\u00f3n <code>map()</code> es una funcion de orden superior que facilita el procesamiento de datos iterables  (particularmente: listas) por una funci\u00f3n especificada, \"mapeando\" cada elemento de los datos de entrada con los argumentos de la funcion y evitando as\u00ed el uso de bucles y la asignacion elemento a elemento.</p> <p>Sintaxis: <pre><code>objeto_resultado = map(funcion, data_entrada_1, data_entrada_2, ...)\n</code></pre></p> <p>El retorno de la funcion map() es un objeto de clase <code>map</code> (una instancia). Con la funci\u00f3n <code>list()</code> se convierte dicho objeto en una lista de valores, recuperando as\u00ed los resultados de la funci\u00f3n interna. </p> map() - procesamiento de listas<pre><code>objeto_resultado = map(funcion, lista_entrada)\nresultado = list(objeto_resultado)\n</code></pre> <p>Ejemplo: elevar al cuadado todos los elementos de un vector</p> map() - ejemplo uso<pre><code>def potencia_2 (x):\n    return x**2\n\nvector = [2, 5, 14, 3]\nobjeto = map(potencia_2, vector)\ncuadrado = list(objeto)\n</code></pre> <p>La funcion <code>map()</code> admite multiples listas de entrada</p> map() - m\u00faltiples iterables<pre><code>def multiplicar(x,y):\n    return x*y\n\nvector = [2, 5, 14, 3]\nobjeto = map(multiplicar, vector, vector)\ncuadrado = list(objeto)\n</code></pre> <p><code>map()</code> acepta funciones lambda como argumento. Ejemplo:</p> map() - uso lambdas<pre><code>vector = [2, 5, 14, 3]\n\ncuadrado = list(map(lambda numero: numero **2 , vector) )\n</code></pre>","tags":["Funciones"]},{"location":"funciones/orden_superior/#filter","title":"Filter","text":"<p><code>filter()</code> es una funci\u00f3n que filtra de la lista de entrada los valores que cumplen con una condici\u00f3n l\u00f3gica definida por una funci\u00f3n especificada.  </p> <p>Sintaxis: filter() - sintaxis<pre><code>objeto_filtrados = filter(funcion_logica, data_entrada)\n</code></pre> Nuevamente la salida es un objeto de la clase <code>filter</code> y para leer la lista de elementos filtrados hay que recurrir a la funcion <code>list()</code>.</p> <p>Ejemplo: filtrar valores numericos mayores a diez de un vector</p> ejemplo: valores mayores a 10<pre><code>def mayor_a_10(x):\n    return True if x &gt; 10 else False  \n\nvector = [2, 5, -1, 48,-9,-25, 14, 3]\nobjeto= filter(mayor_a_10, vector)\nfiltrados = list(objeto)\n</code></pre> <p><code>filter()</code> tambi\u00e9n acepta funciones lambda como argumento. </p>","tags":["Funciones"]},{"location":"funciones/orden_superior/#reduce","title":"Reduce","text":"<p><code>reduce()</code> opera con todos los elementos de una lista de entrada, aplic\u00e1ndoles una funci\u00f3n especificada de manera acumulativa. Esto permite trabajar con un n\u00famero no predeterminado de argumentos agrupados dentro de una lista de entrada. Para ser utilizada debe ser importada previamente desde el m\u00f3dulo functools: Importaci\u00f3n de reduce()<pre><code>from functools import reduce\n</code></pre> Ejemplo: una productoria (producto sucesivo) de n\u00fameros englobados en una lista</p> <p>ejemplo: reduce() para hacer productoria<pre><code>def producto(x, y): \n    return x*y\n\nvector = [2, 5, -1, -3]\nproductoria = reduce(producto, vector)\n# 'productoria' es 2*5*(-1)*(-3) = 30\n</code></pre> Como el retorno de la funci\u00f3n <code>reduce()</code> es un valor no hace falta hacer conversiones de tipo adicionales.</p>","tags":["Funciones"]},{"location":"funciones/orden_superior/#partial","title":"Partial","text":"<p>La funci\u00f3n <code>partial()</code> permite asignar valores prefijados a una funci\u00f3n como argumentos. Devuelve como retorno un objeto de clase 'partial' el cual incluye toda la informaci\u00f3n agregada y que puede utilizarse como si fuera una funci\u00f3n lambda. De esta forma con <code>partial()</code> se puede crear una o varias funciones simplificadas.</p> <p>La funci\u00f3n <code>partial()</code> debe importarse desde el m\u00f3dulo functools:</p> Importaci\u00f3n de partial()<pre><code>from functools import partial\n</code></pre> <p>El formato general de esta funci\u00f3n es:</p> <p>Sintaxis de partial()<pre><code>objeto_partial = partial( nombre_funcion, arg1 = valor_1, arg2 = valor_2, ...)\n</code></pre> En caso de no indicarse los nombres de los argumentos \u00e9stos se asignar\u00e1n en orden de definici\u00f3n.</p> <p>Los objetos partial se usan igual que cualquier funci\u00f3n:</p> Uso de partial()<pre><code>valor = objeto_partial(argunentos)\n</code></pre> <p>Ejemplo N\u00aa1: cuadrado y cubo con partial()</p> <p>Ejemplo N\u00ba1: crear varias funciones que calculan distintas potencias de un n\u00famero de entrada.</p> <p><pre><code># funci\u00f3n general, dos par\u00e1metros \ndef potencia(x, exponente):\n    return x**exponente\n\n\n# se crean objetos 'partial' para casos particulares\ncuadrado = partial( potencia, exponente = 2 )\ncubo     = partial( potencia, exponente = 3 ) \n</code></pre> Estas funciones se usan f\u00e1cilmente invoc\u00e1ndolas por su nombre:</p> <pre><code>x = 3   # valor de entrada\n\nprint( cuadrado(x))     # 3\u00b2 = 9\nprint( cubo    (x))     # 3\u00b3 = 27\n\nprint(type(cubo))  # devuelve \" &lt;class 'functools.partial'&gt; \"\n</code></pre> <p>Ejemplo N\u00aa2: potencias con partial()</p> <p>En este ejemplo se crea una lista de funciones que calculan distintas potencias de un n\u00famero de entrada.</p> <p>definicion de partials<pre><code># funci\u00f3n general, dos par\u00e1metros \ndef potencia(x, exponente):\n    return x**exponente\n\n# lista de funciones lambdas\npotencias = []\nfor i in range(10):\n    # se fija el exponente\n    p = partial( potencia, exponente = i )\n    potencias.append(p)\n</code></pre> De este modo el \u00edndice de la funci\u00f3n lambda elegida representa el exponente elegido:</p> uso de partials<pre><code>x = 3   # valor de entrada\n\nprint( potencias[0](x) )        # 3\u2070 = 1\nprint( potencias[1](x) )        # 3\u00b9 = 3\nprint( potencias[2](x) )        # 3\u00b2 = 9\nprint( potencias[3](x) )        # 3\u00b3 = 27\nprint( potencias[4](x) )        # 3\u2074 = 81\n# ...\n</code></pre>","tags":["Funciones"]},{"location":"funciones/recursivas/","title":"Funciones Recursivas","text":"<p>La recursi\u00f3n consiste en definir algo en funci\u00f3n de si mismo. </p> <p>Las funciones recursivas son funciones que se llaman a s\u00ed mismas un numero limitado de veces (caso recursivo), cuidando de incluir las condiciones iniciales que permitan resolver la funci\u00f3n y detengan la invocaci\u00f3n de s\u00ed mismas (caso base).</p> <p>Ejemplos cl\u00e1sicos de algoritmos recursivos:</p> Serie de Fibonacci<pre><code>fib(n) = fib(n-1) + fib(n-2)    caso recursivo\nfib(1)=1 , fib(0)=0             caso base\n</code></pre> Factorial<pre><code>n!=n * (n-1)!   caso recursivo\n1! =0!=1        caso base\n</code></pre> <p>Las funciones recursivas sirven como alternativa al uso de bucles y a veces permiten resolver algoritmos de forma m\u00e1s simple; sin embargo suelen ocupar mayor uso de memoria por la necesidad de llamarse a s\u00ed misma m\u00faltiples veces para resolver el algoritmo.</p> <p>Ejemplo aplicado: factorial</p> <p>El factorial se calcula f\u00e1cilmente con una funci\u00f3n recursiva:</p> Factorial recursivo<pre><code># definicion de funcion recursiva\ndef factorial(n):\n    n = int(n)    \n    if n &gt; 1:\n        m = n * factorial(n-1)  # caso recursivo\n    else:\n        m = 1       # caso base\n    return m\n\n\n# Ejemplo de uso\nfor i in range(5):\n    print(f\"factorial de {i}: {factorial(i)}\")\n</code></pre>","tags":["Funciones"]},{"location":"funciones/scope/","title":"Visibilidad (scope)","text":"<p>El scope o visibilidad indica d\u00f3nde se puede usar una variable. Hay dos opciones: local y global.</p>","tags":["Funciones"]},{"location":"funciones/scope/#variables-locales","title":"Variables locales","text":"<p>Las variables locales son aquellas definidas dentro de las funciones y son de uso exclusivo de la funci\u00f3n que las crea.</p> <p>Ejemplo:  <pre><code># definicion de funcion, sin valores de entrada\ndef mostrar_a( ):\n    # variable local: 'a' \n    a = 3\n    print(a) \n\n\n# C\u00f3digo programa principal\nmostrar_a( )  # '3'       \nprint(a)        # ERROR: variable local no visible desde afuera de su funcion\n</code></pre></p>","tags":["Funciones"]},{"location":"funciones/scope/#variables-globales","title":"Variables globales","text":"<p>Las variables globales son aquellas definidas por fuera de las funciones  y son visibles por fuera de ellas. Las funciones son incapaces de acceder a las variables globales, excepto cuando estas variables son declaradas adentro de las funciones con la palabra clave <code>global</code> : </p> Variables globales<pre><code>nombre_variable_global = 0      #creacion \n\ndef incrementar_global():\n    # ...\n    global nombre_variable_global       # declaraci\u00f3n\n    valor = nombre_variable_global      # lectura\n    nombre_variable_global = 1          # modificaci\u00f3n\n</code></pre> <p>Uso de variables globales</p> <p>El uso de variables globales  por dentro de las funciones se considera una mala pr\u00e1ctica y es mejor evitarlo siempre que sea posible. Esto se debe a las posibles interaciones imprevistas entre varias funciones mediante una misma variable global.</p>","tags":["Funciones"]},{"location":"funciones/tipado/","title":"Tipado en las funciones","text":"<p>Las funciones de Python admiten tipado de sus argumentos de entrada y del valor de retorno  para detectar inconsistencias  y prevenir posibles errores.</p> <p>La asignacion del tipo de datos de los argumentos se realiza con el operador dos puntos (<code>:</code>), en tanto que la asignaci\u00f3n del tipo de salida se realiza con el operador flecha (<code>-&gt;</code>).</p> <p>Ejemplo: calcular potencias enteras de un numero flotante</p> Tipado de funciones<pre><code>def potencia(base: float, exp: int) -&gt; float:    # retorno flotante\n    return base**exp\n\nx = 2.73    # valor flotante\ny = 3       # valor entero\nvalor = potencia(x, y)   \n</code></pre>","tags":["Funciones"]},{"location":"i18n/","title":"Traducciones - i18n","text":"<p>i18n es una abreviaci\u00f3n de 'InternationalizatioN', cuyo nombre tiene 18 letras entre la I y la N. </p> <p>python-i18n es es una de las m\u00faltiples implementaciones de Python para las traducciones i18n, y es la explicada a continuaci\u00f3n.</p>"},{"location":"i18n/#contenidos","title":"Contenidos","text":"<p>{{ pagetree(siblings)}}</p>"},{"location":"i18n/#referencias","title":"Referencias","text":"<p>Documentaci\u00f3n oficial</p>"},{"location":"i18n/basico/","title":"Traduccion desde script","text":"<p>En esta modalidad las traducciones se introducen directamente en la rutina de Python. Esta manera no es la m\u00e1s habitual</p>"},{"location":"i18n/basico/#crear-traduccion","title":"Crear traducci\u00f3n","text":"<p>Las traducciones se pueden crear adentro de la rutina de Python con la funci\u00f3n <code>add_tranlation()</code> en forma de pares campo - valor, ambos en formato string-</p> <p>Por ejemplo, para crear un campo llamado <code>hi</code> y asignarle una traducci\u00f3n al espa\u00f1ol se hace:</p> Crear traducci\u00f3n<pre><code>i18n.add_translation('hi','hola')\n</code></pre> <p>Para cada par campo-valor se puede asignar una abreviaci\u00f3n de lenguaje con ayuda del campo <code>locale</code>, de modo de permitir soporte simult\u00e1neo a m\u00faltiples idiomas:</p> Crear traduccion -  varios idiomas<pre><code>i18n.add_translation('hi','good morning', locale='en')   # 'en' : ingl\u00e9s (english) \ni18n.add_translation('hi','buenos d\u00edas', locale='es')    # 'es' : espa\u00f1ol\n</code></pre> <p>Las etiquetas <code>es</code> y <code>en</code> son etiquetas de idioma definidas por el desarrollador. \u00c9stas no vienen predefinidas por el paquete, aunque convencionalmente se usan las abreviaciones en ingl\u00e9s de los lenguajes. </p>"},{"location":"i18n/basico/#elegir-lenguajes-set-y-fallback","title":"Elegir lenguajes - Set y Fallback","text":"<p>El lenguaje prioritario se establece con la funci\u00f3n <code>set()</code>:</p> <p>Lenguaje preferido - set<pre><code># Lenguaje preferido\ni18n.set('locale', 'es')   # espa\u00f1ol\n</code></pre> en tanto que la opci\u00f3n alternativa se establece con la funci\u00f3n <code>fallback()</code>:</p> Lenguaje de respaldo - fallback<pre><code># alternativa : 'fallback'\ni18n.set('fallback', 'en')  # ingl\u00e9s\n</code></pre> <p>Esto permite completar los campos para los cuales no existan traducciones en el lenguaje preestablecido. Como alternativa habitualmente se elige el ingl\u00e9s.</p>"},{"location":"i18n/basico/#leer-traduccion","title":"Leer traducci\u00f3n","text":"<p>La lectura de las traducciones se realizan con la funci\u00f3n <code>t()</code>:</p> Leer traducci\u00f3n<pre><code>nombre_campo = 'hi'\ntraducido = i18n.t(nombre_campo)\nprint(traducido)\n</code></pre> <p>donde la traducci\u00f3n elegida para el campo ser\u00e1 la asignada al lenguaje predeterminado (<code>set</code>) o el de respaldo (<code>fallback</code>). Si no hay ninguna traducci\u00f3n preasiganada para el campo entonces se devuelve el mismo campo como texto.</p>"},{"location":"i18n/basico/#placeholders","title":"Placeholders","text":"<p>Se pueden implementar par\u00e1metros (campos variables) dentro de las traducciones. \u00c9stos son llamados placeholders o marcadores:</p> placeholders - formato<pre><code># campo 'name' variable \ni18n.add_translation('hi', 'Hola %{name} !')\n</code></pre> <p>Los par\u00e1metros variables se asignan como argumento para la funci\u00f3n <code>t()</code> en el momento de traducir:</p> placeholders - asignaci\u00f3n<pre><code>traducido = i18n.t('hi', name='Bob')    # 'Hola Bob!'\n</code></pre>"},{"location":"i18n/basico/#pluralizacion","title":"Pluralizaci\u00f3n","text":"<p>El placeholder, si \u00e9ste tiene valor num\u00e9rico, puede usarse para elegir entre varias traducciones posibles. El valor num\u00e9rico se pasa con la propiedad <code>count</code>. Las opciones de traducci\u00f3n se enmarcan entre llaves y hay cuatro opciones:</p> Opcion Valor <code>zero</code> 0 <code>one</code> 1 <code>few</code> 2 a 5 <code>many</code> 6 o mayor <p>Las traducciones para este caso se guardan como un diccionario, donde estas opciones son las claves.</p> <p>Por ejemplo, sup\u00f3ngase un cliente de correos electr\u00f3nicos:</p> <p>Pluralizaci\u00f3n - formato<pre><code>i18n.add_translation('mails', {\n    'zero': 'No tienes ning\u00fan correo nuevo.',\n    'one': 'Tienes un nuevo correo.',\n    'few': 'S\u00f3lo tienes %{count} correos nuevos.',\n    'many': 'Tienes %{count} correos nuevos.'\n})\n</code></pre> La lectura de la traducci\u00f3n se hace asign\u00e1ndole el valor a la propiedad <code>count</code>:</p> Pluralizaci\u00f3n - uso<pre><code>print( i18n.t('mails', count=numero_entrada) ) \n</code></pre> <p>Entonces las traducciones se adaptan al n\u00famero ingresado:</p> zeroonefewmany <p>Lectura - count=0<pre><code>print( i18n.t('mails', count=0) )  # caso 'zero'(0)\n</code></pre> Traducci\u00f3n le\u00edda<pre><code>No tienes ning\u00fan correo nuevo.\n</code></pre></p> <p>Lectura - count=1<pre><code>print( i18n.t('mails', count=1) )  # caso 'one' (1)\n</code></pre> Traducci\u00f3n le\u00edda<pre><code>Tienes un nuevo correo.\n</code></pre></p> <p>Lectura - count=5<pre><code>print( i18n.t('mails', count=5) )  # caso 'few' (2 a 5)\n</code></pre> Traducci\u00f3n le\u00edda<pre><code>S\u00f3lo tienes 5 correos nuevos.\n</code></pre></p> <p>Lectura - count=6<pre><code>print( i18n.t('mails', count=6) )  # caso 'many' (6 o mayor)\n</code></pre> Traducci\u00f3n le\u00edda<pre><code>Tienes 6 correos nuevos.\n</code></pre></p>"},{"location":"i18n/instalacion/","title":"Instalar e importar","text":""},{"location":"i18n/instalacion/#instalacion","title":"Instalaci\u00f3n","text":"<p><code>python-i18n</code> se instala f\u00e1cilmente desde PIP:</p> i18n - instalaci\u00f3n<pre><code>pip install python-i18n\n</code></pre> <p>Si se prefiere guardar las traducciones en formato YAML el paquete requerido es el siguiente:</p> i18n - instalacion (con soporte YAML)<pre><code>pip install python-i18n[YAML]\n</code></pre>"},{"location":"i18n/instalacion/#importacion","title":"Importaci\u00f3n","text":"<p>El paquete debe importarse para su uso con el nombre <code>i18n</code>:</p> i18n - importaci\u00f3n<pre><code>import i18n\n</code></pre>"},{"location":"i18n/json/","title":"Archivos JSON","text":"<p><code>python-i18n</code> tambi\u00e9n soporta la lectura de archivos en formato JSON. Estos archivos guardan los datos como diccionarios exclusivamente. M\u00e1s sobre los archivos JSON</p>"},{"location":"i18n/json/#utilizacion","title":"Utilizaci\u00f3n","text":"<p>Se soportan todas las opciones disponibles para archivos YAML y se usan las mismas funciones tanto para configurar como para leer.</p> <p>Sin embargo los archivos JSON  no son detectados por defecto y y deben ser habilitados para ser leidos con ayuda de la funci\u00f3n <code>set()</code>:</p> JSON - habilitaci\u00f3n<pre><code># habilitar JSON\ni18n.set('file_format', 'json')\n</code></pre> <p>Los archivos JSON deben tener una sintaxis como esta:</p> JSON - archivos de traducci\u00f3n<pre><code>{\n    \"es\": {\n        \"hi\": \"Hola %{name}!\",\n        \"gb\": \"Goodbye!\",\n        \"mails\": {\n            \"zero\": \"No tienes ning\u00fan correo.\",\n            \"one\": \"Tienes un nuevo correo.\",\n            \"few\": \"S\u00f3lo tienes %{count} correos nuevos.\",\n            \"many\": \"Tienes %{count} correos nuevos.\"\n        }\n    }\n}\n</code></pre> <p>El uso de comillas dobles es obligatorio, como tambi\u00e9n es obligatorio estructurar los campos y sus valores mediante llaves. No se admite el uso de comentarios.</p>"},{"location":"i18n/json/#locale-tacito","title":"<code>locale</code> t\u00e1cito","text":"<p>Los archivos de traducciones no siempre traen internamente indicado el campo <code>locale</code> (idioma). Para estos casos se necesita habilitar la opci\u00f3n <code>skip_locale_root_data</code>:</p> <p>skip locale from root<pre><code>i18n.set('skip_locale_root_data', True)\n</code></pre> De esta manera los archivos JSON son simplificados:</p> JSON - archivos de traducci\u00f3n (locale t\u00e1cito)<pre><code>{\n    \"hi\": \"Hola %{name}!\",\n    \"gb\": \"Hasta luego!\",\n    \"mails\": {\n        \"zero\": \"No tienes ning\u00fan correo.\",\n        \"one\": \"Tienes un nuevo correo.\",\n        \"few\": \"S\u00f3lo tienes %{count} correos nuevos.\",\n        \"many\": \"Tienes %{count} correos nuevos.\"\n    }\n}\n</code></pre>"},{"location":"i18n/json/#demo-cliente-de-correo","title":"Demo - cliente de correo","text":"<p>Se muestra una implementaci\u00f3n completa del demo usado como ejemplo.</p> <p>demo JSON - completo</p> demo JSON - arbol de archivos<pre><code>\u251c\u2500\u2500 traducciones\n\u2502   \u251c\u2500\u2500 demo.en.json\n\u2502   \u2514\u2500\u2500 demo.es.json\n\u2514\u2500\u2500 traducir.py\n</code></pre> <p>demo JSON - traduccion al espa\u00f1ol<pre><code>{\n    \"hi\": \"Hola %{name}!\",\n    \"gb\": \"Hasta luego!\",\n    \"mails\": {\n        \"zero\": \"No tienes ning\u00fan correo.\",\n        \"one\": \"Tienes un nuevo correo.\",\n        \"few\": \"S\u00f3lo tienes %{count} correos nuevos.\",\n        \"many\": \"Tienes %{count} correos nuevos.\"\n    }\n}\n</code></pre> demo JSON - traduccion al espa\u00f1ol<pre><code>{\n    \"hi\": \"Hello %{name}!\",\n    \"gb\": \"Goodbye!\",\n    \"mails\": {\n        \"zero\": \"You haven't any new mail.\",\n        \"one\": \"You have a new mail.\",\n        \"few\": \"You only have %{count} new mails.\",\n        \"many\": \"You have %{count} new mails.\"\n    }\n}\n</code></pre></p> demo JSON - rutina completa<pre><code>import i18n\n\n\ni18n.set('file_format', 'json')\ni18n.set('skip_locale_root_data', True)\n\ni18n.load_path.append('traducciones/')\n\ni18n.set('locale', 'es')\ni18n.set('fallback', 'en')\n\n\ntext = i18n.t('demo.hi', name=\"Bob\")\nprint(text)\ntext = i18n.t('demo.mails', count=0)\nprint(text)\ntext = i18n.t('demo.gb')\nprint(text)\n</code></pre>"},{"location":"i18n/yaml/","title":"Archivos YAML","text":"<p>Las traducciones se suelen guardar en archivos YAML. Esto archivos permiten definir diccionarios y listas f\u00e1cilmente mediante indentado. M\u00e1s sobre los archivos YAML</p>"},{"location":"i18n/yaml/#lectura-de-archivos","title":"Lectura de archivos","text":"<p>El directorio de referencia para la traducci\u00f3n se ingresa con el m\u00e9todo <code>append()</code> de la funci\u00f3n <code>load_path()</code>: </p> YAML - Carpeta de traducciones<pre><code># directorio con traducciones\ni18n.load_path.append('.')        # directorio actual\ni18n.load_path.append('carpeta_traducciones/')   # subdirectorio\n</code></pre> <p>Lo habitual es colocar los archivos de traducciones en una misma carpeta.</p>"},{"location":"i18n/yaml/#estructura-de-programa","title":"Estructura de programa","text":"<p>Los archivos con las traducciones se nombran con la siguiente convenci\u00f3n: <code>{nombre_archivo}.{locale}.{format}.</code></p> <p>Por ejemplo un un programa demo con traducciones al ingl\u00e9s y al espa\u00f1ol podr\u00eda tener una estructura como esta:</p> YAML- arbol de archivos<pre><code>.\n\u251c\u2500\u2500 traducciones\n\u2502   \u251c\u2500\u2500 demo.en.yml\n\u2502   \u2514\u2500\u2500 demo.es.yml\n\u2514\u2500\u2500 demo.py\n</code></pre> <p>donde las traducciones al ingl\u00e9s se guardan en el archivo <code>demo.en.yml</code> y las traducciones al espa\u00f1ol est\u00e1n en el archivo <code>demo.es.yml</code>. </p> <p>Las traducciones de un mismo idioma se pueden repartir en varios archivos, en caso de considerarse necesario.</p>"},{"location":"i18n/yaml/#formato-en-yaml","title":"Formato en YAML","text":"<p>Las traducciones se guardan en los archivos YAML como diccionarios con la siguiente convenci\u00f3n: primero se el lenguaje implementado (<code>en</code>, <code>es</code>, etc) como primera clave y como valores internos se guardan los pares campo - traducci\u00f3n.</p> <p>Por ejemplo, en el archivo de traducciones para el ingl\u00e9s se especifica la clave <code>en</code> y bajo \u00e9sta se incluyen los campos <code>hi</code> y <code>gb</code> con sus textos respectivos:</p> YAML - traducci\u00f3n al ingl\u00e9s<pre><code># archivo 'demo.en.yml'\nen:\n  hi: Hello!\n  gb: Goodbye!\n</code></pre> <p>En el archivo de traducciones para el espa\u00f1ol se agrega la clave <code>es</code> y bajo \u00e9sta se incluyen los mismos campos:</p> YAML - traducci\u00f3n al espa\u00f1ol<pre><code># archivo 'demo.es.yml'\nes: \n  hi: Hola!\n  gb: Hasta luego!\n</code></pre> <p>Este mecanismo se aplica con todos los archivos de traducciones implementados.</p> <p>Texto sin comillas</p> <p>YAML no obliga a usar comillas para delimitar claves ni valores. Su uso es opcional.</p>"},{"location":"i18n/yaml/#lectura","title":"Lectura","text":"<p>La lectura de traducciones se realiza nuevamente con la funci\u00f3n <code>t()</code>. Si se elige como directorio de referencia la carpeta de traducciones: </p> YAML - cargar carpeta de traducciones<pre><code>i18n.load_path.append('traducciones/')   # subdirectorio\n</code></pre> <p>entonces el argumento de entrada de <code>t()</code> toma la forma <code>{nombre_archivo}.{campo}</code>:</p> YAML - usar traducciones<pre><code>text = i18n.t('demo.hi')\nprint(text)\ntext = i18n.t('demo.gb')\nprint(text)\n</code></pre> <p>es decir se omite la abreviaci\u00f3n de idioma y la extensi\u00f3n <code>.yml</code>.</p> <p>Si en cambio se carga todo el directorio del programa: </p> YAML - cargar carpeta de programa<pre><code>i18n.load_path.append('.')\n</code></pre> <p>entonces la lectura de traducciones tiene como formato de argumento  <code>{nombre_carpeta}.{nombre_archivo}.{campo}</code> :</p> YAML - usar traducciones<pre><code>text = i18n.t('traducciones.demo.hi')\nprint(text)\ntext = i18n.t('traducciones.demo.gb')\nprint(text)\n</code></pre> <p>Traducciones faltantes</p> <p>Si falta alguno de los archivos de idioma entonces simplemente se carga la traducci\u00f3n de <code>fallback</code>.</p> <p>Ejemplo - rutina completa</p> Carga de subcarpetaCarga de directorio raiz <pre><code># importacion\nimport i18n\n\n# referencia a la carpeta de traducciones\ni18n.load_path.append('traducciones/')\n\n# eleccion de idiomas\ni18n.set('locale', 'es')\ni18n.set('fallback', 'en')\n\n# lectura de traduccion\ntext = i18n.t('demo.hi')\nprint(text)\ntext = i18n.t('demo.gb')\nprint(text)\n</code></pre> <pre><code># importacion\nimport i18n\n\n# referencia a la carpeta del programa\ni18n.load_path.append('.')\n\n# eleccion de idiomas\ni18n.set('locale', 'es')\ni18n.set('fallback', 'en')\n\n# lectura de traduccion\ntext = i18n.t('traducciones.demo.hi')\nprint(text)\ntext = i18n.t('traducciones.demo.gb')\nprint(text)\n</code></pre>"},{"location":"i18n/yaml/#placeholders","title":"Placeholders","text":"<p>Los placeholders mantienen la misma notaci\u00f3n que en los scripts:</p> YAML - crear placeholders<pre><code># archivo 'demo.es.yml' (espa\u00f1ol)\nes: \n  hi: Hola %{name}!     # placeholder 'name'\n</code></pre> <p>y se llaman de la misma manera, esta vez inclkuyendo el nombre de archivo:</p> YAML - cargar placeholders<pre><code>text = i18n.t('demo.hi', name=\"Bob\")\nprint(text)\n</code></pre>"},{"location":"i18n/yaml/#pluralizacion","title":"Pluralizaci\u00f3n","text":"<p>La pluralizaci\u00f3n se implementa en archivos YAML adaptando el diccionario de opciones al formato YAML. En \u00e9l se crean las claves <code>zero</code>, <code>one</code>, <code>few</code> y <code>many</code> con sus respectivos valores. La variable de control sigue siendo <code>count</code> y se reutiliza el formato de placeholder.</p> <p>En el ejemplo previo del contador de correos, la definici\u00f3n quedar\u00eda as\u00ed</p> YAML - crear pluralizaci\u00f3n<pre><code># archivo 'demo.es.yml' (espa\u00f1ol)\nes: \n  mails:\n    'zero': No tienes ning\u00fan correo nuevo.\n    'one':  Tienes un nuevo correo.\n    'few':  S\u00f3lo tienes %{count} correos nuevos.\n    'many': Tienes %{count} correos nuevos.\n</code></pre> <p>y la orden de lectura incluye al nombre de archivo:</p> YAML - leer pluralizacion<pre><code>print( i18n.t('demo.mails', count=6) )  # caso 'many' (6 o mayor)\n</code></pre>"},{"location":"i18n/yaml/#demo-cliente-de-correo","title":"Demo - cliente de correo","text":"<p>Se muestra una implementaci\u00f3n completa del demo usado como ejemplo.</p> <p>demo YAML - completo</p> demo YAML - arbol de archivos<pre><code>.\n\u251c\u2500\u2500 traducciones\n\u2502   \u251c\u2500\u2500 demo.en.yml\n\u2502   \u2514\u2500\u2500 demo.es.yml\n\u2514\u2500\u2500 demo.py\n</code></pre> demo YAML - traduccion al espa\u00f1ol<pre><code># archivo 'demo.es.yml' (espa\u00f1ol)\n# carpeta 'traducciones'\nes: \n  hi: Hola %{name}!\n  gb: Hasta luego!\n  mails:\n    zero: No tienes ning\u00fan correo nuevo.\n    one:  Tienes un nuevo correo.\n    few:  S\u00f3lo tienes %{count} correos nuevos.\n    many: Tienes %{count} correos nuevos.\n</code></pre> demo YAML - traduccion al ingl\u00e9s<pre><code># archivo 'demo.en.yml' (ingl\u00e9s)\n# carpeta 'traducciones'\nen: \n  hi: Hello %{name}!\n  gb: Goodbye!\n  correos:    \n    zero: You haven't any new mail.\n    one:  You have a new mail.\n    few:  You only have %{count} new mails.\n    many: You have %{count} new mails.\n</code></pre> demo YAML - rutina completa<pre><code>import i18n\n\n\ni18n.load_path.append('traducciones/')\n\ni18n.set('locale', 'es')\ni18n.set('fallback', 'en')\n\n\ntext = i18n.t('traducciones.demo.hi', name=\"Bob\")\nprint(text)\ntext = i18n.t('traducciones.demo.mails', count=0)\nprint(text)\ntext = i18n.t('traducciones.demo.gb')\nprint(text)\n</code></pre>"},{"location":"main/","title":"Funci\u00f3n <code>main()</code>","text":"<p>La funci\u00f3n <code>main()</code> es,  como su nombre indica, la funci\u00f3n que incluye la rutina principal del programa. Esta rutina principal es siempre el lugar por donde comienza a ejecutarse el programa  y, salvo indicaci\u00f3n contraria,  es donde tambi\u00e9n termina la ejecuci\u00f3n. </p>","tags":["Funciones","main","sys","Argumentos","Retorno","Modulos","Procesos"]},{"location":"main/#contenidos","title":"Contenidos","text":"<p>{{ pagetree(siblings) }}</p>","tags":["Funciones","main","sys","Argumentos","Retorno","Modulos","Procesos"]},{"location":"main/#referencias","title":"Referencias","text":"<p>Documentaci\u00f3n oficial - <code>__main__</code></p> <p>Documentaci\u00f3n oficial - sys</p>","tags":["Funciones","main","sys","Argumentos","Retorno","Modulos","Procesos"]},{"location":"main/argumentos/","title":"Argumentos de <code>main()</code>","text":"","tags":["main","sys","Argumentos","Modulos"]},{"location":"main/argumentos/#argument-values-argv","title":"argument values (<code>argv</code>)","text":"<p>Para leer los argumentos (valores) que se pasan al invocar el programa desde la terminal se puede usar el m\u00f3dulo <code>sys</code> y leer la variable <code>argv</code>,  la cual es una lista con todos los valores ingresados de argumentos en formato texto:</p> argument values (argv)<pre><code>from sys import argv      #importacion del m\u00f3dulo del sistema\n\nlista_valores = argv        # lista de argumentos\n\nargumento_0 = argv[0]   # ruta del programa\nargumento_1 = argv[1]   # 1\u00ba argumento de entrada\nargumento_2 = argv[2]   # 2\u00ba argumento de entrada\n# ....\n</code></pre> <p>argv[0]</p> <p>Tener en cuenta que el primer valor de todos (<code>argv[0]</code>) es la ruta relativa del archivo del programa.</p> <p>Ejemplo 1: nombre y argumentos</p> <p>Un archivo 'entrada.py' con el c\u00f3digo:</p> <p><pre><code>import sys\n\nnumero_argumentos = len(sys.argv)\n\nfor i in range(numero_argumentos):\n    print(i , sys.argv[i])\n</code></pre> y al llamarlo con la terminal (ej: Bash)  as\u00ed:</p> <p><pre><code>py entrada.py hola 25 'hasta luego'\n</code></pre> dar\u00e1 como resultado la siguiente lista de argumentos numerados:</p> <p>Texto de salida<pre><code>0 entrada.py\n1 hola\n2 25\n3 hasta luego\n</code></pre> Se observa que el primer argumento coincide con el nombre del archivo de programa.</p> <p>Ejemplo 2: ruta y argumentos</p> <p>Si la rutina previa est\u00e1 alojada en un subdirectorio llamado 'carpeta':</p> Texto de salida<pre><code>py carpeta/entrada.py hola 30 'hasta luego'\n</code></pre> <p>dar\u00e1 como resultado esta vez:</p> <p>Texto de salida<pre><code>0 carpeta/entrada.py\n1 hola\n2 30\n3 hasta luego\n</code></pre> Se verifica entonces que el primer argumento es la ruta relativa del archivo de programa.</p> <p>M\u00e1s informaci\u00f3n sobre los argumentos de <code>main()</code>: m\u00f3dulo <code>sys</code></p>","tags":["main","sys","Argumentos","Modulos"]},{"location":"main/argumentos/#otras-opciones","title":"Otras opciones","text":"<p>Python dispone de varios m\u00f3dulos est\u00e1ndar para la lectura de los argumentos, los cuales permiten mayor versatilidad y configuraciones. Estos son:</p> <ul> <li><code>getopt</code>;</li> <li><code>optparse</code>;</li> <li><code>argparse</code>;</li> </ul> <p>El m\u00e1s recomendado para su uso en proyectos es el m\u00f3dulo argparse</p>","tags":["main","sys","Argumentos","Modulos"]},{"location":"main/encapsular/","title":"Encapsular rutina principal","text":"<p>Se puede englobar la rutina principal  y pasarla como argumento a la funci\u00f3n <code>exit()</code> del m\u00f3dulo <code>sys</code>: </p> Rutina principal encapsulada<pre><code>import sys\n\n\n# funcion wrapper\ndef principal():\n    # (Rutina principal)\n    print(\"Rutina principal completa\")\n    return 0    # valor de retorno\n\n\nif __name__ == \"__main__\": \n    sys.exit(principal())    \n</code></pre> <p>de esta forma  el int\u00e9rprete ejecutar\u00e1 la funci\u00f3n wrapper (envolvente) y su valor de retorno  se pasar\u00e1 a la shell al terminar.</p>","tags":["main","sys","Argumentos","Modulos"]},{"location":"main/retorno/","title":"Valor de retorno","text":"<p>La rutina principal puede tener un valor de retorno. Este valor puede ser una simple variable  que indique el \u00e9xito o el fracaso del procesamiento interno .</p> <p>El valor de retorno se env\u00eda con ayuda de la funci\u00f3n <code>exit()</code> incluida en el m\u00f3dulo <code>sys</code>:</p> Valor de retorno<pre><code>import sys\n\n\nif __name__ == \"__main__\":\n    # (Rutina principal)\n    print(\"Rutina principal completa\")\n    sys.exit(0)         # codigo ejecuci\u00f3n exitosa      \n</code></pre> <p>Esta funci\u00f3n indica la intensi\u00f3n de salir del int\u00e9rprete  y su argumento es el valor de retorno.</p> <p>Los valores habituales de salida son los siguientes:</p> Valor Significado <code>0</code>, <code>None</code> Terminaci\u00f3n exitosa <code>1</code> Error gen\u00e9rico <code>2</code> Error (s\u00f3lo sintaxis de l\u00ednea de comandos) <p>El valor de retorno tambi\u00e9n puede ser un valor o una estructura de datos completa; sin embargo  estos casos deben manejarse con cuidado  porque dichos valores pueden ser malinterpretados por el sistema operativo como c\u00f3digos de error.</p>","tags":["main","sys","Retorno","Modulos"]},{"location":"main/sintaxis/","title":"Sintaxis","text":"","tags":["main"]},{"location":"main/sintaxis/#sintaxis","title":"Sintaxis","text":"<p>A diferencia de otros lenguajes de m\u00e1s bajo nivel, Python no requiere indicar explicitamente una funci\u00f3n principal (main) sino que presupone que la funci\u00f3n principal es la rutina del archivo invocado por el usuario o por el sistema operativo.  A esta funci\u00f3n el int\u00e9rprete de Python le da el nombre \"<code>__main__</code>\" y dicho valor se consulta desde la variable especial <code>__name__</code>.</p> <p>Esto contrasta con las funciones definidas dentro de la rutina principal, las cuales son consideradas secundarias. Lo mismo sucede con las rutinas de m\u00f3dulos y paquetes: estas s\u00f3lo son consideradas como funci\u00f3n main si son llamadas directamente por el int\u00e9rprete de Python.</p>","tags":["main"]},{"location":"main/sintaxis/#rutina-exclusiva-de-main","title":"Rutina exclusiva de <code>main()</code>","text":"<p>Para ejecutar una rutina \u00fanicamente en el programa principal (es decir, si se invoca directamente al archivo que las contiene) se puede englobar la rutina con el siguiente condicional:</p> <p>Rutina exclusiva de main()<pre><code>if __name__ == \"__main__\" :\n    #rutina exclusiva de la funcion main\n</code></pre> Esta forma es \u00fatil para crear demos y tests dentro de los archivos donde se crean funcionalidades, clases, etc. de modo que s\u00f3lo se ejecuten los demos cuando se los llama directamente.</p>","tags":["main"]},{"location":"miscelanea/buscar_archivos/","title":"Buscar Archivos y Carpetas","text":""},{"location":"miscelanea/buscar_archivos/#scandir","title":"scandir()","text":"<pre><code>from os import scandir, getcwd\n\nruta = getcwd()\nprint(ruta)\n\nrutas = scandir(ruta)\n\nfor r in rutas:\n    # print(r)\n    print(r.name, r.is_dir(), r.is_file())\n</code></pre> <p>La b\u00fasqueda es no recursiva</p>"},{"location":"miscelanea/buscar_archivos/#listdir","title":"listdir()","text":"<p>La funcion listdir() del m\u00f3dulo os </p> <pre><code>from os import listdir\n\nruta = \"./\"\nrutas =  listdir(ruta)\n</code></pre> <pre><code>from os.path import isfile, join\nfor r in rutas:\n    print(r, isfile(join(ruta, r)))\n</code></pre>"},{"location":"miscelanea/buscar_archivos/#walk-y-next","title":"walk() y next()","text":"<p><pre><code>from os import walk, getcwd\n\nruta = getcwd()     #ruta de b\u00fasqueda\n\ndir, lista_subdirs, lista_archivos = next(walk(ruta))   \n</code></pre> La funci\u00f3n walk() devuelve un objeto generador. La funci\u00f3n next() descompone el objeto en el directorio actual, la lista de subdirectorios y la lista de archivos.</p> <p>Esta b\u00fasqueda es no recursiva.</p>"},{"location":"miscelanea/buscar_archivos/#glob","title":"glob","text":"<p>La funci\u00f3n glob del m\u00f3dulo glob permite buscar rutas de archivo f\u00e1cilmente indicando la extensi\u00f3n deseada:</p> <p><pre><code>from glob import glob\n\nexpr = '**' #todo (incluye carpetas)\nexpr = '*.*' # archivos con cualquier extensi\u00f3n\nexpr = '*.txt' # archivos con extensi\u00f3n especifica\n\nlista_rutas = glob(expr)\n</code></pre> El retorno es una lista de strings.</p> <p>La b\u00fasqueda es no recursiva; sin embargo la recursividad se puede habilitar con el par\u00e1metro recursive:</p> <p><pre><code>lista_rutas = glob(expr, recursive = True)\n</code></pre> Tambi\u00e9n se puede habilitar la b\u00fasqueda de archivos ocultos con el par\u00e1metro:  <pre><code>lista_rutas = glob(expr, include_hidden = True)\n</code></pre></p>"},{"location":"miscelanea/buscar_archivos/#referencias","title":"Referencias","text":"<p>https://es.stackoverflow.com/questions/24278/c\u00f3mo-listar-todos-los-archivos-de-una-carpeta-usando-python</p> <p>https://www.delftstack.com/es/howto/python/python-directory-exists/#comprobar-si-el-directorio-existe-usando-el-m\u00e9todo-pathisdir-del-m\u00f3dulo-os-en-python</p>"},{"location":"miscelanea/cosas_extranias/","title":"5 COSAS EXTRA\u00d1AS en PYTHON","text":"<p>https://www.youtube.com/watch?v=0IjLBjatT5Y</p> <p>Conexion a bases de datos con SQL Server https://youtu.be/BzsF1cG6JJU?list=PLWYKfSbdsjJg9-Knrk6iKbM-u6Z33zavD REVISAR</p> <p>Se trabaja en base al paquete pyodbc. Tambi\u00e9n debe instalarse un driver del lenguaje de la base de datos elegida.</p> <p>Ejemplo: una rutina de lectura de base de datos ubicada localmente.</p> <pre><code>import pyodbc\n&lt;descriptor&gt; = pyodbc.connect( \n    'Driver={&lt;nombre_driver_base_datos&gt;}'; \n    'Server=localhost;'\n    'Database=&lt;nombre_base_datos&gt;;'\n    'UID=&lt;nombre_administrador&gt;;'\n    'PWD=&lt;contrase\u00f1a&gt;;')\ncursor = conn.cursor()\ncursor.execute(\u2018select * from persona\u2019)\n</code></pre>"},{"location":"paquetes/ffmpeg/","title":"ffmpeg-python","text":"<p>ffmpeg-python es un wrapper (un conector) para interactuar con el utilitario FFMPEG, el cual permite manipular video, audio e im\u00e1genes.</p> <p>GitHub del proyecto</p> <p>Documentaci\u00f3n del proyecto</p>"},{"location":"paquetes/ffmpeg/#instalar","title":"Instalar","text":"<p>Se necesita instalar el utilitario en el sistema operativo:</p> <p>Descargar FFmpeg</p> <p>El wrapper (conector) para Python se instala mediante PIP <pre><code>pip install ffmpeg-python\n</code></pre></p>"},{"location":"paquetes/ffmpeg/#importar","title":"Importar","text":"<pre><code>import ffmpeg\n</code></pre>"},{"location":"paquetes/ffmpeg/#ejemplos-de-uso","title":"Ejemplos de uso","text":""},{"location":"paquetes/ffmpeg/#cortar-clip-trim","title":"Cortar clip (trim)","text":"<pre><code># REVISAR: IMAGEN CONGELADA AL COMIENZO\nimport ffmpeg\n\nruta_entrada = \"demo.mp4\"\nruta_salida = \"clip.mp4\"\n\nvideo = ffmpeg.input(ruta_entrada)\nvideo = video.trim(start=20, duration=5)  # MAL\nvideo =  ffmpeg.output(video, ruta_salida) \n\nffmpeg.run(video)\n</code></pre> <p>Otra alternativa: <pre><code># ...\n# tiempo en segundos\ninicio = 10\nfin = 20\n\nvideo = ffmpeg.input(ruta_entrada, ss=inicio, to=fin) \nvideo =  ffmpeg.output(video, ruta_salida) \nffmpeg.run(video)\n</code></pre> ss es el tiempo de arranque, en tanto que to es el tiempo de parada.</p> <p>Notaci\u00f3n reducida:</p> <pre><code># ...\n# tiempo en segundos\ninicio = 10 \nfin = 20\n(\n    ffmpeg.input(ruta_entrada,ss=inicio, to=fin) \n    .output( ruta_salida) \n    .run()\n)\n</code></pre>"},{"location":"paquetes/ffmpeg/#dimensiones","title":"Dimensiones","text":"<pre><code>import ffmpeg\n\nruta_entrada = \"demo.mp4\"\n\nprobe = ffmpeg.probe(ruta_entrada)\n\nvideo = next(\n    (stream for stream in probe[\"streams\"] if stream[\"codec_type\"] == \"video\"), None\n)\n\nancho = int( video[\"width\"])\nalto = int(video[\"height\"])\n</code></pre>"},{"location":"paquetes/ffmpeg/#miniatura","title":"Miniatura","text":"<pre><code>import ffmpeg\n\nruta_entrada = \"demo.mp4\"\n\n# Ejemplo 1: PNG con anchura 500 px\nsalida_png = \"miniatura.png\"\n\ninstante = 4  # segundo 4\nancho = 500  # 500 px\nalto = -1  # automatico \n\nvideo = ffmpeg.input(ruta_entrada, ss=instante)\nvideo = video.filter(\"scale\", ancho, alto) # (mantiene proporcion)\nvideo = ffmpeg.output(video, salida_png , vframes=1)\n\n# orden de ejecucion\nffmpeg.run(video)\n</code></pre>"},{"location":"paquetes/ffmpeg/#invertir-imagen-flip","title":"Invertir imagen (flip)","text":"<pre><code>import ffmpeg\n\nruta_entrada = \"demo.mp4\"\nsalida_horizontal = \"horizontal.mp4\"\nsalida_vertical = \"vertical.mp4\"\n</code></pre> <p>Volteo horizontal</p> <pre><code># 'hflip': voltea de derecha a izquierda\nvideo = ffmpeg.input(ruta_entrada)\nvideo = ffmpeg.hflip(video)\nvideo = ffmpeg.output(video, salida_horizontal)\n# orden de ejecucion\nffmpeg.run(video)\n</code></pre> <p>Volteo vertical:</p> <pre><code># 'vflip' : voltea de arriba a abajo\nvideo = ffmpeg.input(ruta_entrada)\nvideo = ffmpeg.vflip(video)\nvideo = ffmpeg.output(video, salida_vertical)\n# orden de ejecucion\nffmpeg.run(video)\n</code></pre>"},{"location":"paquetes/ffmpeg/#convertir-video","title":"Convertir Video","text":"<pre><code>import ffmpeg\n\nruta_entrada = \"demo.mp4\"\nruta_salida  = \"demo.wmv\"\n\n(\n    ffmpeg.input(ruta_entrada)\n    .output(ruta_salida)\n    .run()\n)\n</code></pre>"},{"location":"paquetes/ffmpeg/#extraer-audio","title":"Extraer Audio","text":"<pre><code>import ffmpeg\n\nruta_entrada = \"demo.mp4\"\naudio_salida = \"audio.mp3\"\n\n(\n    ffmpeg.input(ruta_entrada)\n    .output(audio_salida)\n    # .output(audio_salida , acodec='libshine') # codec personalizado\n    .run()\n)\n</code></pre>"},{"location":"paquetes/ffmpeg/#extraer-frames-imagenes-del-video","title":"Extraer frames (imagenes del video)","text":"<ul> <li>N\u00famero fijo de frames, desde el comienzo del video:</li> </ul> <pre><code>import ffmpeg\n\nruta_entrada = \"demo.mp4\"\nframes_salida = \"frame_%d.png\" # formato para nombrar los frames de salida\n\nnro_frames = 500 # primeros 500 frames de video\n\n(\n    ffmpeg.input(ruta_entrada)\n    .output(frames_salida , vframes=nro_frames)      \n    .run()\n)\n</code></pre> <ul> <li>Tasa de frames por segundo a elecci\u00f3n, desde el comienzo:</li> </ul> <pre><code>import ffmpeg\n\nruta_entrada  = \"demo.mp4\"\nframes_salida = \"frame_%d.png\" # formato para nombrar los frames de salida\n\nfps = 0.1  # 1 frame cada 10 segundos\n\n(\n    ffmpeg.input(ruta_entrada)\n    .output(frames_salida , vf=f'fps={fps}')\n    .run()\n)\n</code></pre>"},{"location":"paquetes/ffmpeg/#thumbnails","title":"Thumbnails","text":"<ul> <li>Una captura, tiempo elegido por usuario:</li> </ul> <pre><code>import ffmpeg\n\nruta_entrada  = \"demo.mp4\"\nthumbnail_salida = \"thumbnail.png\" \n## instante fijo  \n(\n    ffmpeg.input(ruta_entrada, ss=\"00:00:15\")\n    .output(thumbnail_salida, vframes=1)\n    .run()\n)\n</code></pre> <ul> <li>Una captura, elegida autom\u00e1ticamente entre los 100 primeros frames (valor predefinido):</li> </ul> <pre><code>import ffmpeg\n\nruta_entrada  = \"demo.mp4\"\nthumbnail_salida = \"thumbnail.png\" \n# ventana seleccion 100 muestras (default)   \n(\n    ffmpeg.input(ruta_entrada)\n    .filter('thumbnail')\n    .output(thumbnail_salida, vframes=1)\n    .run()\n)\n</code></pre> <ul> <li>Una captura, elegida autom\u00e1ticamente entre los N primeros frames:</li> </ul> <pre><code>import ffmpeg\n\nruta_entrada  = \"demo.mp4\"\nthumbnail_salida = \"thumbnail.png\" \nnro_frames = 500\n# ventana seleccion 500 muestras  \n(\n    ffmpeg.input(ruta_entrada)\n    .filter('thumbnail', n=nro_frames)\n    .output(thumbnail_salida, vframes=1)\n    .run()\n)\n</code></pre>"},{"location":"paquetes/ffmpeg/#referencias","title":"Referencias","text":"<p>DelfStack - FFmpeg en script Python</p> <p>Bannerbear - How to Use FFMpeg in Python (with Examples)</p>"},{"location":"paquetes/numba/","title":"Numba - Optimizacion con Machine Learning","text":"<p>Numba permite compilar funciones de Python en tiempo de ejecuci\u00f3n con ayuda de algoritmos de Machine Learning. Esto suele ayudar a mejorar los tiempos de ejecucion de la funci\u00f3n.</p>"},{"location":"paquetes/numba/#instalacion-e-importacion","title":"Instalacion e importaci\u00f3n","text":"<p>El paquete numba se instala con PIP</p> <p>Instalaci\u00f3n<pre><code>pip install numba\n</code></pre> La importaci\u00f3n se requiere para su uso: Importaci\u00f3n<pre><code>import numba\n</code></pre></p>"},{"location":"paquetes/numba/#compilacion","title":"Compilacion","text":"<p>La compilacion se ordena de forma gen\u00e9rica con el decorador <code>@jit</code>:</p> <pre><code>import numba\n\n# funcion compilada\n@numba.jit\ndef funcion( arg):\n    # rutina\n    return \n</code></pre> <p>Sintaxis alternativa:  <pre><code>from numba import jit\n\n# funcion compilada\n@jit\ndef funcion( arg):\n    # rutina\n    return \n</code></pre></p> <p>Ejemplo aplicado: b\u00fasqueda de numeros primos. Se crean dos funciones iguales , pero una lleva el decorador jit y la otra no.</p> <p>Funci\u00f3n interpretada pura: Funci\u00f3n interpretada pura<pre><code>def numeros_primos(numero_maximo):\n    \"\"\"Devuelve una lista con los numeros primos encontrados con valor menor al indicado.\"\"\"\"\"\n    #esta funcion verifica qu\u00e9 numeros son primos descartando los numeros divisibles por enteros previos\n    #los numeros primos se guardan en una lista\n    primos = [2]\n    #se prueba cada numero candidato, uno a uno\n    #s\u00f3lo se verifican numeros impares: mejora casi imperceptible\n    for valor in range(3,numero_maximo+1,2):\n        divisible = False\n        # s\u00f3lo se divide por numeros primos ya encontrados \n        # los numeros no primos son redundantes\n        for indice in range(0,len(primos)):\n            divisor = primos[indice]\n            if valor % divisor == 0:\n                divisible = True\n                break\n        #si no es divisible se cuenta como primo\n        if divisible == False:\n            primos.append(valor)\n    return primos     \n</code></pre></p> <p>Funcion con compilacion:</p> Funci\u00f3n con compilacion - @jit<pre><code>@jit    # decorador de Numba\ndef numeros_primos_compilado(numero_maximo):\n    \"\"\"Devuelve una lista con los numeros primos encontrados con valor menor al indicado.\"\"\"\"\"\n    #esta funcion verifica qu\u00e9 numeros son primos descartando los numeros divisibles por enteros previos\n    #los numeros primos se guardan en una lista\n    primos = [2]\n    #se prueba cada numero candidato, uno a uno\n    #s\u00f3lo se verifican numeros impares: mejora casi imperceptible\n    for valor in range(3,numero_maximo+1,2):\n        divisible = False\n        # s\u00f3lo se divide por numeros primos ya encontrados \n        # los numeros no primos son redundantes\n        for indice in range(0,len(primos)):\n            divisor = primos[indice]\n            if valor % divisor == 0:\n                divisible = True\n                break\n        #si no es divisible se cuenta como primo\n        if divisible == False:\n            primos.append(valor)\n    return primos     \n</code></pre> <p>Se cre\u00f3 una rutina que ejecuta recursivamente estas funciones. Al requerir la b\u00fasqueda de numeros primos por debajo de 10 mil: </p> <p>Uso rutina - 10k n\u00fameros<pre><code>py primos_numba.py 10000\n</code></pre> se obtuvieron tiempos de ejecuci\u00f3n como estos:</p> Interpretado Compilado 92 mseg 560 mseg 90 mseg 4 mseg 89 mseg 4 mseg <p>La compilaci\u00f3n introdujo una penalizaci\u00f3n notable en el tiempo de la primera ejecuci\u00f3n; sin embargo a partir de la segunda ejecuci\u00f3n el tiempo se redujo m\u00e1s de veinte veces. </p> <p>Al repetir la b\u00fasqueda con tope en 40 mil:</p> <p>Uso rutina - 40k n\u00fameros<pre><code>py primos_numba.py 40000\n</code></pre> Los nuevos tiempos fueron los siguientes:</p> Interpretado Compilado 1162 mseg 660 mseg 1160 mseg 44 mseg 1156 mseg 44 mseg <p>En este caso de mayor demanda computacional se obtiene una mejora para todos los ciclos.</p> <p>Por tanto, debe analizarse en cada caso si es buena idea o no introducir la compilaci\u00f3n.</p>"},{"location":"paquetes/psutil/","title":"Psutil - Monitoreo del sistema","text":"<p>Psutil ayuda a monitorear los par\u00e1metros de funcionamiento del sistema operativo y de sus procesos, tales como el uso de memoria, frecuencia de trabajo, uso de redes, sensores internos, etc. </p>"},{"location":"paquetes/psutil/#primeros-pasos","title":"Primeros pasos","text":"<p>El paquete se instala desde el gestor PIP.</p> Instalaci\u00f3n<pre><code>pip install psutil\n</code></pre> <p>El nombre de m\u00f3dulo coincide con el del paquete , por ello se lo importa directamente:</p> importacion<pre><code>include psutil\n</code></pre>"},{"location":"paquetes/psutil/#parametros-de-sistema","title":"Par\u00e1metros de Sistema","text":"<p>Para consultar par\u00e1metros del sistema psutil incluye un juego de funciones</p>"},{"location":"paquetes/psutil/#cpu","title":"CPU","text":""},{"location":"paquetes/psutil/#frecuencias","title":"frecuencias","text":"<p>frecuencia procesadores<pre><code>frecuencia_procesadores = psutil.cpu_freq() \n</code></pre> Valores disponibles:</p> Valores disponibles campo valor current frecuencia de trabajo actual (en MHz) min frecuencia de trabajo m\u00ednima (en MHz) max frecuencia de trabajo m\u00e1xima (en MHz) <p>Caso Linux, FreeBSD: pueden monitorearse todos los procesadores:</p> frecuencias- todos los procesadores<pre><code>lista_frecuencias = psutil.cpu_freq(percpu=True) \n</code></pre>"},{"location":"paquetes/psutil/#nucleos","title":"nucleos","text":"<p>Cuenta cuantos n\u00facleos (cores) dispone el CPU:</p> n\u00ba nucleos<pre><code>nucleos_logicos = psutil.cpu_count()\nnucleos_fisicos = psutil.cpu_count(logical=False)\n</code></pre> <p>Hint: n\u00facleos f\u00edsicos y l\u00f3gicos</p> <p>La relaci\u00f3n entre n\u00facleos f\u00edsicos y n\u00facleos l\u00f3gicos es: <pre><code>nucleos_logicos = nucleos_fisicos * threads_simultaneos \n</code></pre></p> <p>Ejemplo: un CPU con 2 n\u00facleos f\u00edsicos e 'HiperThreading' de 2 hilos simult\u00e1neos por core da 4 n\u00facleos l\u00f3gicos.</p>"},{"location":"paquetes/psutil/#cpu_percent","title":"cpu_percent()","text":"<p>Permite calcular el porcentaje de uso promedio de todos los n\u00facleos del CPU :</p> porcentaje CPU<pre><code># porcentaje de exigencia del CPU\nporcentaje_total = psutil.cpu_percent(\n    interval=None,                      # tiempo de referencia\n    percpu=False                        #  resultado en lista de porcentajes , uno por *core* \n)  \n</code></pre> <p>Si no se indica un valor num\u00e9rico para interval se toma de referencia la anterior llamada del m\u00e9todo o en su defecto la importaci\u00f3n del m\u00f3dulo. Es conveniente que entre ambas llamadas hayan pasado al menos 0.1 segundos para mejor precisi\u00f3n.</p> <p>Ejemplo: demanda de CPU de una rutina completa</p> Porcentaje de CPU<pre><code>#punto de referencia\npsutil.cpu_percent()  # retorna '0.0'-&gt; IGNORAR\n# espera\nimport time\ntime.sleep(1)\n# medicion\nporcentaje = psutil.cpu_percent()               # promedio\nporcentajes = psutil.cpu_percent(percpu=True)   # por unidad\n</code></pre>"},{"location":"paquetes/psutil/#cpu_times","title":"cpu_times()","text":"<p>Calcula los tiempos acumulados de procesamiento de cada n\u00facleo l\u00f3gico.</p> Tiempo procesamiento<pre><code>data_tiempos = psutil.cpu_times()     # informacion de tiempo de procesamiento en segundos\n</code></pre> Campos m\u00e1s habituales campo valor user tiempo usado en modo usuario (segundos) system tiempo usado en modo kernel (segundos) <p>M\u00e1s informacion sobre cpu_times(): sitio oficial</p>"},{"location":"paquetes/psutil/#procesos","title":"Procesos","text":""},{"location":"paquetes/psutil/#listado-y-verificacion","title":"listado y verificacion","text":"<pre><code>lista_pids = psutil.pids()  # todos los PIDS activos encontrados\nexiste_proceso = psutil.pid_exists(pid) # verifica actividad\n</code></pre>"},{"location":"paquetes/psutil/#espera-y-eventos-al-cierre","title":"espera y eventos al cierre","text":"<pre><code># Espera al cierre de procesos indicados\npsutil.wait_procs(\n    lista_pids,         # lista de numeros de IDs\n    timeout=None,       # tiempo de espera m\u00e1ximo\n    callback=None       # manejador asignable -&gt; se dispara con cada cierre\n    )\n</code></pre>"},{"location":"paquetes/psutil/#memoria-ram","title":"Memoria RAM","text":"<pre><code>data_ram = psutil.virtual_memory()\n</code></pre> Campos principales: campo valor total memoria RAM total (en bytes) available memoria RAM actualmente disponible (en bytes) percent porcentaje de memoria usado"},{"location":"paquetes/psutil/#memoria-swap","title":"Memoria SWAP","text":"<pre><code>data_swap = psutil.swap_memory()\n</code></pre> Campos principales: campo valor total memoria swap total (en bytes) used memoria swap actualmente usado free memoria swap libre percent porcentaje de memoria swap usado sin data escrita en disco (acumulativa) sout data leida en disco (acumulativa)"},{"location":"paquetes/psutil/#discos","title":"Discos","text":""},{"location":"paquetes/psutil/#particiones","title":"particiones","text":"<pre><code>particiones_f\u00edsicas = psutil.disk_partitions() # lista de particiones\n\nfor particion in particiones:\n    print(particion)\n</code></pre> Contenido de listas: campo valor device ruta del dispositivo: 'C:\\', '/dev/hda1', etc mountpoint ruta montada_ '/', '/home', 'D:\\', etc fstype formato: NTFS, FAT, ext4, etc opt informacion extra (dependiente del SO)"},{"location":"paquetes/psutil/#espacio-en-disco","title":"espacio en disco","text":"<pre><code>uso_disco = psutil.disk_usage(ruta)\n</code></pre> Contenido: campo valor used espacio usado (en bytes) free espacio libre (en bytes) <p>Ejemplo: estad\u00edsticas del disco o particion</p> espacio en disco eb GiB<pre><code>ruta = \"/\"\nuso_disco = psutil.disk_usage(ruta)\nespacio_usado = uso_disco.used    # espacio usado (en bytes)\nespacio_libre = uso_disco.free    # espacio libre (en bytes)\nprint(f\"Ruta: {ruta}\")\nprint(f\"Espacio usado: {espacio_usado / (1000**3):.4} GiB\") \nprint(f\"Espacio libre: {espacio_libre / (1000**3):.4} GiB\") \n</code></pre>"},{"location":"paquetes/psutil/#estadisticas-de-lecturaescritura","title":"estadisticas de lectura/escritura","text":"<p>Las estad\u00edsticas de lectura y escritura se calculan con la funci\u00f3n disk_io_counters():</p> <pre><code>data_io = psutil.disk_io_counters()\n</code></pre> Campos m\u00e1s importantes campo valor read_count N\u00ba operaciones lectura write_count N\u00ba operaciones escritura read_bytes data total leida (en bytes) write_bytes data total escrita (en bytes) <p>La informaci\u00f3n puede fragmentarse por partici\u00f3n con ayuda del argumento perdisk:</p> <pre><code>lista_data_io = psutil.disk_io_counters(perdisk=True)\n</code></pre>"},{"location":"paquetes/psutil/#uso-de-red","title":"Uso de red","text":""},{"location":"paquetes/psutil/#estadisticas-globales","title":"estadisticas globales","text":"<p>La informaci\u00f3n se condensa con la funci\u00f3n net_io_counters():</p> <pre><code>io_global = psutil.net_io_counters()\n</code></pre> <p>Datos disponibles:</p> Campos disponibles campo valor bytes_sent bytes enviados bytes_recv bytes recibidos packets_sent paquetes enviados packets_recv paquetes recibidos errin errores enviados errout errores recibidos dropin paquetes descartados enviados dropout paquetes descartados recibidos <p>Ejemplo de uso: medicion del uso de datos por red</p> Data de red en MB<pre><code># Uso de red\nio_global = psutil.net_io_counters()\nenviados = io_global.bytes_sent\nrecibidos = io_global.bytes_recv\nprint(\"Uso de red\")\nprint(f\"Datos enviados: {enviados/(1024**2):.4} MB\") \nprint(f\"Datos recibidos: {recibidos/(1024**2):.4} MB\")\n</code></pre>"},{"location":"paquetes/psutil/#configuracion-local","title":"configuracion local","text":"<p>Data de direcion MAC, IP's, etc: funci\u00f3n net_if_addrs()</p> <pre><code>data_equipo = psutil.net_if_addrs()   \n</code></pre>"},{"location":"paquetes/psutil/#canales","title":"canales","text":"<p>Estado de conexiones, velocidades de transmisi\u00f3n, tipos de transmisi\u00f3n, etc: funci\u00f3n net_if_stats() </p> <pre><code>data_canales = psutil.net_if_stats()  \n</code></pre>"},{"location":"paquetes/psutil/#estadisticas-por-canal","title":"estad\u00edsticas (por canal)","text":"<p>Informaci\u00f3n de conexiones de socket local y remoto: IP's, puertos, tipo de socket, etc.</p> <pre><code>lista_conexiones = psutil.net_if_stats()  \n</code></pre>"},{"location":"paquetes/psutil/#sensores-y-ventiladores","title":"Sensores y ventiladores","text":"Temperaturas<pre><code># temperaturas del sistema en grados Celsius salvo indicacion contraria\ndata_temperatura = psutil.sensors_temperatures(fahrenheit=False)  \n</code></pre> Ventiladores<pre><code># velocidad de ventiladores en RPM\ndata_ventiladores = psutil.sensors_fans()    # '{}' si no hay informaci\u00f3n\n</code></pre> Bater\u00eda<pre><code>data_bateria = psutil.sensors_battery() # 'None' si no se detecta\n</code></pre>"},{"location":"paquetes/psutil/#procesos-especificos","title":"Procesos espec\u00edficos","text":"<p>La data de proceso se gestiona con la clase Process: <pre><code>proceso  = psutil.Process()     # proceso actual\nproceso  = psutil.Process(pid)  # PID especificado\n</code></pre> Esta clase asigna una serie de m\u00e9todos para obtener la inforncion relevante del proceso: uso de memoria, procesamiento de CPU, conexiones IP, etc.</p>"},{"location":"paquetes/psutil/#estadisticas-de-memoria","title":"Estadisticas de memoria","text":"<p>El m\u00e9todo memory_info() da informaci\u00f3n sobre el consumo de memoria del proceso actua:</p> <pre><code>info_memoria = proceso.memory_info()\n</code></pre> <p>Campos m\u00e1s comunes:</p> Campos m\u00e1s habituales campo informaci\u00f3n rss uso de RAM en bytes vms uso de SWAP en bytes <p>Ejemplo de uso: uso de memoria por el proceso actual</p> <pre><code>proceso  = psutil.Process() \ninfo_memoria = proceso.memory_info()\ninfo_memoria.rss    # uso de RAM en bytes\ninfo_memoria.vms    # uso de SWAP en bytes\n</code></pre> <p>Estos campos son comunes para todos los sistemas operativos implementados. Los otros campos de informaci\u00f3n tienen nombres y disponibilidad que dependen del sistema operativo anfitri\u00f3n. </p> <p>Ver m\u00e1s informaci\u00f3n sobre memory_info(): sitio oficial </p>"},{"location":"paquetes/psutil/#estadisticas-del-procesamiento","title":"Estadisticas del procesamiento","text":"<p>Estado del proceso, n\u00facleo ejecutante y n\u00facleos habilitados para ejecutar:</p> <pre><code>proceso.status()        # estado actual\nproceso.cpu_num()       # N\u00ba procesador ejecutando el proceso\nproceso.cpu_affinity()  # N\u00ba procesadores habilitados para ejecutar este proceso\n</code></pre>"},{"location":"paquetes/psutil/#prioridad-del-proceso","title":"Prioridad del proceso","text":"<p>La prioridad de los procesos son n\u00fameros que el sistema operativo tiene en cuenta a la hora de repartir el tiempo de ejecuci\u00f3n de los n\u00facleos del CPU entre los procesos activos.</p> <p>La prioridad del proceso actual es accesible y modificable con el m\u00e9todo nice(): <pre><code>numero_prioridad = proceso.nice()    # lectura\nproceso.nice(numero_prioridad)       # escritura\n</code></pre> En UNIX el valor va t\u00edpicamente desde -20 (prioridad m\u00e1xima) a 20(prioridad m\u00ednima).</p>"},{"location":"paquetes/psutil/#cpu_percent_1","title":"cpu_percent()","text":"<p>Permite calcular el porcentaje de uso de todos los CPUs por el programa actual (puede superar el 100%):</p> <p><pre><code># porcentaje de exigencia del CPU\nporcentaje_total = proceso.cpu_percent(interval=None, percpu=False)  #  (desde ultimo llamado)\n</code></pre> Par\u00e1metros  - interval: tiempo de referencia  - percpu: resultado en lista de porcentajes , uno por core (V6 en adelante)</p> <p>Si no se indica un valor num\u00e9rico para interval se toma de referencia la anterior llamada del m\u00e9todo o en su defecto la importaci\u00f3n del m\u00f3dulo. Es conveniente que entre ambas llamadas hayan pasado al menos 0.1 segundos para mejor precisi\u00f3n.</p> <p>Ejemplo uso: demanda de CPU de una rutina completa</p> Porcentaje CPU del proceso<pre><code>#punto de referencia\nproceso.cpu_percent()  # retorna '0.0'-&gt; IGNORAR\n#procesamiento\nRutina()\n# medicion\nporcentaje = proceso.cpu_percent()   \n</code></pre>"},{"location":"paquetes/psutil/#cpu_times_1","title":"cpu_times()","text":"<p>Calcula los tiempos acumulados de procesamiento que demand\u00f3 el proceso desde su inicio hasta el presente. <pre><code>data_tiempos = proceso.cpu_times()     # informacion de tiempo de procesamiento en segundos\n</code></pre> Campos m\u00e1s habituales:</p> Campos m\u00e1s habituales campo valor user tiempo usado en modo usuario (segundos) system tiempo usado en modo kernel (segundos) <p>M\u00e1s informacion sobre cpu_times(): sitio oficial</p>"},{"location":"paquetes/psutil/#arbol-de-procesos","title":"Arbol de procesos","text":"<pre><code># Identificador (ID)\npid  = proceso.pid             # ID del proceso \nppid = proceso.ppid()          # ID del proceso padre \n\n# data \ndata_padre   = proceso.parent()     # proceso padre\nlista_padres = proceso.parents()    # lista de procesos \"padres\"/\"abuelos\"/etc\nlista_hijos  = proceso.children(recursive=False)  # lista de procesos hijos\n</code></pre>"},{"location":"paquetes/psutil/#hilos-threads","title":"Hilos (threads)","text":"<pre><code># hilos\ndata_hilos = proceso.threads()       # informacion de los hilos 'namedtuple'\nnro_hilos  = proceso.num_threads()   # numero hilos\n</code></pre>"},{"location":"paquetes/psutil/#ruta-de-programa","title":"Ruta de programa","text":"<pre><code>ruta_programa   = proceso.cwd()           # directorio del programa\n</code></pre>"},{"location":"paquetes/psutil/#archivos","title":"Archivos","text":"<p>Da informacion de los archivos afectados por el proceso: <pre><code># archivos abiertos\nlista_archivos = proceso.open_files()    \n</code></pre></p> Campos habituales campo valor path ruta de archivo fd n\u00ba descriptor  (-1 en Windows) <p>M\u00e1s sobre open_files()</p>"},{"location":"paquetes/psutil/#variables-de-entorno","title":"Variables de entorno","text":"<pre><code># diccionario con variables de entorno\nlista_archivos = proceso.environ()    \n</code></pre>"},{"location":"paquetes/psutil/#usuario-y-grupo","title":"Usuario y Grupo","text":"<pre><code>nombre_usuario = proceso.username()     # usuario actual\ndata_usuario = proceso.uids()           # informacion de usuario \ndata_usuario = proceso.gids()           # informacion de grupo\n</code></pre>"},{"location":"paquetes/psutil/#conexiones-ip","title":"Conexiones IP","text":"<p>Da informaci\u00f3n de los sockets (\"z\u00f3calos\" de conexi\u00f3n) creados por el proceso para las conexiones: <pre><code># informaci\u00f3n de sockets usados - lista de 'namedtuple'\nlista_sockets = proceso.net_connections()       # V &gt; 0.6.0\nlista_sockets = proceso.connections()           # V &lt; 0.6.0\n</code></pre> El resultado es una lista de estadisticas de cada socket. Cada una incluye:</p> Campos disponibles campo informaci\u00f3n fd descriptor del socket ladr rutas IP del sistema radr ruta IP del destinatario family versi\u00f3n de rutas IP (\"familia\"): IPv4, IPv6, etc type tipo de direcci\u00f3n: TCP / UDP / etc status estado de la conexi\u00f3n <p>M\u00e1s informaci\u00f3n sobre net_connections(): sitio oficial</p>"},{"location":"paquetes/psutil/#manejo-de-senales","title":"Manejo de se\u00f1ales","text":"<p>M\u00e9todos disponibles</p> m\u00e9todo se\u00f1al equivalente uso send_signal( nro_signal) {SIG} le env\u00eda una se\u00f1al  al proceso suspend() SIGSTOP suspende el proceso (lo deja en espera) resume() SIGCONT reanuda el proceso wait(timeout=None) --- espera al cierre, tiempo de expiraci\u00f3n en segundos terminate() SIGTERM termina  el proceso kill() SIGKILL mata el proceso <p>Ejemplo: ordenar el cierre de un proceso y esperar a su cumplimiento</p> Cerrar por PID<pre><code>proceso = psutil.Process(nro_pid)\nproceso.terminate()\nproceso.wait()          # espera indefinidamente de ser necesario\n</code></pre>"},{"location":"paquetes/psutil/#referencias","title":"Referencias","text":"<p>Readthedocs - Documentacion oficial</p> <p>Codigos Python - Monitoreo del sistema con Psutil en python</p>"},{"location":"paralelismo/","title":"Paralelismo de c\u00f3digo","text":"<p>En esta secci\u00f3n se exploran los mecanismos que Python proporciona para definir  m\u00faltiples rutinas definidas por el usuario que puedan ser ejecutadas simult\u00e1neamente.</p>"},{"location":"paralelismo/#contenidos","title":"Contenidos","text":"<p>{{ pagetree(siblings) }}</p>"},{"location":"paralelismo/hilos/","title":"Hilos","text":"","tags":["Hilos","Paralelismo","Locks","threading"]},{"location":"paralelismo/hilos/#hilos-threads","title":"Hilos (threads)","text":"<p>Los threads (hilos, hebras, etc) son bifurcaciones internas de los procesos que el desarrollador realiza deliberadamente. Esta pr\u00e1ctica ayuda a que un mismo n\u00facleo del procesador modernos pueda ejecutar varios trozos de c\u00f3digo en simult\u00e1neo. </p> <p>Los hilos comparten el acceso a las variables y funciones globales del programa. Adem\u00e1s, el cambio de hilos en ejecuci\u00f3n por el proceso es bastante r\u00e1pido por no exigir el llamado al sistema operativo.</p> <p>Superescalabilidad</p> <p>Existe un mecanismo t\u00e1cito para aprovechar el paralelismo entre instrucciones de un mismo hilo llamado superescalabilidad, donde el hardware del procesador intenta detectar instrucciones independientes entre s\u00ed de la rutina actual y las ejecuta en paralelo. </p>","tags":["Hilos","Paralelismo","Locks","threading"]},{"location":"paralelismo/hilos/#importacion","title":"Importaci\u00f3n","text":"<p>Para poder crear nuevos hilos se requiere importar el m\u00f3dulo <code>threading</code>:</p> <pre><code>import threading\n</code></pre>","tags":["Hilos","Paralelismo","Locks","threading"]},{"location":"paralelismo/hilos/#uso-de-hilos","title":"Uso de hilos","text":"","tags":["Hilos","Paralelismo","Locks","threading"]},{"location":"paralelismo/hilos/#creacion","title":"Creaci\u00f3n","text":"<p>El hilo se crea con la funci\u00f3n <code>Thread()</code>, el cual incluye como argumento la funci\u00f3n que engloba la rutina que debe ejecutarse: </p> <p>Creaci\u00f3n de threads<pre><code>def tarea():\n    return\n\n# creacion del hilo\nhilo = threading.Thread(target=tarea) \n</code></pre> Si la rutina / funci\u00f3n requiere valores de entrada estos se adjuntan como una lista o tupla dentro de la funci\u00f3n <code>Thread()</code>: </p> Creaci\u00f3n de threads - con argumentos<pre><code>def tarea(x,y):\n    return\n\n# argumentos = [x,y]      argumentos en formato lista\nargumentos = (x,y,)       #formato alternativo\n\n# creacion del hilo\nhilo = threading.Thread(target=tarea, args=argumentos) \n</code></pre>","tags":["Hilos","Paralelismo","Locks","threading"]},{"location":"paralelismo/hilos/#arranque","title":"Arranque","text":"<p>La ejecuci\u00f3n no comienza de inmediato sino que se ordena con el m\u00e9todo <code>start()</code>:</p> Arranque de threads<pre><code># orden de ejecucion del hilo\nhilo.start()    \n</code></pre>","tags":["Hilos","Paralelismo","Locks","threading"]},{"location":"paralelismo/hilos/#espera-al-cierre","title":"Espera al cierre","text":"<p>Si se necesita esperar a la finalizacion del hilo creado se recurre al m\u00e9todo <code>join()</code>. Con \u00e9l el hilo principal queda en espera hasta que que el hilo se cierre.</p> <p>Espera al cierre<pre><code># espera a la finalizacion del hilo para continuar\nhilo.join()     \n</code></pre> Puede definirse un tiempo de cierre m\u00e1ximo para la espera de la funci\u00f3n.</p> <p>Espera al cierre - con timeout<pre><code>hilo.join(timeout)     \n</code></pre> Si <code>timeout</code> es <code>None</code> entonces el tiempo de espera es indefinido.</p>","tags":["Hilos","Paralelismo","Locks","threading"]},{"location":"paralelismo/hilos/#intercambios-y-sincronizacion","title":"Intercambios y sincronizaci\u00f3n","text":"","tags":["Hilos","Paralelismo","Locks","threading"]},{"location":"paralelismo/hilos/#variables-compartidas","title":"Variables compartidas","text":"<p>Los hilos de derivados de un hilo principal comparten con el mismo un mismo proceso , y por ello tienen acceso a todas sus variables globales y datos globales internos. Por ello, a diferencia de los subprocesos, no requieren en principio la creaci\u00f3n de variables ni datos compartidos.</p>","tags":["Hilos","Paralelismo","Locks","threading"]},{"location":"paralelismo/hilos/#bloqueos","title":"Bloqueos","text":"<p>Los hilos, al igual que los procesos, recurren al uso de bloqueos para sincronizar hilos, proteger recursos compartidos, evitar errores, etc.</p> <p>El m\u00f3dulo <code>threading</code> tiene su propia implementaci\u00f3n de los bloqueos: <code>threading.Lock()</code></p> Crear bloqueos<pre><code>bloqueo = threading.Lock()     \n</code></pre> <p>Los bloqueos pueden usarse con cierre y apertura manual , o bien con ayuda de la cl\u00e1usula <code>with</code></p> Uso bloqueos - manual<pre><code>bloqueo.adquire()     \n# Rutina protegida    \nbloqueo.release()     \n</code></pre> Uso bloqueos - cla\u00fasula with<pre><code>with bloqueo:\n    # Rutina protegida    \n</code></pre> <p>El estado actual del bloqueo se consulta con el m\u00e9todo <code>locked()</code>:</p> Uso bloqueos - estado actual<pre><code>estado = bloqueo.locked()  \n</code></pre>","tags":["Hilos","Paralelismo","Locks","threading"]},{"location":"paralelismo/hilos/#atributos-de-los-threads","title":"Atributos de los threads","text":"","tags":["Hilos","Paralelismo","Locks","threading"]},{"location":"paralelismo/hilos/#estado","title":"Estado","text":"<p><code>is_alive()</code></p> <p><code>threading.active_count()</code></p> <p><code>threading.current_thread()</code></p>","tags":["Hilos","Paralelismo","Locks","threading"]},{"location":"paralelismo/hilos/#hilos-daemon","title":"Hilos 'daemon'","text":"<p>Los hilos daemonicos no admiten crear hilos derivados. Adem\u00e1s se cierran autom\u00e1ticamente cuando el hilo principal del proceso se cierra. Deben configurarse como tales antes de comenzar la ejecuci\u00f3n del hilo.</p> Configuracion como daemon<pre><code>hilo.daemon = True\n</code></pre>","tags":["Hilos","Paralelismo","Locks","threading"]},{"location":"paralelismo/hilos/#barreras-barrier","title":"Barreras (barrier)","text":"<p>Las barreras son primitivas sencillas para sincronizar un numero fijo de hilos. Los hilos se bloquean al invocarse en ellos el m\u00e9todo <code>wait()</code> hasta que todos ellos est\u00e9n bloqueados por dicho m\u00e9todo, liber\u00e1ndose entonces la ejecuci\u00f3n de todos ellos.</p> Barreras<pre><code>barrera = threading.Barrier( nro_hilos , timeout=None)\n\nTarea_1():\n\n    barrera.wait()\n\n\nTarea_2():\n\n    barrera.wait()\n</code></pre>","tags":["Hilos","Paralelismo","Locks","threading"]},{"location":"paralelismo/hilos/#referencias","title":"Referencias","text":"<p>Learn Tutorials - Procesos e hilos</p> <p>Documentaci\u00f3n oficial - Threading</p>","tags":["Hilos","Paralelismo","Locks","threading"]},{"location":"paralelismo/procesos/","title":"Procesos (proccess)","text":"<p>Los procesos (process) son \"programas\" unitarios cuya ejecuci\u00f3n es gestionada por el sistema operativo, el cual asigna cada proceso en activo a un n\u00facleo del procesador que est\u00e9 disponible para que se encargue de ejecutarlo. Los dem\u00e1s procesos quedan en espera hasta que el sistema operativo los ponga en activo de nuevo, los cierre o simplemente se terminen.</p> <p>Un programa completo puede estar compuesto por m\u00faltiples procesos vinculados entre s\u00ed. Esto permite:</p> <ul> <li>modularizar el programa al dividirlo en rutinas espec\u00edficas;</li> <li>mejorar los tiempos de ejecuci\u00f3n al repartir varios subprocesos del programa entre los n\u00facleos del procesador, permitiendo la ejecuci\u00f3n simult\u00e1nea.</li> </ul> <p>Python dispone de un m\u00f3dulo espec\u00edfico para la gesti\u00f3n de procesos llamado <code>multiprocessing</code>.</p>"},{"location":"paralelismo/procesos/#contenidos","title":"Contenidos","text":"<p>{{ pagetree(siblings)}}</p>"},{"location":"paralelismo/procesos/#referencias","title":"Referencias","text":"<p>Documentaci\u00f3n oficial - M\u00f3dulo <code>multiprocessing</code></p> <p>Learn Tutorials - Procesos e hilos</p> <p>El Blog Python - Crea m\u00faltiples procesos en python</p>"},{"location":"paralelismo/procesos/basico/","title":"Gesti\u00f3n de Procesos","text":"","tags":["Paralelismo","Procesos","multiprocessing"]},{"location":"paralelismo/procesos/basico/#creacion","title":"Creaci\u00f3n","text":"<p>El nuevo proceso se crea con la funci\u00f3n <code>Process()</code>, al cual se le debe asignar el nombre de una funci\u00f3n o \"tarea\" a ejecutar en un nuevo proceso:</p> Creaci\u00f3n procesos<pre><code>from multiprocessing import Process\n\n# rutina para el nuevo proceso\ndef tarea():\n    pass\n\n# creacion del proceso\nsubproceso = Process(target=tarea)\n</code></pre> <p>Subprocesos</p> <p>El nuevo proceso creado es considerado como proceso hijo del proceso que lo cre\u00f3. Tambi\u00e9n se lo suele llamar subproceso.</p>","tags":["Paralelismo","Procesos","multiprocessing"]},{"location":"paralelismo/procesos/basico/#argumentos","title":"Argumentos","text":"<p>Si la rutina requiere argumentos de entrada estos se adjuntan como una lista o tupla dentro de la funci\u00f3n <code>Process()</code>:</p> Creaci\u00f3n procesos - con argumentos<pre><code>from multiprocessing import Process\n\ndef tarea(*args, **kwargs):\n    pass\n\n# argumentos = [x,y]      # argumentos en formato lista\nargumentos = (x,y,)       # formato alternativo\n# creacion del proceso\nsubproceso = Process(\n    target=tarea,\n    args=lista_argumentos,\n    kwargs=diccionario_argumentos,\n    )\n</code></pre>","tags":["Paralelismo","Procesos","multiprocessing"]},{"location":"paralelismo/procesos/basico/#daemon","title":"'daemon'","text":"<p>Los procesos demonios (daemonic) tienen dos caracter\u00edsticas particulares:</p> <ul> <li>son cerrados autom\u00e1ticamente si el proceso invocador sea cerrado  (no pueden quedar hu\u00e9rfanos);</li> <li>impide que el subproceso 'daemonio' llame a sus propios subprocesos.</li> </ul> <p>El proceso se puede configurar como daemonio en su definici\u00f3n:</p> Creaci\u00f3n procesos - daemonio<pre><code>from multiprocessing import Process\n\ndef tarea():\n    pass\n\n# argumentos = [x,y]      # argumentos en formato lista\nargumentos = (x,y,)       # formato alternativo\n# creacion del proceso\nsubproceso = Process(\n    target=tarea,\n    daemon=True\n    )\n</code></pre> <p>o tambi\u00e9n puede usarse el atributo <code>daemon</code>:</p> Configuracion como daemon<pre><code>subproceso.daemon = True\n</code></pre> <p>Esta configuraci\u00f3n debe hacerse antes de ordenar la ejecuci\u00f3n. </p>","tags":["Paralelismo","Procesos","multiprocessing"]},{"location":"paralelismo/procesos/basico/#nombre","title":"Nombre","text":"<p>A cada proceso se le puede asignar un nombre opcional durante su creaci\u00f3n mediante el argumento <code>name</code>.</p> <p>El nombre tambi\u00e9n se puede cambiar en cualquier momento con el atributo <code>name</code>:</p> Nombre del proceso<pre><code>subproceso.name = nombre_elegido\n</code></pre> <p>Si no se elige un nombre entonces el programa tendr\u00e1 como nombre <code>Process-1</code>,<code>Process-2</code>, etc. </p>","tags":["Paralelismo","Procesos","multiprocessing"]},{"location":"paralelismo/procesos/basico/#arranque","title":"Arranque","text":"<p>El nuevo proceso queda en stand-by hasta que se ordene el arranque con el m\u00e9todo <code>start()</code>:</p> <pre><code># orden de ejecucion del proceso\nsubproceso.start()\n</code></pre>","tags":["Paralelismo","Procesos","multiprocessing"]},{"location":"paralelismo/procesos/basico/#espera-al-cierre","title":"Espera al cierre","text":"<p>Si el proceso original requiere esperar al cierre del proceso creado  para ejecutar m\u00e1s c\u00f3digo se recurre al m\u00e9todo <code>join()</code>. Con \u00e9l el proceso padre permanecer\u00e1 en espera hasta que el proceso se termine:</p> <p>Espera al cierre<pre><code># espera a que el proceso se cierre\nsubproceso.join()\n</code></pre> Al m\u00e9todo <code>join()</code> se le puede asignar un tiempo m\u00e1ximo de bloqueo como argumento: Espera al cierre - con timeout<pre><code># espera a que el proceso se cierre \ntiempo = 5\nsubproceso.join(tiempo)  # bloqueo por 5 segundos como m\u00e1ximo\n</code></pre></p>","tags":["Paralelismo","Procesos","multiprocessing"]},{"location":"paralelismo/procesos/basico/#ordenar-cierre","title":"Ordenar cierre","text":"<p>Se disponen de dos m\u00e9todos llamados <code>close()</code> and <code>terminate()</code> para pedir al sistema operativo el cierre del proceso:</p> Ordenar cierre<pre><code>subproceso.close()      # se\u00f1al 'SIGKILL'\nsubproceso.terminate()  # se\u00f1al 'SIGTERM'\n</code></pre> <p>Si hay subprocesos del proceso finalizados  (procesos \"nietos\") entonces \u00e9stos quedar\u00e1n hu\u00e9rfanos.</p> <p>Sincronismos y comunicaciones</p> <p>La terminaci\u00f3n forzosa de un subproceso que tenga acceso a elementos de sincronismo (locks, barrels, etc.)  o de comunicaci\u00f3n (pipes, qeues, etc. ) puede dejar a \u00e9stos inutilizables y/o arruinar el funcionamiento del resto de procesos relacionados.</p> <p>Usar con cuidado.</p>","tags":["Paralelismo","Procesos","multiprocessing"]},{"location":"paralelismo/procesos/basico/#consulta-de-estado","title":"Consulta de estado","text":"<p>El m\u00e9todo <code>is_alive</code> permite consultar si el proceso sigue activo:</p> estado actual<pre><code>retorno = subproceso.is_alive()\n</code></pre> <p>El retorno es <code>True</code> si sigue activo y <code>False</code> en caso contrario. </p>","tags":["Paralelismo","Procesos","multiprocessing"]},{"location":"paralelismo/procesos/basico/#valor-de-retorno","title":"Valor de retorno","text":"<p>El valor de retorno de los procesos creados se obtienen con el atributo <code>exitcode</code>:</p> valor de retorno<pre><code>retorno = subproceso.exitcode \n</code></pre> <p>Si el subproceso a\u00fan est\u00e1 vivo se devuelve <code>None</code>; en caso contrario t\u00edpicamente se devuelve <code>0</code> si la ejecuci\u00f3n termin\u00f3 correctamente.</p> <p>El valor de retorno puede cambiarse llamando a la funci\u00f3n <code>exit()</code> del m\u00f3dulo <code>sys</code> dentro de la tarea:</p> <pre><code>import sys\n\ndef tarea():\n    # (rutina)\n    # ....\n    # valor retorno\n    sys.exit( valor_custom )\n</code></pre>","tags":["Paralelismo","Procesos","multiprocessing"]},{"location":"paralelismo/procesos/basico/#ejemplo","title":"Ejemplo","text":"<p>Este demo imita el procesamiento paralelo de varias tareas demandantes e integra las opciones y m\u00e9todos vistos previamente: argumentos, valor de retorno, etc.</p> <p>Procesos con retorno</p> <pre><code>from multiprocessing import Process\nimport sys\n\nfrom time import sleep, time\nfrom random import random\n\ndef perder_tiempo(x, delay):\n    \"\"\"Esta tarea imita el procesamiento de una tarea demandante\"\"\"\n    print(f\"Nro. proceso: {x}, delay: {delay: 3.3} segundos\")\n    sleep(delay)\n    sys.exit( x )\n\n\ninicio = time()\n# nuevos subprocesos\nN = 3\nlista_procesos = []\nfor i in range(N):\n    # duracion arbitraria\n    delay = random()*3\n    # argumentos en formato lista\n    argumentos = [i , delay]\n    # creacion del proceso\n    proceso = Process(\n        target=perder_tiempo,\n        args=argumentos)\n    proceso.daemon = True\n    proceso.start()\n    lista_procesos.append(proceso)\n\n# espera al cierre de procesos\nfor proceso in lista_procesos:\n    proceso.join()\n    retorno = proceso.exitcode\n    print(f\"Valor de retorno: {retorno}\")\n\n# reporte de duraci\u00f3n total\nfin = time()\nprint(f\"Terminado - tiempo transcurrido: {fin-inicio: 3.3} segundos\")\n</code></pre> <p>El reporte producido es parecido al siguiente:</p> <pre><code>Nro. proceso: 1, delay:  1.26 segundos\nNro. proceso: 0, delay:  1.33 segundos\nNro. proceso: 2, delay:  1.18 segundos\nValor de retorno: 0\nValor de retorno: 1\nValor de retorno: 2\nTerminado - tiempo transcurrido:  1.35 segundos\n</code></pre>","tags":["Paralelismo","Procesos","multiprocessing"]},{"location":"paralelismo/procesos/bloqueo/","title":"Bloqueos (lock)","text":"<p>A menudo se requiere sincronizar varios procesos paralelos para poder presentar resultados, acceder a ciertos recursos compartidos,  etc. de manera que s\u00f3lo uno de ellos pueda acceder a la vez. Uno de los m\u00e9todos m\u00e1s habituales para este prop\u00f3sito es el uso del bloqueo o candado (lock).</p>"},{"location":"paralelismo/procesos/bloqueo/#creacion","title":"Creaci\u00f3n","text":"<p>El bloqueo es creado con la funci\u00f3n <code>Lock()</code>, el cual se importa desde el m\u00f3dulo <code>multirpocessing</code>:</p> Creacion candados<pre><code>from multiprocessing import Lock\n\nbloqueo = multiprocessing.Lock()\n</code></pre>"},{"location":"paralelismo/procesos/bloqueo/#uso","title":"Uso","text":""},{"location":"paralelismo/procesos/bloqueo/#manual","title":"Manual","text":"<p>Una forma de usar el bloqueo es mediante el uso manual del bloqueo con los m\u00e9todos <code>acquire()</code> y <code>release()</code>:</p> Uso candados<pre><code># bloqueo manual\nbloqueo.acquire()\n\n# acceso al recurso protegido\nnumero_compartido.value += 1\n\n# liberacion manual\nbloqueo.release()\n</code></pre> <p>El m\u00e9todo <code>acquire()</code> hace que el bloqueo impida el acceso a otros procesos del recurso compartido. Una vez utilizado el recurso protegido  es indispensable liberar su acceso llamando al m\u00e9todo <code>release()</code>, de otra manera los otros procesos quedar\u00e1n suspendidos indefinidamente.</p>"},{"location":"paralelismo/procesos/bloqueo/#con-administrador-de-contexto","title":"Con administrador de contexto","text":"<p>Otra forma de usar el bloqueo es con la ayuda de la cl\u00e1sula <code>with</code>:</p> Uso candados - con with<pre><code>with bloqueo:\n    # recurso compartido\n    numero_compartido.value += 1\n</code></pre> <p>En este caso el bloqueo y la liberaci\u00f3n del recurso se hacen autom\u00e1ticamente.</p>"},{"location":"paralelismo/procesos/bloqueo/#ejemplo-de-uso","title":"Ejemplo de uso","text":"<p>T\u00f3mese por ejemplo un programa que crea cuatro procesos, los cuales acceden a un recurso compartido y se demoran en ello exactamente 0.5 segundos:</p> <pre><code>from multiprocessing import Process, Value, Lock\nfrom time import time, sleep\n\n\ncontador = Value('d', 0)\nbloqueo  = Lock()\n\ndef incremento():\n    \"\"\"Se imita una tarea que intenta acceder a un recurso compartido.\"\"\"\n    with bloqueo:\n        # se simula un recurso ocupado o una rutina exigente\n        sleep(0.5)\n        # acceso a un recurso compartido\n        contador.value += 1\n\n\ntiempo_inicio = time()\n\n# procesos con acceso al recurso compartido\nsubprocesos = [Process(target=incremento) for n in range(4)]\nfor proceso in subprocesos:\n    proceso.start()\n\n# espera al cierre de procesos\nfor proceso in subprocesos:\n    proceso.join()\n\ntiempo_fin = time()\nprint(\"Tiempo ejecuci\u00f3n: %.2f seg\" % (tiempo_fin - tiempo_inicio))\nprint(\"El n\u00famero compartido es %d\" % (contador.value))\n</code></pre> <p>En este ejemplo el resultado es la ejecuci\u00f3n concurrente de los procesos debido a que el bloqueo s\u00f3lo admite el acceso de un proceso a la vez:</p> <pre><code>Tiempo ejecuci\u00f3n: 2.01 seg\nEl n\u00famero compartido es 4\n</code></pre>"},{"location":"paralelismo/procesos/compartidos/","title":"Variables compartidas","text":"<p>Los procesos no comparten variables de manera predeterminada. Al crearse los procesos hijos, en estos se copian los valores de las variables originales del proceso padre cre\u00e1ndose r\u00e9plicas que conservan los valores al momento de la creaci\u00f3n pero que son independientes de las variables originales.</p> <p>Para crear variables y datos que necesitan ser compartidos por m\u00faltiples subprocesos se usan las funciones <code>Value()</code> y <code>Array()</code>. Estas variables deben ser creadas antes de crear los procesos hijos, de otro modo no se compartir\u00e1n.</p> <p>Algunas opciones para ambas funciones:</p> Opci\u00f3n Descripci\u00f3n <code>i</code> entero con signo <code>d</code> flotante - doble precisi\u00f3n <p>M\u00e1s opciones: modulo <code>array</code></p>"},{"location":"paralelismo/procesos/compartidos/#variables-value","title":"Variables - <code>Value()</code>","text":""},{"location":"paralelismo/procesos/compartidos/#creacion","title":"Creaci\u00f3n","text":"<p>Las variables se crean con la funci\u00f3n <code>Value()</code>, a la que se le indica el tipo de variable interna y su valor inicial:</p> variable compartida - crear<pre><code>from multiprocessing import Value\nnumero_compartido  = Value(opcion, valor_inicial)  # variable\n</code></pre> <p>Por ejemplo, para crear una variable contador que pueda ser compartida entre varios procesos se hace: </p> variable compartida - ejemplo<pre><code>contador = Value('i', 0)    # entero, valor inicial nulo\n</code></pre>"},{"location":"paralelismo/procesos/compartidos/#acceso","title":"Acceso","text":"<p>El objeto creado guarda el valor asignado dentro del campo <code>value</code>, el cual admite lectura y escritura:</p> variable compartida - leer y modificar<pre><code>valor = numero_compartido.value     # leer\nnumero_compartido.value += 1        # escribir\n</code></pre>"},{"location":"paralelismo/procesos/compartidos/#proteccion","title":"Protecci\u00f3n","text":"<p>Las variables tienen una protecci\u00f3n interna, un \"lock\". Con \u00e9l se puede prevenir el acceso simult\u00e1neo de m\u00faltiples procesos, obligando al acceso secuencial de los procesos a la variable:</p> variable compartida - protecci\u00f3n<pre><code>with numero_compartido.get_lock():     # bloqueo\n    numero_compartido.value += 1       # acceso\n</code></pre> <p>Esto permite prevenir errores relacionados con la escritura: una lectura mientras el valor est\u00e1 siendo cambiado por otro proceso, una doble escritura en simult\u00e1eno, etc. </p>"},{"location":"paralelismo/procesos/compartidos/#listas-array","title":"Listas - <code>Array()</code>","text":""},{"location":"paralelismo/procesos/compartidos/#creacion_1","title":"Creacion","text":"<p>La funci\u00f3n <code>Array()</code> crea los arreglos con el formato de datos y la lista inicial elegidos:</p> arreglo compartido - crear<pre><code>from multiprocessing import Array\narreglo_compartido = Array(opcion, lista_datos)\n</code></pre> <p>por ejemplo para crear una lista de valores enteros:</p> arreglo compartido - ejemplo<pre><code>arreglo_compartido = multiprocessing.Array('i', [8, 1 ,8, 0, 5 , -3])\n</code></pre>"},{"location":"paralelismo/procesos/compartidos/#lectura","title":"Lectura","text":"<p>La lista de valores guardados se consulta con la funci\u00f3n <code>list()</code>:</p> <p>variable compartida - lectura<pre><code>lista = list(arreglo_compartido)\n</code></pre> o tambi\u00e9n se puede hacer por slicing:</p> variable compartida - lectura<pre><code>lista = arreglo_compartido[:]\n</code></pre>"},{"location":"paralelismo/procesos/compartidos/#proteccion_1","title":"Protecci\u00f3n","text":"<p>Los arreglos tambi\u00e9n admite protecci\u00f3n por bloqueo, la cual se usa de manera an\u00e1loga a las variables compartidas:</p> variable compartida - protecci\u00f3n<pre><code>with arreglo_compartido.get_lock():\n    lista = arreglo_compartido[:]\n</code></pre>"},{"location":"paralelismo/procesos/evento/","title":"Evento (event)","text":"<p>El elemento de sincronismo <code>Event</code> permite dejar en espera la rutina de un proceso y habilitar su ejecuci\u00f3n desde otro.</p>"},{"location":"paralelismo/procesos/evento/#creacion","title":"Creaci\u00f3n","text":"<p>Los eventos se crean con la funci\u00f3n <code>Event()</code>, la cual se importa desde el m\u00f3dulo <code>multiprocessing</code>:</p> <p>Eventos - creaci\u00f3n<pre><code>from multiprocessing import Event\n\nevento = Event()\n</code></pre> Esta funci\u00f3n no tiene argumentos. El evento se crea en estado deshabilitado.</p>"},{"location":"paralelismo/procesos/evento/#uso","title":"Uso","text":""},{"location":"paralelismo/procesos/evento/#consulta-de-estado","title":"Consulta de estado","text":"<p>El m\u00e9todo <code>is_set()</code> verifica si el evento ha sido habilitado. </p> Eventos - consulta<pre><code>evento.is_set()\n</code></pre>"},{"location":"paralelismo/procesos/evento/#espera-de-evento","title":"Espera de evento","text":"<p>La suspensi\u00f3n condicional de la rutina se impone con el m\u00e9todo <code>wait()</code>:</p> Eventos - espera<pre><code>evento.wait()\n</code></pre> <p>Si el evento fue habilitado  entonces el evento permitir\u00e1 la ejecuci\u00f3n de la rutina posterior; en caso contrario el proceso quedar\u00e1 en espera.</p>"},{"location":"paralelismo/procesos/evento/#orden-de-espera","title":"Orden de espera","text":"<p>El evento se deshabilita con el m\u00e9todo <code>clean()</code>, lo que ordena el bloqueo con el m\u00e9todo <code>wait()</code>.</p> Eventos - borrado<pre><code>evento.clear()\n</code></pre>"},{"location":"paralelismo/procesos/evento/#orden-de-ejecucion","title":"Orden de ejecuci\u00f3n","text":"<p>El m\u00e9todo <code>set()</code> es el encargado de habilitar el evento, desbloqueando el m\u00e9todo <code>wait()</code>:</p> Eventos - seteo<pre><code>evento.set()\n</code></pre>"},{"location":"paralelismo/procesos/evento/#ejemplo-de-uso","title":"Ejemplo de uso","text":"<p>En este ejemplo se muestra la implementaci\u00f3n de un medidor de progreso implementado en un proceso hijo, el cual se autobloquea cada vez que se imprime el proceso en pantalla.</p> Medidor de progreso - proceso indicador<pre><code>def mostrar_progreso():\n    \"\"\"Esta tarea reporta en consola el porcentaje de procesos completados.\"\"\"\n    while True:\n        proceso_finalizado.wait()   # espera\n        i = contador_procesos.value\n        proceso_finalizado.clear()   # bloqueo\n        print(f\"Progreso: {100*i/N: 3.4}%\")\n</code></pre> <p>El trabajo se reparte en otros subprocesos  que liberan la ejecuci\u00f3n del proceso medidor a medida que se completan:</p> Medidor de progreso - procesos de carga<pre><code>def perder_tiempo(x, delay):\n    \"\"\"Esta tarea imita el procesamiento de una tarea demandante\"\"\"\n    print(f\"Nro. proceso: {x}, delay: {delay: 3.3} segundos\")\n    sleep(delay)\n    contador_procesos.value += 1\n    proceso_finalizado.set()    # liberacion\n</code></pre> Rutina completa Medidor de progreso - rutina completa<pre><code>from multiprocessing import Process\nfrom multiprocessing import Value, Event\nfrom time import sleep, time\nfrom random import random\n\ncontador_procesos = Value('i', 0)\nproceso_finalizado = Event()\n\nN = 6\n\ndef mostrar_progreso():\n    \"\"\"Esta tarea reporta en consola el porcentaje de procesos completados.\"\"\"\n    while True:\n        proceso_finalizado.wait()\n        i = contador_procesos.value\n        proceso_finalizado.clear()\n        print(f\"Progreso: {100*i/N: 3.4}%\")\n\n\ndef perder_tiempo(x, delay):\n    \"\"\"Esta tarea imita el procesamiento de una tarea demandante\"\"\"\n    print(f\"Nro. proceso: {x}, delay: {delay: 3.3} segundos\")\n    sleep(delay)\n    contador_procesos.value += 1\n    proceso_finalizado.set()\n\n\n# proceso monitor - cierre autom\u00e1tico\nmonitor = Process(\n    target=mostrar_progreso\n    )\nmonitor.daemon = True\nmonitor.start()\n\nlista_procesos = []\n\ninicio = time()\nfor i in range(N):\n    # duracion arbitraria\n    delay = random()*5\n    # argumentos en formato lista\n    argumentos = [i , delay]\n    # creacion del proceso\n    proceso = Process(\n        target=perder_tiempo,\n        args=argumentos)\n    proceso.daemon = True\n    proceso.start()\n    lista_procesos.append(proceso)\n\n# espera al cierre de procesos\nfor proceso in lista_procesos:\n    proceso.join()\n\n# reporte de duraci\u00f3n total\nfin = time()\nprint(f\"Terminado - tiempo transcurrido: {fin-inicio: 3.3} segundos\")\n</code></pre> <p>El reporte por consola es similar a este:</p> Medidor de progreso - reporte<pre><code>Nro. proceso: 0, delay:  2.44 segundos\nNro. proceso: 2, delay:  1.05 segundos\nNro. proceso: 3, delay:  0.235 segundos\nNro. proceso: 1, delay:  4.19 segundos\nNro. proceso: 4, delay:  3.12 segundos\nNro. proceso: 5, delay:  1.33 segundos\nProgreso:  16.67%\nProgreso:  33.33%\nProgreso:  50.0%\nProgreso:  66.67%\nProgreso:  83.33%\nProgreso:  100.0%\nTerminado - tiempo transcurrido:  4.2 segundos\n</code></pre>"},{"location":"paralelismo/procesos/forks/","title":"Bifurcaciones (forks)","text":"<p>Un mecanismo antiguo para crear procesos es la bifurcaci\u00f3n. Consiste en hacer una r\u00e9plica exacta del proceso actual con ayuda de la funci\u00f3n <code>fork()</code>, cuyo retorno permite discernir entre el proceso original y su clon.</p> <p>S\u00f3lo POSIX</p> <p>Este mecanismo s\u00f3lo est\u00e1 disponible en sistemas POSIX.</p>"},{"location":"paralelismo/procesos/forks/#creacion","title":"Creaci\u00f3n","text":"<p>La funci\u00f3n <code>fork()</code> se obtiene  desde el m\u00f3dulo <code>os</code>.</p> Forks - Creaci\u00f3n<pre><code>from os import fork\n\nretorno = os.fork()\n</code></pre> <p>Esta funci\u00f3n no requiere argumentos adicionales.</p> <p>El proceso clon es distinguido del original en base al valor de retorno de la funci\u00f3n, tal como se ve a continuaci\u00f3n.</p>"},{"location":"paralelismo/procesos/forks/#retorno","title":"Retorno","text":"<p>El valor de retorno obtenido no es igual para el proceso original que para su clon, permitiendo diferenciarlos desde la rutina:</p> retorno significado <code>retorno &gt; 0</code> Proceso original - devuelve el ID del proceso clon <code>retorno == 0</code> Es un clon del proceso original <code>retorno &lt; 0</code> Error de bifurcaci\u00f3n - bifurcaci\u00f3n fallida"},{"location":"paralelismo/procesos/forks/#estructura","title":"Estructura","text":"<p>La bifurcaci\u00f3n no delimita las rutinas espec\u00edficas del proceso original y de su clon en base a \"tareas\" o funciones sino que las delimita con el uso de saltos condicionales:</p> Forks - estructura<pre><code>from os import fork\n\n# bifurcacion\nretorno = fork()\n\n# proceso original: \nif retorno &gt; 0:\n    # Rutina del original\n\n# proceso clon: retorno = 0\nelif retorno == 0:\n    # Rutina del clon\n\n# bifurcacion fallida\nelse:\n    # Rutina de error\n</code></pre>"},{"location":"paralelismo/procesos/forks/#ejemplo-de-uso","title":"Ejemplo de uso","text":"<p>Esta rutina sencilla crea un fork y muestra los PIDs que ve cada uno de los procesos resultantes:</p> Forks - ejemplo<pre><code>from os import fork\n\n# Rutina com\u00fan\nprint(\"\u00a1Vamos a hacer un fork de un proceso!\")\n\n# bifurcacion\nretorno = fork()\n\n# proceso original: retorno = ID proceso hijo\nif retorno &gt; 0:\n    pid = os.getpid()\n    print(\"Rutina del proceso original\")\n    print(f\"pid: {pid}, retorno: {retorno}\")\n\n# proceso clon: retorno = 0\nelif retorno == 0:\n    pid = os.getpid()\n    print(\"Rutina del proceso hijo\")\n    print(f\"pid = {pid}, retorno: {retorno}\")\n\n# error : retorno &lt; 0\nelse:\n    print(\"Error de bifurcaci\u00f3n\")\n</code></pre> <p>El reporte en la shell es algo parecido a esto:</p> Forks - reporte<pre><code>\u00a1Vamos a hacer un fork de un proceso!\nRutina del proceso original\npid: 2779587, retorno: 2779588\nRutina del proceso hijo\npid = 2779588, retorno: 0\n</code></pre>"},{"location":"paralelismo/procesos/info/","title":"informaci\u00f3n de procesos","text":""},{"location":"paralelismo/procesos/info/#id-de-procesos","title":"ID de procesos","text":"<p>El n\u00famero identificador (ID) del proceso creado se consulta con el atributo <code>pid</code>:</p> <p>ID del proceso<pre><code>pid = subproceso.pid\n</code></pre> Este n\u00famero es gestionado por el sistema operativo y no es modificable.</p> <p>El subproceso no es capaz de ver este atributo.</p> <p>Modulo <code>os</code></p> <p>El m\u00f3dulo <code>os</code> incluye los m\u00e9todos <code>getpid</code> y <code>getppid</code> para consultar el ID propio y el del proceso invocador.</p> IDs desde subproceso<pre><code>os.getpid()     # ID proceso actual\nos.getppid()    # ID proceso padre\n</code></pre> <p>Ejemplo de uso:</p> IDs - consulta<pre><code>from multiprocessing import Process\nimport os\n\n\ndef identificador():\n    print(\"Proceso hijo\")\n    print(\"ID:       %s\" % (os.getpid()))\n    print(\"ID padre: %s\" % (os.getppid()))\n\n\nsubproceso = Process(target=identificador)\nsubproceso.start()\nsubproceso.join()\n\nprint(\"Proceso original\")\nprint(\"ID hijo:  %s\" % (subproceso.pid))\nprint(\"ID:       %s\" % (os.getpid()))\n</code></pre> <p>En el mensaje creado  en consola  se verifican que los n\u00fameros de ID coinciden: </p> IDs - Reporte<pre><code>Proceso hijo\nID:       3502272\nID padre: 3502271\nProceso original\nID hijo:  3502272\nID:       3502271\n</code></pre>"},{"location":"paralelismo/procesos/pipe/","title":"Tuber\u00eda (Pipe)","text":"<p>Las pipes (\"tuberias\") son un elemento de intercambio que permite transmitir variables y datos entre dos procesos. Los datos forman una estructura FIFO (First In, First Out): los primeros datos en entrar son tambi\u00e9n los primeros en salir.</p>"},{"location":"paralelismo/procesos/pipe/#creacion","title":"Creaci\u00f3n","text":"<p>La creaci\u00f3n de tuber\u00edas se realiza con la funci\u00f3n <code>Pipe()</code>, la cual se importa desde el m\u00f3dulo <code>multiprocessing</code>:</p> Pipe - creacion (duplex)<pre><code>from multiprocessing import Pipe\n\n[extremo_A, extremo_B] = Pipe()\n</code></pre> <p>Esta funci\u00f3n crea dos objetos juntos que funcionan como extremos del canal de comunicaci\u00f3n.</p> <p>Por default la transmisi\u00f3n es bidireccional (duplex). Si se necesita hacer la transmisi\u00f3n unidireccional entonces se asigna el valor <code>False</code> a su argumento <code>duplex</code>:</p> Pipe - creacion (unidireccional)<pre><code>from multiprocessing import Pipe\n\n[extremo_emisor, extremo_receptor] = Pipe(False)\n</code></pre>"},{"location":"paralelismo/procesos/pipe/#metodos","title":"M\u00e9todos","text":""},{"location":"paralelismo/procesos/pipe/#sondeo","title":"Sondeo","text":"<p>El m\u00e9todo <code>poll()</code> (\"sondeo\", \"encuesta\") permite tanto verificar la existencia de datos en la tuber\u00eda como bloquear la rutina hasta que se ingresen nuevos datos.</p> <p>Modo sondeo: sin argumentos</p> <p>Pipe - sondeo<pre><code>data_disponible = extremo.poll() \n</code></pre> Modo bloqueante: entrada <code>None</code></p> Pipe - sondeo (modo bloqueante)<pre><code>extremo.poll(None) \n</code></pre>"},{"location":"paralelismo/procesos/pipe/#envio","title":"Env\u00edo","text":"<p>Los objetos de entrada (variables, datos est\u00e1ndar, otros) se ingresan con el m\u00e9todo <code>send()</code>:</p> Pipe - envio<pre><code>extremo.send( objeto_entrada )\n</code></pre> <p>Este m\u00e9todo puede ser llamado sucesivamente m\u00faltiples veces para cargar m\u00faltiples objetos de datos en la tuber\u00eda. Estos datos quedan almacenados hasta que sean le\u00eddos.</p> <p>El tama\u00f1o m\u00e1ximo t\u00edpico del objeto enviado es de 32 MB. Si se supera este valor se dispara el error <code>ValueError</code>.</p> <p>Si el objeto a enviar es una sucesi\u00f3n de bytes entonces se usa el m\u00e9todo <code>send_bytes()</code></p> Pipe - envio binario<pre><code>extremo.send_bytes( objeto_binario )\n</code></pre>"},{"location":"paralelismo/procesos/pipe/#recepcion","title":"Recepci\u00f3n","text":"<p>La recepci\u00f3n se realiza con el m\u00e9todo <code>recv()</code>, el cual lee un \u00fanico elemento recibido:</p> <p>Pipe - recepci\u00f3n<pre><code>data = extremo.recv()\n</code></pre> Este m\u00e9todo bloquea la ejecuci\u00f3n si no hay datos dentro de la tuber\u00eda. El valor le\u00eddo ser\u00e1 el primero en haber sido ingresado y ser\u00e1 borrado de la tuber\u00eda.</p> <p>Si el otro extremo de la tuberia ya fue cerrado y no quedan datos por leer se produce el error <code>EOFError</code>.</p> <p>Si la informaci\u00f3n de entrada est\u00e1 en formato binario se usa el m\u00e9todo <code>recv_bytes()</code>:</p> Pipe - recepci\u00f3n binaria<pre><code>data_binaria = extremo.recv_bytes()\n</code></pre>"},{"location":"paralelismo/procesos/pipe/#identificacion","title":"Identificaci\u00f3n","text":"<p>El m\u00e9todo <code>fileno()</code> devuelve el identificador del extremo de la tuber\u00eda que lo llama:</p> Pipe - identificador<pre><code>id_a = extremo_A.fileno()\nid_b = extremo_B.fileno()\n</code></pre> <p>N\u00f3tese que los dos extremos no tienen el mismo ID.</p>"},{"location":"paralelismo/procesos/pipe/#cierre","title":"Cierre","text":"<p>El m\u00e9todo <code>close()</code> cierra la conexi\u00f3n. No anula el otro extremo del tubo.</p>"},{"location":"paralelismo/procesos/pipe/#ejemplo","title":"Ejemplo","text":"<p>Este demo sencillo muestra como mandar una lista de valores predefinida de un subproceso a otro.</p> Pipes - demo <pre><code>from multiprocessing import Process\nfrom multiprocessing import Pipe\nfrom time import sleep\n\n# creacion de tuberia - unidireccional\n[extremo_emisor, extremo_receptor] = Pipe(False)\n\n\ndef receptor(extremo_tubo):\n    \"\"\"Tarea para la recepcion de datos\"\"\"\n    print(\"Receptor listo\")\n    if extremo_tubo.poll(None) is True:\n        while extremo_tubo.poll() is True:\n            # recepcion - un elemento a la vez\n            elemento = extremo_tubo.recv()\n            print(f\"recibido: {elemento}\")\n\n        print(\"recepcion finalizada\")\n    else:\n        print(\"tuberia vacia\")\n\n    extremo_tubo.close()\n    print()\n\n\ndef transmisor(extremo_tubo):\n    \"\"\"Tarea para el envio de datos\"\"\"\n    print(\"Transmisor listo\")\n    lista = [\"hola\", 1.0 , True, 27]\n    for l in lista:\n        # transmision - un elemento a la vez\n        extremo_tubo.send(l)\n        print(f\"enviado: {l}\")\n\n    print(\"transmision finalizada\")\n    extremo_tubo.close()\n    print()\n\n\n# subprocesos para gestionar la tuberia\nsub_transmisor = Process(\n    target=transmisor,\n    args=(extremo_receptor,),\n    daemon=True,\n    )\n\nsub_receptor = Process(\n    target=receptor,\n    args=(extremo_emisor,),\n    daemon=True,\n    )\n\n# se carga la tuberia \nsub_transmisor.start()\n# lectura de datos atrasada\nsleep(0.2)\nsub_receptor.start()\n\n# espera al cierre de procesos\nsub_transmisor.join()\nsub_receptor.join()\nprint(\"Finalizado\")\n</code></pre> <p>El texto por consola es el siguiente: <pre><code>Transmisor listo\nenviado: hola\nenviado: 1.0\nenviado: True\nenviado: 27\ntransmision finalizada\n\nReceptor listo\nrecibido: hola\nrecibido: 1.0\nrecibido: True\nrecibido: 27\nrecepcion finalizada\n\nFinalizado\n</code></pre></p>"},{"location":"paralelismo/procesos/pipe/#referencias","title":"Referencias","text":"<p>Python.org - M\u00f3dulo <code>multiprocesing</code></p>"},{"location":"paralelismo/procesos/pool/","title":"Reservas de trabajadores (pools)","text":"<p>Las pools of workers o \"reservas de trabajadores\" funcionan como una reserva de tareas a ejecutarse en procesos hijos paralelos. Las reservas administran la cantidad de procesos hijos en simult\u00e1neo de manera que \u00e9stos no superen la cantidad m\u00e1xima elegida. Cada tarea de entrada es asignada a un proceso hijo y puesta en marcha autom\u00e1ticamente a menos que la cantidad m\u00e1xima de procesos elegida haya sido alcanzada. En tal caso, la reserva deja las tareas sin asignar en espera hasta que los procesos ya creados vayan terminando e crea nuevos procesos hasta alcanzar el m\u00e1ximo nuevamente o terminar la lista.</p> <p>Este mecanismo ayuda a utilizar m\u00e1s eficientemente los recursos del sistema ante un gran nu\u1e3fero de tareas, al prevenir que una cantidad exagerada de procesos sean creados simult\u00e1neamente y consuman los recursos de manera in\u00fatil o lleven incluso al fallo del programa.</p>"},{"location":"paralelismo/procesos/pool/#creacion","title":"Creaci\u00f3n","text":"<p>La reserva se crea con la funci\u00f3n <code>Pool()</code>, al cual debe indic\u00e1rsele el m\u00e1ximo n\u00famero de procesos ejecutables en paralelo:</p> <p>Crear pool<pre><code>pool = multiprocessing.Pool(processes=nro_procesos_simultaneos)    \n</code></pre> El n\u00famero de procesos elegidos es t\u00edpicamente el n\u00famero de n\u00facleos disponibles del procesador a usar.</p>"},{"location":"paralelismo/procesos/pool/#asignacion","title":"Asignaci\u00f3n","text":"<p>Con el m\u00e9todo <code>map()</code> se ordena la ejecuci\u00f3n simult\u00e1nea de un grupo de tareas:</p> Arrancar pool<pre><code>pool.map(funcion_tarea, lista_argumentos) \n</code></pre> <p>Los argumentos se condensan en una lista, de manera que la reserva pueda asignar un elemento a cada nuevo worker.</p> <p>A medida que se termina una tarea se cierra su proceso y se arranca uno nuevo para ejecutar la pr\u00f3xima tarea pendiente. </p>"},{"location":"paralelismo/procesos/pool/#cierre","title":"Cierre","text":"<p>El cierre de la reserva se asegura con el m\u00e9todo <code>terminate()</code>:</p> Cerrar pool<pre><code>pool.terminate()\n</code></pre> <p>Este m\u00e9todo espera a que todos los workers internos hayan completado su tarea, entonces la ejecuci\u00f3n de la rutina contin\u00faa.</p>"},{"location":"paralelismo/procesos/pool/#conteo-de-nucleos","title":"Conteo de n\u00facleos","text":"<p>El m\u00f3dulo <code>multiprocessing</code> dispone de la funci\u00f3n <code>cpu_count()</code> para consultar el n\u00famero de n\u00facleos l\u00f3gicos existentes en el sistema:</p> <p>N\u00ba de N\u00facleos<pre><code>from multiprocessing import cpu_count\n\nnro_cores = cpu_count()  \n</code></pre> Debe tenerse en cuenta que algunos n\u00facleos pueden no estar disponibles para su uso.</p>"},{"location":"paralelismo/procesos/pool/#ejemplo-de-uso","title":"Ejemplo de uso","text":"<p>En este ejemplo se crean varias tareas que demoran un n\u00famero arbitrario de segundos para finalizar. Los argumentos de estas tareas son el nombre asignado a cada una.</p> Ejemplo - demora arbitraria<pre><code>import random\nimport time\nfrom multiprocessing import Pool, cpu_count\n\n\n# tarea gen\u00e9rica con argumentos de entrada\ndef tarea(nombre: str) -&gt; None:\n    print(f'Arranca el trabajador de \"{nombre}\"')\n    # tiempo de ejecuci\u00f3n aleatorio\n    tiempo_rutina = random.choice(range(1, 5))\n    time.sleep(tiempo_rutina )\n    print(f'Tarea \"{nombre}\" finalizada en {tiempo_rutina} segundos')\n\n\n# lista de argumentos - nombres para cada tarea \nnombres_proceso = [f'Tarea_{i}' for i in range(1, 9)]\n\n# consulta de nucleos logicos\nnro_cores = cpu_count()            \n\n# ejecuci\u00f3n de a grupos \npool = Pool(processes=nro_cores) \npool.map(tarea, nombres_proceso)    \n\n# cierre de reserva\npool.terminate()\n</code></pre> <p>Si el c\u00f3digo es ejecutado en un equipo de 4 n\u00facleos, el resultado es un texto en consola como el que sigue:</p> Texto en consola<pre><code>Arranca el trabajador de \"Tarea_1\"\nArranca el trabajador de \"Tarea_2\"\nArranca el trabajador de \"Tarea_3\"\nArranca el trabajador de \"Tarea_4\"\nTarea \"Tarea_4\" finalizada en 1 segundos\nArranca el trabajador de \"Tarea_5\"\nTarea \"Tarea_1\" finalizada en 3 segundos\nArranca el trabajador de \"Tarea_6\"\nTarea \"Tarea_5\" finalizada en 2 segundos\nArranca el trabajador de \"Tarea_7\"\nTarea \"Tarea_2\" finalizada en 4 segundos\nArranca el trabajador de \"Tarea_8\"\nTarea \"Tarea_3\" finalizada en 4 segundos\nTarea \"Tarea_8\" finalizada en 1 segundos\nTarea \"Tarea_7\" finalizada en 2 segundos\nTarea \"Tarea_6\" finalizada en 4 segundos\n</code></pre> <p>N\u00f3tese como al comienzo s\u00f3lo se ponen en funcionamiento los primeros 4 procesos y los dem\u00e1s se ponen en marcha de a uno a medida que los anteriores se terminan.</p>"},{"location":"paralelismo/procesos/queue/","title":"Cola (Queue)","text":"<p>Las cola o queue es una estructura FIFO implementada en base a tuber\u00edas y sincronizada mediante locks o semaphores.</p> <p>A diferencia de las tuber\u00edas, las queues son Multiple In, Multiple Out (MIMO), es decir pueden ser accedidas desde m\u00e1s de dos procesos tanto para leer informaci\u00f3n como para escribirla. Sin embargo, si varios procesos introducen datos dentro de la cola en cortos periodos de tiempo un tercer proceso que intente leerlos podr\u00eda ver alterado el orden de entrada.</p>"},{"location":"paralelismo/procesos/queue/#creacion","title":"Creaci\u00f3n","text":"<p>Las colas se crean desde la funci\u00f3n <code>Queue()</code>, la cual se puede obtener desde el m\u00f3dulo <code>multiprocessing</code>:</p> Queue - creaci\u00f3n<pre><code># importaci\u00f3n\nfrom multiprocessing import Queue\n\n# creacion de cola\ncola = Queue()\n</code></pre> <p>Por default el largo m\u00e1ximo de la cola es indefinido. Con el atributo <code>maxsize</code> se puede limitar el tama\u00f1o m\u00e1ximo de la cola:</p> Queue - creaci\u00f3n, longitud limitada<pre><code># importaci\u00f3n\nfrom multiprocessing import Queue\n\n# creacion de cola\ncola = Queue(maxsize = maximo_elementos)\n</code></pre> <p>Si el n\u00famero ingresado es <code>0</code> entonces la longitud es indefinida.</p> <p>m\u00f3dulo <code>queue</code></p> <p>El m\u00f3dulo <code>queue</code> proporciona una implementaci\u00f3n m\u00e1s completa que la del m\u00f3dulo <code>multiprocessing</code> pero tambi\u00e9n m\u00e1s compleja de usar.  Tambi\u00e9n incluye implementaciones alternativas.</p>"},{"location":"paralelismo/procesos/queue/#metodos","title":"M\u00e9todos","text":""},{"location":"paralelismo/procesos/queue/#contar-elementos","title":"Contar elementos","text":"<p>El m\u00e9todo <code>qsize()</code> cuenta cu\u00e1ntos elementos hay guardados en la cola.</p>"},{"location":"paralelismo/procesos/queue/#cola-vacia","title":"Cola vac\u00eda","text":"<p>El m\u00e9todo <code>empty()</code> chequea si la cola est\u00e1 totalmente vac\u00eda.</p>"},{"location":"paralelismo/procesos/queue/#cola-llena","title":"Cola llena","text":"<p>El m\u00e9todo <code>full()</code> verifica si se alcanz\u00f3 la longitud m\u00e1xima de cola.</p>"},{"location":"paralelismo/procesos/queue/#cargar-elemento","title":"Cargar elemento","text":"<p>El m\u00e9todo <code>put()</code> intenta cargar el objeto elegido dentro de la cola:</p> <pre><code>cola.put( objeto_entrada)\n</code></pre> <p>Si la cola est\u00e1 llena entonces este m\u00e9todo bloquea la ejecuci\u00f3n de la rutina hasta que se libere espacio de la cola. Este comportamiento puede alterarse con los argumentos opcionales <code>block</code> y <code>timeout</code>:</p> <ul> <li>Si <code>block</code> es <code>False</code> se dispara de inmediato     la excepci\u00f3n <code>queue.Full</code>;</li> <li>Si <code>block</code> es <code>True</code> y <code>timeout</code> es un numero entero     entonces se espera ese n\u00fammero de segundos     y si no se liber\u00f3 espacio     se dispara la excepci\u00f3n <code>queue.Full</code>.</li> </ul> <p>Los valores predefinidos de estas opciones son <code>block=True</code> y <code>timeout=None</code></p>"},{"location":"paralelismo/procesos/queue/#extraer-elemento","title":"Extraer elemento","text":"<p>El m\u00e9todo <code>get()</code> lee el valor del primer elemento ingresado en la cola y lo quita de la misma.</p> <pre><code>cola.get( objeto_entrada)\n</code></pre> <p>Este m\u00e9todo por default bloquea la ejecuci\u00f3n de la rutina de manera indefinida en caso que la cola est\u00e9 vac\u00eda.</p> <p><code>get()</code> es el m\u00e9todo complementario de <code>put()</code> y tiene sus mismos argumentos opcionales, <code>block</code> y <code>timeout</code>. La excepci\u00f3n producida por este m\u00e9todo se llama <code>queue.Empty</code>.</p>"},{"location":"paralelismo/procesos/queue/#cierre","title":"Cierre","text":"<p>El m\u00e9todo <code>close()</code> ordena el cierre de la cola mientras impide la entrada de nuevos datos. El cierre puede no ser inmediato sino que se espera a su vaciado. El vaciado completo se detecta con otro m\u00e9todo llamado <code>join_thread()</code></p>"},{"location":"paralelismo/procesos/queue/#otras-implementaciones","title":"Otras implementaciones","text":"<p>El m\u00f3dulo <code>multiprocessing</code> trae dos variantes adicionales de <code>Queue</code>:</p>"},{"location":"paralelismo/procesos/queue/#simplequeue","title":"<code>SimpleQueue</code>","text":"<p><code>SimpleQueue</code> es una versi\u00f3n simplificada de <code>Queue</code> que s\u00f3lo dispone de los m\u00e9todos <code>get()</code>, <code>put()</code>, <code>empty()</code> y <code>close()</code>. Los argumentos opcionales est\u00e1n deshabilitados.</p>"},{"location":"paralelismo/procesos/queue/#joinablequeue","title":"<code>JoinableQueue</code>","text":"<p><code>JoinableQueue</code> es una variante m\u00e1s completa de <code>Queue</code> que incluye los m\u00e9todos adicionales <code>task_done()</code> y <code>join()</code>.</p>"},{"location":"paralelismo/procesos/queue/#ejemplo","title":"Ejemplo","text":"<p>Este ejemplo muestra una comunicaci\u00f3n sencilla entre dos subprocesos usando queues.</p> Queues - demo <p>En este primer ejemplo se crea una cola sin tope de longitud:</p> <pre><code>from multiprocessing import Process\nfrom multiprocessing import Queue\nfrom time import sleep\n\n# creacion de cola\ncola = Queue()\n\n\ndef receptor(c: Queue):\n    \"\"\"Tarea para la recepcion de datos\"\"\"\n    print(\"Receptor listo\")\n    while c.empty() is False:\n        elemento = c.get()\n        print(f\"recibido: {elemento}\")\n    print(\"recepcion finalizada\")\n    print()\n\n\ndef transmisor(c: Queue):\n    \"\"\"Tarea para el envio de datos\"\"\"\n    print(\"Transmisor listo\")\n    lista = [\"hola\", 1.0 , True, 27]\n    for l in lista:\n        c.put(l)\n        print(f\"enviado: {l}\")\n    print(\"transmision finalizada\")\n    print()\n\n\n# subprocesos para gestionar la cola\nsub_transmisor = Process(\n    target=transmisor,\n    args=(cola,),\n    )\n\nsub_receptor = Process(\n    target=receptor,\n    args=(cola,),\n    )\n\n# puesta en marcha - leve delay entre procesos\nsub_transmisor.start()\nsleep(0.2)\nsub_receptor.start()\n\n# espera al cierre de procesos\nsub_receptor.join()\nsub_transmisor.join()\nprint(\"Finalizado\")\n</code></pre> <p>El reporte es el siguiente:</p> <pre><code>Transmisor listo\nenviado: hola\nenviado: 1.0\nenviado: True\nenviado: 27\ntransmision finalizada\n\nReceptor listo\nrecibido: hola\nrecibido: 1.0\nrecibido: True\nrecibido: 27\nrecepcion finalizada\n\nFinalizado\n</code></pre>"},{"location":"paralelismo/procesos/queue/#referencias","title":"Referencias","text":"<p>Python.org - M\u00f3dulo <code>multiprocesing</code></p>"},{"location":"pathlib/","title":"M\u00f3dulo Pathlib","text":"<p>El m\u00f3dulo pathlib facilita el manejo de rutas de archivos y de directorios y tambi\u00e9n permite interactuar con archivos y directorios reales del sistema de archivos.</p>"},{"location":"pathlib/#contenidos","title":"Contenidos","text":"<p>{{ pagetree(siblings) }}</p>"},{"location":"pathlib/#referencias","title":"Referencias","text":"<p>Documentacion oficial del m\u00f3dulo Pathlib</p>"},{"location":"pathlib/alteracion/","title":"Alteraci\u00f3n de recursos","text":"<p><code>Path()</code> pueden crear, modificar y eliminar tanto carpetas como archivos.</p> <p>En todo este cap\u00edtulo se asume el uso de la funci\u00f3n <code>Path()</code> la cual se importa para su uso:</p> Path - Importaci\u00f3n<pre><code>from pathlib import Path\n</code></pre>","tags":["Archivos","Carpetas","Rutas","Pathlib"]},{"location":"pathlib/alteracion/#cambio-de-permisos","title":"Cambio de permisos","text":"<p>Cada recurso posee unos permisos de lectura, escritura y ejecuci\u00f3n los cuales no son iguales para todos los usuarios. Estos permisos son representados por un n\u00famero, el cual se asigna con el m\u00e9todo <code>chmod()</code>.</p> Cambiar permisos<pre><code>numero_permisos: int   \nPath(ruta).chmod(numero_permisos)       # ver anexo sobre permisos\n</code></pre> <p>Ejemplo uso:  Ejemplo: cambiar permisos<pre><code># Usuario propietario: leer y escribir\n# otros: solo leer\nPath(ruta).chmod(0o644)\n</code></pre></p> <p>N\u00famero de permisos</p> <p>En este anexo se explica c\u00f3mo se compone el n\u00famero de los permisos.</p>","tags":["Archivos","Carpetas","Rutas","Pathlib"]},{"location":"pathlib/alteracion/#archivos","title":"Archivos","text":"","tags":["Archivos","Carpetas","Rutas","Pathlib"]},{"location":"pathlib/alteracion/#crear","title":"Crear","text":"<p>El m\u00e9todo <code>touch()</code> es el encargado de crear nuevos archivos. Estos se crean vac\u00edos:</p> <p>archivos - creaci\u00f3n<pre><code>Path(ruta_archivo).touch()\n</code></pre> Por defecto los archivos tienen permisos de lectura y escritura y, en caso de existir un archivo con igual ruta, se preserva el original.  Esto puede modificarse con los argumentos <code>mode</code> (permisos) y <code>exists_ok</code>.</p> argumentos significado <code>mode</code> n\u00famero de permisos de usuario: lectura y escritura (ver anexo) <code>exist_ok</code> evita error por sobreeescritura","tags":["Archivos","Carpetas","Rutas","Pathlib"]},{"location":"pathlib/alteracion/#manejo-de-texto","title":"Manejo de texto","text":"<p>La lectura de archivo como texto se realiza con el m\u00e9todo <code>read_text()</code>:</p> archivos de texto - lectura<pre><code>texto = Path(ruta_archivo).read_text()\n</code></pre> <p>Su m\u00e9todo complementario es <code>write_text()</code>:</p> <p>archivos de texto - lectura<pre><code>texto: str\nnumero_caracteres = Path(ruta_archivo).read_text(texto)\n</code></pre> el cual devuelve cu\u00e1ntos caracteres fueron escritos. El contenido original se sobreescribe con cada llamado.</p> <p>Ambos m\u00e9todos tienen los siguientes argumentos opcionales:</p> argumento significado <code>encoding</code> tipo codificaci\u00f3n: <code>utf-8</code>, <code>utf-16</code>, etc <code>errors</code> <code>newline</code>","tags":["Archivos","Carpetas","Rutas","Pathlib"]},{"location":"pathlib/alteracion/#manejo-de-binarios","title":"Manejo de binarios","text":"<p>La lectura en formato binario se realiza con el m\u00e9todo <code>read_bytes()</code>:</p> archivos - lectura binaria<pre><code>cadena_bytes = Path(ruta_archivo).read_bytes()\n</code></pre> <p>y su contraparte es <code>write_bytes()</code>, la cual reescribe el contenido interno de archivo. </p> archivos - escritura binaria<pre><code>nro_bytes = Path(ruta_archivo).write_bytes(b'contenido de archivo.')\n</code></pre> <p>Estos m\u00e9todos no tienen argumentos.</p>","tags":["Archivos","Carpetas","Rutas","Pathlib"]},{"location":"pathlib/alteracion/#mover","title":"Mover","text":"<p>El m\u00e9todo <code>rename()</code> permite cambiar el nombre de archivo  y tambi\u00e9n permite su reubicado:</p> archivos - renombrar<pre><code>nueva_ruta = Path(ruta_archivo).rename(ruta_destino)\n</code></pre> <p>Este m\u00e9todo presupone que la ruta destino aun no exisye. Si lo hace, el resultado var\u00eda de los permisos del programa y del sistema operativo.</p>","tags":["Archivos","Carpetas","Rutas","Pathlib"]},{"location":"pathlib/alteracion/#reemplazar","title":"Reemplazar","text":"<p>El m\u00e9todo <code>replace()</code> permite sustituir un archivo ubicado en la ruta de destino por el archivo de la ruta original:</p> archivos - reemplazo<pre><code>nueva_ruta = Path(ruta_archivo).replace(ruta_destino)\n</code></pre> <p>Este m\u00e9todo asume que el archivo de destino ya existe.</p>","tags":["Archivos","Carpetas","Rutas","Pathlib"]},{"location":"pathlib/alteracion/#eliminar","title":"Eliminar","text":"<p>Los archivos se eliminan con el m\u00e9todo <code>unlink()</code>:</p> <p>archivos - borrado<pre><code>Path(ruta_archivo).unlink(missing_ok=True) # elimina archivo (si existe)\n</code></pre> Si se omite el argumento <code>missing_ok</code> y el archivo no existe el m\u00e9todo arrojar\u00e1 error.</p>","tags":["Archivos","Carpetas","Rutas","Pathlib"]},{"location":"pathlib/alteracion/#directorios","title":"Directorios","text":"","tags":["Archivos","Carpetas","Rutas","Pathlib"]},{"location":"pathlib/alteracion/#crear_1","title":"Crear","text":"<p>Los directorios se crean con el m\u00e9todo <code>mkdir()</code>:</p> directorios - creaci\u00f3n<pre><code>Path(ruta_carpeta).mkdir()\n</code></pre> <p>Este m\u00e9todo tiene las siguientes opciones:</p> argumentos significado <code>mode</code> n\u00famero de permisos de usuario: todos por defecto (ver anexo) <code>parents</code> crea los directorios padre si \u00e9stos no existen <code>exist_ok</code> evita error por sobreeescritura","tags":["Archivos","Carpetas","Rutas","Pathlib"]},{"location":"pathlib/alteracion/#eliminar_1","title":"Eliminar","text":"<p>Con <code>rmdir()</code> se borra la carpeta elegida:</p> directorios - borrado<pre><code>Path(ruta_carpeta).rmdir()\n</code></pre> <p>Dicha carpeta debe estar vac\u00eda.</p>","tags":["Archivos","Carpetas","Rutas","Pathlib"]},{"location":"pathlib/analisis/","title":"An\u00e1lisis y composici\u00f3n","text":"","tags":["Archivos","Carpetas","Rutas","Pathlib"]},{"location":"pathlib/analisis/#importacion-y-creacion-de-objetos","title":"Importaci\u00f3n y creaci\u00f3n de objetos","text":"<p>La funciones del m\u00f3dulo <code>pathlib</code>  crean objetos para cada ruta que se le indique:</p> PathPurePath Objetos Path<pre><code>from pathlib import Path\n\nruta: str \nobjeto_ruta      = Path(ruta)       # funcionalidad completa\n</code></pre> Objetos Path<pre><code>from pathlib import PurePath\n\nruta: str \nobjeto_ruta = PurePath(ruta)        # funcionalidad recortada\n</code></pre> <p>Estos objetos incluir\u00e1n los m\u00e9todos necesarios para trabajar con las rutas de entrada.</p> <p>Resultados seg\u00fan SO</p> <p>Los resultados de usar algunos m\u00e9todos de <code>Path()</code> y de <code>PurePath()</code> pueden variar en funci\u00f3n del sistema operativo anfitri\u00f3n. En tal caso es conveniente usar sus versiones exclusivas de Windows o de POSIX, seg\u00fan sea la ruta a trabajar (ver m\u00e1s adelante).</p>","tags":["Archivos","Carpetas","Rutas","Pathlib"]},{"location":"pathlib/analisis/#archivos-y-carpetas","title":"Archivos y carpetas","text":"","tags":["Archivos","Carpetas","Rutas","Pathlib"]},{"location":"pathlib/analisis/#archivos","title":"Archivos","text":"<p>Los objetos as\u00ed creados traen los siguientes campos informativos de archivo:</p> atributo archivo significado <code>name</code> nombre completo del archivo <code>suffix</code> extens\u00ed\u00f3n (sufijo) <code>suffixes</code> lista de extensiones - habituales en POSIX <code>stem</code> nombre - sin extension de archivo <p>Sup\u00f3ngase por ejemplo la ruta de archivo <code>/home/user/pack.tar.gz</code>:</p> <p><pre><code>from pathlib import PurePath\n\npath_archivo = PurePath(\"/home/user/pack.tar.gz\") \n</code></pre> Entonces al consultar estos atributos se leer\u00e1:</p> Archivo en ruta<pre><code>archivo = path_archivo.name       # 'pack.tar.gz'\nsufijo  = path_archivo.suffix     # '.gz'\nsufijos = path_archivo.suffixes   # '['.tar', '.gz']'\nnombre  = path_archivo.stem       # 'pack.tar'\n</code></pre>","tags":["Archivos","Carpetas","Rutas","Pathlib"]},{"location":"pathlib/analisis/#directorios","title":"Directorios","text":"<p>Tambi\u00e9n se suministra informaci\u00f3n de las carpetas que conforman la ruta:</p> atributo carpeta significado <code>parent</code> carpeta inmediatamente superior <code>parents</code> arreglo de carpetas superiores (s\u00edmil lista) <code>parts</code> descomposici\u00f3n de ruta en partes - formato tupla <p>Retomando el ejemplo previo:</p> <p>Carpetas en ruta<pre><code>carpeta = path_archivo.parent       # PurePosixPath('/home/user')\ncarpeta = path_archivo.parents[0]   # PurePosixPath('/home/user')\ncarpeta = path_archivo.parents[1]   # PurePosixPath('/home')\ncarpeta = path_archivo.parents[2]   # PurePosixPath('/')\n\nlista_partes = path_archivo.parts      # ('/', 'home', 'user', 'pack.tar.gz')\n</code></pre> N\u00f3tese que la ruta de las carpetas es devuelta en formato <code>PurePosixPath</code> o el que corresponda al caso. \u00c9ste se convierte a string con la funci\u00f3n <code>str()</code> sin problemas. </p>","tags":["Archivos","Carpetas","Rutas","Pathlib"]},{"location":"pathlib/analisis/#rutas-absolutas-y-relativas","title":"Rutas absolutas y relativas","text":"","tags":["Archivos","Carpetas","Rutas","Pathlib"]},{"location":"pathlib/analisis/#rutas-abolutas","title":"Rutas abolutas","text":"<p>Se dispone del m\u00e9todo <code>is_absolute()</code> para verificar que la ruta indicada sea absoluta. Es recomendable usar este m\u00e9todo desde las funciones  <code>PureWindowsPath</code> y <code>PurePosixPath</code>.</p> Verificaci\u00f3n rutas absolutas<pre><code>from pathlib import PurePosixPath, PureWindowsPath\n\nes_absoluta = PurePosixPath(\"/home\").is_absolute()     # 'True'\nes_absoluta = PurePosixPath(\"../\").is_absolute()   # 'False'\n\nes_absoluta = PureWindowsPath(\"c:\\\\windows\").is_absolute()    # 'True'\nes_absoluta = PureWindowsPath(\"..\\\\Documentos\").is_absolute() # 'False'\n</code></pre> <p>Si se usa en cambio <code>Path()</code> o <code>PurePath()</code> hay que tener cuidado con el sistena operativo anfitrion porque en base a \u00e9ste se puede descartar rutas absolutas de otros sistemas operativos:</p> WindowsPOSIX Ambig\u00fcedad de verificacion<pre><code>from pathlib import PurePath\n\n# Sistema WINDOWS\nes_absoluta = PurePath(\"/home\"      ).is_absolute()    # 'False' \nes_absoluta = PurePath(\"c:\\\\windows\").is_absolute()    # 'True'\n</code></pre> Ambig\u00fcedad de verificacion<pre><code>from pathlib import PurePath\n\n# Sistema POSIX: MAC, UNIX, LINUX\nes_absoluta = PurePath(\"/home\"      ).is_absolute()    # 'True' \nes_absoluta = PurePath(\"c:\\\\windows\").is_absolute()    # 'False'\n</code></pre>","tags":["Archivos","Carpetas","Rutas","Pathlib"]},{"location":"pathlib/analisis/#relacion-entre-rutas","title":"Relacion entre rutas","text":"<p>El m\u00e9todo <code>is_relative_to()</code> es el encargado de verificar que dos rutas sean relativas entre s\u00ed. Aqu\u00ed tambi\u00e9n se recomienda usar el m\u00e9todo desde las funciones  <code>PureWindowsPath</code> y <code>PurePosixPath</code>:</p> Verificaci\u00f3n rutas relativas<pre><code>from pathlib import PurePosixPath, PureWindowsPath\n# Rutas POSIX exclusivamente\nrelativos = PurePosixPath(\"/home/user\").is_relative_to(\"/home\")    # 'True'\nrelativos = PurePosixPath(\"/home/user\").is_relative_to(\"user\")    # 'False'\n\n# Rutas Windows exclusivamente\nx = PureWindowsPath(\"c:\\\\windows\\\\win32\").is_relative_to(\"c:\\\\\")    # 'True'\nx = PureWindowsPath(\"c:\\\\windows\\\\win32\").is_relative_to(\"windows\") # 'False'\n</code></pre> <p>Nuevamente, existe el riesgo de resultados ambig\u00fcos al usar <code>Path()</code> o <code>PurePath()</code> para crear el objeto de ruta:</p> WindowsPOSIX Ambig\u00fcedad de verificacion - relativos<pre><code>from pathlib import PurePath\n\nrelativos = PurePath(\"/home/user\").is_relative_to(\"/home\")           # puede dar 'False' \nrelativos = PurePath(\"c:\\\\windows\\\\win32\").is_relative_to(\"c:\\\\\")    # 'True'\n</code></pre> Ambig\u00fcedad de verificacion - relativos<pre><code>from pathlib import PurePath\n\nrelativos = PurePath(\"/home/user\").is_relative_to(\"/home\")           # 'True'  \nrelativos = PurePath(\"c:\\\\windows\\\\win32\").is_relative_to(\"c:\\\\\")    # puede dar 'False'\n</code></pre>","tags":["Archivos","Carpetas","Rutas","Pathlib"]},{"location":"pathlib/analisis/#composicion-de-rutas","title":"Composicion de rutas","text":"<p>Las funciones del m\u00f3dulo permiten componer rutas nuevas a partir de varios strings separados con comas:</p> Composici\u00f3n rutas - funci\u00f3n<pre><code>from pathlib import PurePosixPath, PureWindowsPath\n\ncompuesta = PureWindowsPath(\"C:\\\\\", \"windows\")   # 'PureWindowsPath('C:/windows')'\ncompuesta = PurePosixPath(\"/home\", \"user\")       # 'PurePosixPath('/home/user')'\n</code></pre> <p>Adem\u00e1s se cuenta con el m\u00e9todo <code>joinpath()</code> para la misma funci\u00f3n:</p> Composici\u00f3n rutas - m\u00e9todo joinpath<pre><code>from pathlib import PurePosixPath, PureWindowsPath\n\ncompuesta = PureWindowsPath(\"C:\\\\\").joinpath(\"windows\")  # 'PureWindowsPath('C:/windows')'\ncompuesta = PurePosixPath(\"/home\").joinpath(\"user\")      # 'PurePosixPath('/home/user')'\n</code></pre>","tags":["Archivos","Carpetas","Rutas","Pathlib"]},{"location":"pathlib/consultas/","title":"Consultas de recursos","text":"<p><code>Path()</code> y sus derivados incluyen funcionalidades para explorar directorios, leer informaci\u00f3n de los \"ficheros\" (carpetas y archivos), etc\u00e9tera.</p> <p>En todo este cap\u00edtulo se asume el uso de la funci\u00f3n <code>Path()</code>: Path - Importaci\u00f3n<pre><code>from pathlib import Path\n</code></pre></p>","tags":["Archivos","Carpetas","Rutas","Pathlib"]},{"location":"pathlib/consultas/#busqueda-de-archivos-y-carpetas","title":"B\u00fasqueda de archivos y carpetas","text":"","tags":["Archivos","Carpetas","Rutas","Pathlib"]},{"location":"pathlib/consultas/#busqueda-simple","title":"B\u00fasqueda simple","text":"<p>Con el m\u00e9todo <code>iterdir()</code> se buscan los archivos y carpetas contenidas dentro de la ruta indicada. No se exploran las carpetas internas.</p> <p>B\u00fasqueda simple - iterdir<pre><code>ruta_carpeta: str\nobjeto_busqueda = Path(ruta_carpeta).iterdir()\nrutas_internas = list(objeto_busqueda)\n</code></pre> La conversi\u00f3n a lista permite recuperar las rutas obtenidas.</p> <p>Por ejemplo, para buscar contenidos en la carpeta actual se puede hacer:</p> B\u00fasqueda simple - ruta actual<pre><code>objeto_busqueda = Path(\".\").iterdir()\nrutas_internas = list(objeto_busqueda)\n</code></pre> <p>y para mostrar las rutas en consola:</p> muestra en consola<pre><code>for ruta in rutas_internas:\n    print(str(ruta))\n</code></pre>","tags":["Archivos","Carpetas","Rutas","Pathlib"]},{"location":"pathlib/consultas/#busqueda-recursiva","title":"B\u00fasqueda recursiva","text":"<p>La b\u00fasqueda de todos los elementos internos del directorio elegido se realiza con el m\u00e9todo <code>walk()</code>.</p> B\u00fasqueda recursiva<pre><code>ruta_carpeta: str\nobjeto_busqueda = Path(ruta_carpeta).walk(top_down=True)\nlista_objetos   = list(objeto_busqueda)\n</code></pre> <p>El uso es muy similar al del m\u00e9todo <code>iterdir()</code>:</p> B\u00fasqueda recursiva - ruta actual<pre><code>objeto_busqueda = Path(\".\").walk(top_down=True)\nlista_objetos   = list(objeto_busqueda)\n</code></pre> <p>El resultado de este m\u00e9todo es un objeto compuesto. Al convertirlo en lista se obtiene una lista de objetos, cada uno de los cuales tendr\u00e1 internamente:</p> <ul> <li>una ruta de carpeta;</li> <li>una lista de subcarpetas;</li> <li>una lista de archivos.</li> </ul> <p>Toda esta informaci\u00f3n se obtiene convirtiendo los objetos internos en lista, tal como se ve en el ejemplo:</p> muestra en consola<pre><code>for directorio in lista_objetos:\n    [ruta, subdirectorios, archivos ] = list(directorio)\n    print(f\"ruta           :  {ruta}\")\n    print(f\"nombre carpetas:  {subdirectorios}\")\n    print(f\"nombre archivos:  {archivos}\")\n</code></pre>","tags":["Archivos","Carpetas","Rutas","Pathlib"]},{"location":"pathlib/consultas/#busqueda-por-patrones","title":"B\u00fasqueda por patrones","text":"<p>Se dispone de dos m\u00e9todos para buscar elementos que cumplan con un patr\u00f3n de texto espec\u00edfico llamados <code>glob()</code> y <code>rglob()</code>:</p> B\u00fasqueda simpleB\u00fasqueda recursiva B\u00fasqueda por patr\u00f3n<pre><code>ruta_directorio: str\npatron: str\n\nobjeto = Path(ruta_directorio).glob(patron)   \n\nlista_rutas = list(objeto)      # resultado\n</code></pre> B\u00fasqueda por patr\u00f3n<pre><code>ruta_directorio: str\npatron: str\n\nobjeto = Path(ruta_directorio).rglob(patron)   \n\nlista_rutas = list(objeto)      # resultado\n</code></pre> <p>Ejemplo de uso: b\u00fasqueda recursiva de imagenes en base a su extensi\u00f3n.</p> B\u00fasqueda de imagenes .png y .PNG<pre><code>objeto = pathlib.Path(ruta).rglob(\"*.png\", case_sensitive=False)\nlista_imagenes = list(objeto) \n</code></pre>","tags":["Archivos","Carpetas","Rutas","Pathlib"]},{"location":"pathlib/consultas/#informacion-del-sistema","title":"Informaci\u00f3n del sistema","text":"","tags":["Archivos","Carpetas","Rutas","Pathlib"]},{"location":"pathlib/consultas/#carpeta-de-usuario","title":"Carpeta de usuario","text":"<p>Con el m\u00e9todo <code>home()</code> se consulta la carpeta personal del usuario actual:</p> ruta 'home'<pre><code>carpeta_usuaurio = Path().home()   # carpeta personal del usuario actual\n</code></pre>","tags":["Archivos","Carpetas","Rutas","Pathlib"]},{"location":"pathlib/consultas/#carpeta-actual-del-programa","title":"Carpeta actual del programa","text":"<p>El m\u00e9todo <code>cwd()</code> devuelve la ruta del sistema donde el programa actual est\u00e1 ubicado:</p> ruta actual<pre><code>carpeta_programa = Path().cwd()   # carpeta actual del programa\n</code></pre>","tags":["Archivos","Carpetas","Rutas","Pathlib"]},{"location":"pathlib/consultas/#informacion-de-recursos","title":"Informaci\u00f3n de recursos","text":"","tags":["Archivos","Carpetas","Rutas","Pathlib"]},{"location":"pathlib/consultas/#verificar-existencia","title":"Verificar existencia","text":"<p><code>exists()</code> devuelve <code>True</code> si el elemento indicado por la ruta existe, sino da <code>False</code>.</p> Verificar<pre><code>existe = Path(ruta).exists()    \n</code></pre>","tags":["Archivos","Carpetas","Rutas","Pathlib"]},{"location":"pathlib/consultas/#estadisticas-de-archivo","title":"Estadisticas de archivo","text":"<p>El m\u00e9todo <code>stat()</code> provee informaci\u00f3n variada sobre el elemento especificado por la ruta: fechas de creacion y modificacion, espacio en disco, identificadores de usuario y de grupo, etc. </p> <p>Uso: Estadisticas de elemento<pre><code>objeto_estadisticas = Path(ruta).stat()\n</code></pre> El objeto de salida contiene la informaci\u00f3n en forma de atributos internos.  Algunos de ellos son:</p> atributo informaci\u00f3n <code>st_uid</code> identificador d usuario <code>st_gid</code> identificador de grupo <code>st_size</code> espacio de disco en bytes (si es carpeta no incluye su contenido) <code>st_ctime</code> fecha creacion - formato POSIX <code>st_mtime</code> fecha ultima modificacion - formato POSIX <code>st_atime</code> fecha ultimo acceso - formato POSIX <p>Por ejemplo, para consultar las fechas de creaci\u00f3n, modificaci\u00f3n y ultimo acceso de un elemento:</p> lectura de fechas<pre><code>estadisticas = Path(ruta).stat()\ncreacion     = estadisticas.st_ctime\nmodificacion = estadisticas.st_mtime\nacceso       = estadisticas.st_atime\n</code></pre>","tags":["Archivos","Carpetas","Rutas","Pathlib"]},{"location":"pathlib/consultas/#usuarios-y-grupos","title":"Usuarios y grupos","text":"<p>Los m\u00e9todos <code>owner()</code> y <code>group()</code> son los encargados  de proporcionar informaci\u00f3n acerca del usuario propietario de un recurso y de su grupo de usuarios:</p> Propietario y Grupo<pre><code>usuario_propietario       = Path(ruta_recurso).owner()\ngrupo_usuario_propietario = Path(ruta_recurso).group()\n</code></pre>","tags":["Archivos","Carpetas","Rutas","Pathlib"]},{"location":"pathlib/consultas/#manejo-de-rutas","title":"Manejo de rutas","text":"","tags":["Archivos","Carpetas","Rutas","Pathlib"]},{"location":"pathlib/consultas/#comparar","title":"Comparar","text":"<p><code>samefile()</code> es un m\u00e9todo que permite comparar dos rutas entre s\u00ed bas\u00e1ndose en la estructura de los directorios del sistema anfitri\u00f3n.</p> <p>Comparar rutas<pre><code># rutas del sistema (DEBEN existir o da error)\nruta_A: str = \"/home\"\nruta_B: str = \"/etc\"\n\n# compara\nmismo_ruta = Path(ruta_A).samefile(ruta_B) # 'False'   \nmisma_ruta = Path(ruta_A).samefile(ruta_A) # 'True'\n</code></pre> N\u00f3tese que <code>samefile()</code> sirve tambi\u00e9n para directorios.</p> <p>Este metodo es pr\u00e1ctico para comparar rutas relativas con rutas absolutas. </p> <p>Ejemplos:</p> comparando rutas - directorio actual<pre><code># comparando directorio actual\nruta_actual = Path().cwd()\niguales     = Path(ruta_actual).samefile(\".\")  # 'True'\n</code></pre> comparando rutas - directorio padre<pre><code># rutas al directorio padre\nruta_padre = Path().cwd().parent\niguales    = Path(ruta_padre).samefile(\"../\") # 'True'\n</code></pre>","tags":["Archivos","Carpetas","Rutas","Pathlib"]},{"location":"pathlib/consultas/#convertir","title":"Convertir","text":"<p>El m\u00e9todo <code>absolute()</code> sirve para convertir la ruta especificada en ruta absoluta, bas\u00e1ndose en la estructura de los directorios del sistema anfitri\u00f3n.</p> Conversi\u00f3n a ruta absoluta<pre><code>ruta_absoluta = Path(ruta).absolute() \n</code></pre> <p>El resultado es un objeto <code>WindowsPath</code> o <code>PosixPath</code> con la ruta obtenida.</p> <p>Ejemplo de uso: ruta absoluta del directorio con el ejecutable actual.</p> Ruta actual<pre><code>nombre_archivo = Path(\".\").absolute()\n</code></pre> <p>Una alternativa superadora es el m\u00e9todo <code>resolve()</code>, el cual resuelve los enlaces simb\u00f3licos que pudiera haber en la ruta.</p>","tags":["Archivos","Carpetas","Rutas","Pathlib"]},{"location":"pathlib/consultas/#expandir","title":"Expandir","text":"<p>El m\u00e9todo <code>expanduser()</code> convierte las rutas relativas respecto a la carpeta personal en ruta absoluta en base a la carpeta personal del usuario actual.</p> WindowsPosix Rutas de usuario<pre><code>ruta_archivo = Path(\"~\\documentos\\hola.txt\").expanduser()\n# WindowsPath('C:/Users/usuario/documentos/hola.txt')\n</code></pre> Rutas de usuario<pre><code>ruta_archivo = Path(\"~/documentos/hola.txt\").expanduser()\n# PosixPath('/home/usuario/documentos/hola.txt')\n</code></pre>","tags":["Archivos","Carpetas","Rutas","Pathlib"]},{"location":"pathlib/consultas/#leer-enlaces","title":"Leer enlaces","text":"<p>Los enlaces simb\u00f3licos son le\u00eddos con el m\u00e9todo <code>readlink()</code>:</p> Ruta actual<pre><code>ruta_destino = Path(ruta_enlace).readlink()\n</code></pre> <p>El resultado es la ruta guardada dentro del enlace.</p>","tags":["Archivos","Carpetas","Rutas","Pathlib"]},{"location":"pathlib/consultas/#manejo-de-uris","title":"Manejo de URIs","text":"<p>El m\u00e9todo <code>as_uri()</code> convierte la ruta de entrada a URI (Unified Resource Identifier). La ruta no necesita ser existente, aunque s\u00ed debe ser compatible con el sistema anfitri\u00f3n.</p> WindowsPosix Obtener URI<pre><code>Path(\"C:\\\\windows\").as_uri()    # 'file:///C:/windows'\n</code></pre> Obtener URI<pre><code>Path(\"/home/user\").as_uri()     # 'file:///home/user'\n</code></pre> <p>El m\u00e9todo complementario es <code>from_uri()</code>, al cual se le pasa como argumento la URI obtenida previamente:</p> WindowsPosix Obtener ruta<pre><code>Path.from_uri('file:///C:/windows')    # 'WindowsPath('/c:/windows')'\n</code></pre> Obtener ruta<pre><code>Path.from_uri('file:///home/user')     # 'PosixPath('/home/user')'\n</code></pre>","tags":["Archivos","Carpetas","Rutas","Pathlib"]},{"location":"pathlib/consultas/#verificar-recursos","title":"Verificar recursos","text":"<p>Se dispone de varios m\u00e9todos para chequear que existan distintos tipos de elementos: carpetas, archivos, sockets, volumenes , etc.</p> <p>Estos son los m\u00e9todos disponibles:</p> m\u00e9todo descripci\u00f3n <code>\u00ecs_file()</code> archivo <code>\u00ecs_dir()</code> directorio <code>\u00ecs_symlink()</code> enlace simb\u00f3lico <code>\u00ecs_junction()</code> <code>\u00ecs_mount()</code> punto de montaje <code>\u00ecs_socket()</code> socket UNIX <code>\u00ecs_fifo()</code> cola del sistema (qeue) <code>\u00ecs_block_device()</code> dispositivo \"de bloque\": HDD, SDD, CD, etc <code>\u00ecs_char_device()</code> dispositivo \"de caracter\": mouse, teclado, joystick, placa audio <p>Estos m\u00e9todos devuelven <code>True</code> si se cumplen dos condiciones:</p> <ul> <li>La ruta existe en el sistema;  </li> <li>La ruta corresponde al tipo de recurso especificado.</li> </ul> <p>Por ejemplo: si se proporciona la ruta de un archivo llamado <code>main.py</code> dentro de la carpeta del programa</p> ArchivosDirectorios Verificar archivo<pre><code># verificar recurso\nes_y_existe = Path(\"main.py\").is_file()  # da 'True' s\u00f3lo si el archivo existe\n\n# m\u00e9todo incorrecto\nes_y_existe = Path(\"main.py\").is_dir()   # da 'False' - no es un directorio\n</code></pre> Verificar directorio<pre><code># m\u00e9todo incorrecto\nes_y_existe = Path(\"examples/\").is_file()  # da 'False' - no es archivo \n\n# verificar recurso\nes_y_existe = Path(\"examples/\").is_dir()   # da 'True' s\u00f3lo si el directorio existe\n</code></pre> <p>Enlaces simb\u00f3licos</p> <p>La ruta indicada puede ser perteneciente a enlaces simb\u00f3licos (symlinks) que apunten al elemento elegido.</p>","tags":["Archivos","Carpetas","Rutas","Pathlib"]},{"location":"pathlib/intro/","title":"Funcionalidades","text":"<p>Hay dos grandes funcionalidades disponibles para trabajar con las rutas, las cuales son:</p>","tags":["Archivos","Carpetas","Rutas","Pathlib"]},{"location":"pathlib/intro/#path","title":"<code>Path()</code>","text":"<p><code>Path()</code> es la funci\u00f3n m\u00e1s importante del m\u00f3dulo. Es la m\u00e1s versatil y permite tanto trabajar con strings que representan rutas arbitrarias como tambi\u00e9n alterar archivos y carpetas reales del sistema.  Esta funci\u00f3n reconoce autom\u00e1ticamente tanto rutas de sistemas Windows y de sistemas POSIX (UNIX, Linux, etc).</p> <p>Esta funci\u00f3n tiene dos subvariantes:</p> <ul> <li><code>PosixPath()</code>: dedicada a rutas POSIX (UINIX, Linux, etc).</li> <li><code>WindowsPath()</code>: dedicada a rutas Windows.</li> </ul> <p>Modulo os</p> <p>El m\u00f3dulo <code>os</code> tambi\u00e9n tiene una funci\u00f3n llamada <code>Path()</code>, la cual no es compatible conla proporcionada por <code>pathlib</code>.</p>","tags":["Archivos","Carpetas","Rutas","Pathlib"]},{"location":"pathlib/intro/#purepath","title":"<code>PurePath()</code>","text":"<p><code>PurePath()</code> es la versi\u00f3n restringida de <code>Path()</code> que s\u00f3lo permite manejar strings a modo de rutas.</p> <p>Esta funci\u00f3n tiene tambi\u00e9n sus dos subvariantes:</p> <ul> <li><code>PurePosixPath()</code>   : dedicada a rutas POSIX (UINIX, Linux, etc).</li> <li><code>PureWindowsPath()</code> : dedicada a rutas Windows.</li> </ul>","tags":["Archivos","Carpetas","Rutas","Pathlib"]},{"location":"tests/","title":"Excepciones y Testing","text":"<p>Las excepciones son el mecanismo que permite controlar el comportamiento del programa ante los errores que podr\u00edan producirse durante la ejecuci\u00f3n, permitiendo implementar rutinas alternativas, reportes de error, salidas controladas, etc.</p> <p>La comprobaci\u00f3n autom\u00e1tica o testing consiste en la comprobaci\u00f3n del funcionamiento de los programas y sus partes. Hay dos grandes tipos de tests:</p> <ul> <li>Los tests unitarios, los cuales verifican partes espec\u00edficas del c\u00f3digo;</li> <li>Los tests de integraci\u00f3n, que comprueban que m\u00faltiples secciones del programa funcionen bien en conjunto.</li> </ul> <p>Los tests se implementan en base a las excepciones.</p>"},{"location":"tests/#contenidos","title":"Contenidos","text":"<p>{{ pagetree(siblings)}}</p>"},{"location":"tests/#referencias","title":"Referencias","text":"<p>El libro de Python - Excepciones</p>"},{"location":"tests/assert/","title":"Assert","text":"<p>Assert, que puede traducirse como \"afirmaci\u00f3n\" pero tambi\u00e9n como \"reclamo\", permite implementar excepciones controladas dentro del c\u00f3digo, obligando a que se cumplan ciertas condiciones dentro de la rutina so pena de lanzar una rutina de excepcion o en su defecto interrumpir la ejecuci\u00f3n del c\u00f3digo.</p>"},{"location":"tests/assert/#idea-basica","title":"Idea b\u00e1sica","text":"<p>La cl\u00e1usula <code>assert</code> dispara una excepci\u00f3n condicional en caso que no se cumpla la condici\u00f3n elegida.</p> <p>Uso b\u00e1sico:</p> Assert - cl\u00e1usula<pre><code>assert condicion\n</code></pre> <p>Tambi\u00e9n puede usarse el assert como funci\u00f3n:</p> Assert - funci\u00f3n<pre><code>assert(condicion)\n</code></pre> <p>Si la condici\u00f3n indicada se cumple entonces la ejecuci\u00f3n continua normalmente, en caso contrario se dispara una excepci\u00f3n especial llamada <code>AssertionError</code>.</p> <p>Ejemplo:</p> Assert - disparo de excepci\u00f3n<pre><code>assert 1==2     # 'AssertionError'\nassert(1==2)    # 'AssertionError'\n</code></pre>"},{"location":"tests/assert/#mensaje-de-error","title":"Mensaje de error","text":"<p>Si se usa <code>assert</code> como cl\u00e1usula entonces se permite definir un mensaje de error para la excepci\u00f3n:</p> Assert - mensaje agregado<pre><code>assert condicion, mensaje_error     \n</code></pre> <p>Mensaje en funci\u00f3n</p> <p>El uso con par\u00e9ntesis del mensaje de error no se permite porque siempre da <code>True</code>:</p> <pre><code>assert(condicion, mensaje_error)   # 'SyntaxWarning: assertion is always true, perhaps remove parentheses?'\n</code></pre>"},{"location":"tests/assert/#tests-en-rutinas","title":"Tests en rutinas","text":"<p>Mediante la cl\u00e1usula <code>assert</code> se pueden definir tests unitarios. Esto permite crear rutinas de verificaci\u00f3n  para comprobar la integridad del c\u00f3digo y su buen funcionamiento.</p> Testing en rutina<pre><code>def negacion(x: bool):\n    return not x\n\n# test de integridad\nassert negacion( True)  == False \nassert negacion( False) == True \n</code></pre> <p>La rutina de comprobaci\u00f3n puede formar parte de las rutinas del programa o bien puede ser incluida en archivos dedicados para correr los test.</p>"},{"location":"tests/assert/#test-en-funciones-y-metodos","title":"Test en funciones y m\u00e9todos","text":"<p>Con ayuda de la cl\u00e1usula <code>assert</code> se pueden hacer tests integrados dentro de las definiciones de funciones y de m\u00e9todos de clases.  </p> <p>Estos tests internos se ejecutar\u00e1n cada vez que la funci\u00f3n o m\u00e9todo sea llamado.</p> <p>Tipado duro</p> <p>Creando tests de tipos de argumentos se puede imitar el tipado duro, el cual interrumpir\u00e1 la ejecuci\u00f3n si los valores de los argumentos son del tipo incorrecto.</p> <p>Ejemplo:</p> Testing en funciones<pre><code>def negacion(x: bool):\n    assert type(x) == bool, \"Error: argumento no booleano\"\n    return not x\n\n# funcionamiento normal\ny = negacion( True)     # 'False'\ny = negacion( False)    # 'True'\n# interrupci\u00f3n del programa\ny = negacion( \"True\")   # 'Error: argumento no booleano'\n</code></pre>"},{"location":"tests/custom/","title":"Excepciones personalizadas","text":"<p>Las excepciones personalizadas se crean como clases a partir de la excepci\u00f3n gen\u00e9rica <code>Exception</code>:</p> <p><pre><code>class ExcepcionCustom(Exception):\n    pass \n</code></pre> Esta excepci\u00f3n puede ser disparada con ayuda de la cl\u00e1usula <code>raise</code>:</p> <pre><code>raise ExcepcionCustom\nraise ExcepcionCustom()\n</code></pre>"},{"location":"tests/doctest/","title":"Doctest","text":"<p>El m\u00f3dulo <code>doctest</code> permite aprovechar los docstrings (bloques de comentarios) para incorporar tests autom\u00e1ticos para funciones y m\u00e9todos de clases.</p>"},{"location":"tests/doctest/#importacion","title":"Importaci\u00f3n","text":"<p>El m\u00f3dulo se importa para habilitar los tests:</p> Importaci\u00f3n<pre><code>import doctest\n</code></pre>"},{"location":"tests/doctest/#definicion-de-tests","title":"Definicion de tests","text":"<p>Los tests se implementan dentro de los docstrings con la siguiente notaci\u00f3n:</p> Doctests - sintaxis<pre><code>def funcion( argumentos ):\n    \"\"\"\n    Descripci\u00f3n de funci\u00f3n (opcional)\n\n    &gt;&gt;&gt; funcion( valores_entrada_1 )     \n    retorno_esperado_1\n\n    &gt;&gt;&gt; funcion( valores_entrada_2 )     \n    retorno_esperado_2\n\n    ...\n    \"\"\"\n    # rutina funci\u00f3n\n    return retorno_funcion\n</code></pre> <p>Una misma funci\u00f3n puede implementar tantos ensayos dentro de su bloque de comentarios como se considere necesario</p> Ejemplo de tests<pre><code>def suma(a, b):\n    \"\"\"\n    Una funcion sencilla que suma.\n\n    &gt;&gt;&gt; suma(3, 4)\n    7\n    &gt;&gt;&gt; suma(5, 1)\n    6\n    \"\"\"\n    return a + b\n</code></pre> <p>Estos ensayos son visibles como parte de la documentaci\u00f3n de las funciones pero no se ejecutan por default.</p>"},{"location":"tests/doctest/#ejecucion","title":"Ejecuci\u00f3n","text":"<p>La ejecuci\u00f3n de los tests implementados se ordena tras la defiici\u00f3n de las funciones con la funci\u00f3n <code>testmod()</code>:</p> Doctest - ejecuci\u00f3n<pre><code>doctest.testmod()\n</code></pre> <p>Si los resultados obtenidos de todos los ensayos son los esperados la ejecuci\u00f3n continuar\u00e1 normalmente y la consola no indicar\u00e1 nada. Si en cambio alguno de los tests es incorrecto  entonces se interrumpir\u00e1 la ejecuci\u00f3n y la consola indicar\u00e1 el primer error encontrado. </p> <p>Ejemplo simple</p> Ejemplo - test fallido<pre><code>import doctest\n\ndef suma(a, b):\n    \"\"\"\n    Una funcion sencilla que suma.\n\n    &gt;&gt;&gt; suma(3, 4)       \n    7\n    &gt;&gt;&gt; suma(5, 1)       \n    51\n    \"\"\"\n    return a + b\n\n\ndoctest.testmod()\n</code></pre> Texto en consola<pre><code>Failed example:\n    suma(5, 1)       \nExpected:\n    51\nGot:\n    6\n</code></pre>"},{"location":"tests/excepciones/","title":"Errores y Excepciones","text":""},{"location":"tests/excepciones/#error-de-sintaxis","title":"Error de Sintaxis","text":"<p>Los errores de sintaxis (SyntaxError) son violaciones de las reglas de escritura del lenguaje. El int\u00e9rprete las detecta a medida que ejecuta las rutinas.</p>"},{"location":"tests/excepciones/#excepcion","title":"Excepci\u00f3n","text":"<p>Las excepciones son los errores detectados en tiempo de ejecuci\u00f3n. Muchos de ellos no pueden prevenirse completamente por dise\u00f1o.</p> <p>Ejemplos de excepciones habituales:</p> Excepci\u00f3n Significado <code>Exception</code> error gen\u00e9rico (etiqueta comod\u00edn). <code>IndexError</code> elemento de una lista, tupla, etc. con indice indicado inexistente. <code>KeyError</code> clave de un diccionario inexistente. <code>NameError</code> variable no definida. <code>ZeroDivisionError</code> se dispara ante una division por cero. <code>RecursionError</code> recursividad infinita de las funciones, nunca se resuelve la funcion recursiva. <code>TypeError</code> tipo de datos incorrecto. Ejemplo: indexado con un string. <code>ValueError</code> valores imposibles de manejar o traducir. Ejemplo: convertir a entero una frase. <code>ModuleNotFoundError</code> no se encuentra el m\u00f3dulo requerido. <code>ImportError</code> no se encuentra el elemento requerido del m\u00f3dulo especificado. <p>Ejemplos de excepciones</p> TypeError<pre><code>valor = vector[\"10\"]    #indice 'str' en vez de 'int'\n</code></pre> ValueError<pre><code>numero = int(\"hola\")    # \u00bfqu\u00e9 n\u00famero ser\u00eda ese?\n</code></pre> IndexError<pre><code>W = [1, 2, 3]   # Lista de 3 elementos\nZ = W[4]        # Elemento N\u00ba5 inexistente\n</code></pre> ZeroDivisionError<pre><code>x = 4\ny = 0\nz = x / y       \n</code></pre>"},{"location":"tests/manejo/","title":"Manejo de excepciones","text":""},{"location":"tests/manejo/#gestion-de-excepciones","title":"Gesti\u00f3n de excepciones","text":"<p>Python permite enmarcar partes del c\u00f3digo que se consideran susceptibles de errores, y proporcionar rutinas alternativas que s\u00f3lo se ejecutar\u00e1n ante errores, los cuales pueden ser gen\u00e9ricos o espec\u00edficos. </p>"},{"location":"tests/manejo/#uso-basico-clausulas-try-y-except","title":"Uso b\u00e1sico - Cla\u00fasulas <code>try</code> y <code>except</code>","text":"<p>Las excepciones pueden manejarse mediante las cl\u00e1usulas <code>try</code> - <code>except</code>:</p> Excepci\u00f3n gen\u00e9rica<pre><code>try:\n    #c\u00f3digo a prueba\n    z = x / y   #  posible `ZeroDivisionError`\n    Z = W[4]    #  posible `IndexError`\nexcept:\n    #se detiene el c\u00f3digo a prueba\n    #se ejecuta un c\u00f3digo alternativo\n    print(\"Ejecuci\u00f3n interrumpida\")\n</code></pre> <p>Dentro del segmento definido por <code>try</code> se ubica el segmento de c\u00f3digo sensible a errores, en tanto que <code>except</code> enmarca el c\u00f3digo alternativo. Si durante al ejecuci\u00f3n del c\u00f3digo sensible se detecta un error entonces su ejecuci\u00f3n se detiene y se pasa autom\u00e1ticamente a ejecutar la rutina alternativa.</p>"},{"location":"tests/manejo/#codigo-condicional-clausula-else","title":"C\u00f3digo condicional - Clausula <code>else</code>","text":"<p>Se puede colocar c\u00f3digo extra pasada la parte vulnerable del programa con la cl\u00e1usula <code>else</code>. Este c\u00f3digo s\u00f3lo se ejecuta si la ejecuci\u00f3n de la rutina vulnerable fue exitosa.</p> C\u00f3digo condicional<pre><code>try:\n    #c\u00f3digo a prueba\n    z = x / y   #  posible `ZeroDivisionError`\n    Z = W[4]    #  posible `IndexError`\nexcept:\n    #se detiene el c\u00f3digo a prueba\n    #se ejecuta un c\u00f3digo alternativo\n    print(\"Ejecuci\u00f3n interrumpida\")\nelse:\n    #si no ocurri\u00f3 una excepci\u00f3n en \u201ctry\u201d\n    #se ejecuta c\u00f3digo adicional \n    print(\"Ejecuci\u00f3n exitosa\")\n</code></pre>"},{"location":"tests/manejo/#codigo-de-cierre-clausula-finaly","title":"C\u00f3digo de cierre - Clausula <code>finaly</code>","text":"<p>Si se requiere ejecutar un trozo de c\u00f3digo s\u00ed o s\u00ed, el cual es independiente de la existencia o no de excepciones previas, se usa la cl\u00e1usula <code>finaly</code>:</p> C\u00f3digo de cierre<pre><code>try:\n    #c\u00f3digo a prueba\n    z = x / y   #  posible `ZeroDivisionError`\n    Z = W[4]    #  posible `IndexError`\nexcept:\n    #se detiene el c\u00f3digo a prueba\n    #se ejecuta un c\u00f3digo alternativo\n    print(\"Ejecuci\u00f3n interrumpida\")\nfinally:\n    #c\u00f3digo obligatorio (se ejecuta al finalizar)\n    print(\"Programa finalizado\")\n</code></pre>"},{"location":"tests/manejo/#excepciones-especificas","title":"Excepciones espec\u00edficas","text":"<p>Se pueden crear f\u00e1cilmente m\u00faltiples rutinas de excepciones para abordar distintos tipos de error posibles.S\u00f3lo hay que indicar el nombre de la excepci\u00f3n indicada justo despu\u00e9s de la cl\u00e1usula <code>except</code>:</p> Excepciones m\u00faltiples<pre><code>try:\n    #c\u00f3digo a prueba\n    z = x / y   #  posible `ZeroDivisionError`\n    Z = W[4]    #  posible `IndexError` \n\nexcept ValueError:\n    print(\"Valor err\u00f3neo \")\n\nexcept TypeError:\n    print(\"Tipo de datos err\u00f3neo\")\n\nexcept ZeroDivisionError:\n    print(\"Division por cero\")\n\nexcept IndexError:\n    print(\"Error de \u00edndice\")\n</code></pre>"},{"location":"tests/manejo/#excepciones-como-variable","title":"Excepciones como variable","text":"<p>Se puede usar el comod\u00edn <code>Except</code> para guardar el tipo de excepci\u00f3n producida como una variable con ayuda de la cl\u00e1usula <code>as</code>. Esto se muestra a continuaci\u00f3n:</p> <p>Captando excepci\u00f3n gen\u00e9rica<pre><code>try:\n    #c\u00f3digo a prueba\nexcept Exception as variable_excepcion:\n    print(f\"Excepci\u00f3n producida: {variable_excepcion}\")\n    print( type(variable_excepcion) )\n</code></pre> La variable creada es del mismo tipo que la excepci\u00f3n disparada e internamente guarda su mensaje descriptivo.</p> <p>Ejemplo: captando 'ZeroDivisionError'</p> Division por cero<pre><code>try:\n    #c\u00f3digo a prueba\n    z = x / y   #  posible `ZeroDivisionError`\n    Z = W[4]    #  posible `IndexError` \n\nexcept Exception as ex:\n    print(f\"Excepci\u00f3n producida: '{ex}'\")\n    print( type(ex) )\n</code></pre> Salida por consola<pre><code>Excepci\u00f3n producida: 'division by zero'\n&lt;class 'ZeroDivisionError'&gt;\n</code></pre>"},{"location":"tests/manejo/#lanzamiento","title":"Lanzamiento","text":"<p>Python dispone de la cl\u00e1usula <code>raise</code> para lanzar excepciones de manera discrecional:</p> Lanzamiento - raise<pre><code>if condicion:\n    raise nombre_excepcion\n</code></pre> <p>Por ejemplo, para prevenir una division por cero se puede evaluar el valor de la futura variable cociente y si da cero disparar la excepci\u00f3n <code>ZeroDivisionError</code>:</p> Lanzamiento - division por cero<pre><code>if cociente == 0:\n    raise ZeroDivisionError\n</code></pre>"},{"location":"tests/manejo/#referencias","title":"Referencias","text":"<p>StackOverflow - C\u00f3mo determinar tipo de excepci\u00f3n</p>"},{"location":"tests/unittest/","title":"UnitTest - Tests unitarios","text":"","tags":["unittest","Tests"]},{"location":"tests/unittest/#importacion","title":"Importaci\u00f3n","text":"<p>Este m\u00f3dulo se importa para ser utilizado:</p> <pre><code>import unittest\n</code></pre>","tags":["unittest","Tests"]},{"location":"tests/unittest/#definir-tests","title":"Definir tests","text":"<p>Para evaluar la funci\u00f3n se crea una clase hija de la clase <code>TestCase</code> y se le asigna un m\u00e9todo por cada test unitario que se requiera hacer. </p> <p>La clase <code>TestCase</code> proporciona a sus clases hijas una serie de m\u00e9todos predefinidos para verificar el buen funcionamiento de las funciones: valores y tipos de retorno correctos, excepciones disparadas ante ciertas condiciones, etc.</p> <p>El formato b\u00e1sico es el siguiente:</p> Sintaxis de test<pre><code># clase para preparar los tests\nclass TestComponente(unittest.TestCase):\n\n\n    def test_primero(self):\n        pass\n\n\n    def test_segundo(self):\n        pass\n</code></pre> <p>Nombres de tests</p> <p>Los nombres de m\u00e9todos que implementan los test unitarios siempre deben comenzar con la palabra <code>test</code>, de otra manera no ser\u00e1n ejecutados al final. </p>","tags":["unittest","Tests"]},{"location":"tests/unittest/#test-de-funciones","title":"Test de funciones","text":"<p>Sup\u00f3ngase que se busca poner a prueba una funci\u00f3n como la que sigue:</p> Funcion bajo prueba<pre><code># funcion bajo prueba\ndef suma(a,b):\n    # Excepciones ante tipos de entrada incorrectos \n    if not  isinstance(a, (int, float)) or not isinstance(b, (int, float)):\n        raise ValueError(\"Los argumentos deben ser enteros o decimales\")\n    # retorno num\u00e9rico\n    return a + b\n</code></pre> <p>En este caso interesa verificar que algunas sumas de ejemplo dan valores correctos y que ante tipos de entrada incorrectos (textos, booleanos, etc ) se produce la excepci\u00f3n <code>ValueError</code>. Entonces se crea una clase con dos tests para verificar cada comportamiento por separado</p> <pre><code>class TestSuma(unittest.TestCase):\n\n    # Primer test: resultados correctos \n    def test_suma(self):\n        self.assertEqual(suma(5, 7), 12)\n        self.assertEqual(suma(-3, -9), -12)\n\n\n    # Segundo test: excepciones disparadas ante tipos de entrada err\u00f3neas\n    def test_excepciones(self):\n        with self.assertRaises(ValueError):\n            suma(\"5\", 7)\n        with self.assertRaises(ValueError):\n            suma(5, \"7\")\n        with self.assertRaises(ValueError):\n            suma(None, 7)\n</code></pre>","tags":["unittest","Tests"]},{"location":"tests/unittest/#test-de-datos","title":"Test de datos","text":"<p>Sup\u00f3ngase que se busca verificar la estructura y valores de un dicionario:</p> <pre><code>diccionario = { \n    \"id\": 31416,\n    \"user\" : \"yo\"\n    }\n</code></pre> <p>En este caso la clase requiere del m\u00e9todo de inicializaci\u00f3n <code>setUp()</code>, donde se agrega una referencia al diccionario bajo prueba. Esto permite que los tests puedan acceder a la data desde adentro del test.</p> <pre><code>class TestDiccionario(unittest.TestCase):\n\n    # Inicializacion\n    def setUp(self)-&gt;None:\n        # cargar data de entrada\n        self.data = diccionario\n\n    # primer test\n    def test_campo_existente(self):\n        # test de claves\n        self.assertIn(\"id\"  , self.data)\n        self.assertIn(\"user\", self.data)\n        # self.assertIn(\"nombre\", self.data)    # MAL: campo inexistente\n\n    # segundo test\n    def test_data_correcta(self):\n        # test de valores\n        self.assertEqual(self.data[\"id\"], 31416)\n        self.assertEqual(self.data[\"user\"], \"yo\")\n        # test de tipos\n        self.assertIsInstance(self.data[\"id\"],  int)\n        self.assertIsInstance(self.data[\"user\"], str)\n</code></pre> <p>Esta forma permite poner a prueba clases</p>","tags":["unittest","Tests"]},{"location":"tests/unittest/#ejecucion","title":"Ejecuci\u00f3n","text":"<p>La ejecuci\u00f3n de todos los tests definidos se realiza con la funci\u00f3n <code>main()</code>:</p> Ejecucion test<pre><code>unittest.main()\n</code></pre> <p>Por defecto la ejecuci\u00f3n del programa se interrumpe al ejecutar esta funci\u00f3n. Para ejecutar el test \u00fanicamente cuando la rutina se ejecute como rutina principal se agrega el condicional:</p> Ejecucion test - desde main()<pre><code>if __name__ == '__main__':\n    unittest.main()\n</code></pre> <p>Si se desea continuar la ejecuci\u00f3n de la rutina tras los test se hace el argumento <code>exit=False</code> :</p> Ejecucion test - Sin interrupci\u00f3n<pre><code>unittest.main(exit=False)\n\n# Codigo adicional\nprint(\"Test exitoso\")\n</code></pre>","tags":["unittest","Tests"]},{"location":"tests/unittest/#decoradores","title":"Decoradores","text":"<p>El m\u00f3dulo <code>unittest</code> proporciona decoradores para saltear tests o para omitir errores esperables. Los decoradores implementados en el m\u00f3dulo son los siguientes:</p> Decorador Uso <code>skip( razon )</code> Omite el test <code>skipIf( condicion , razon )</code> Omite el test s\u00f3lo si se cumple cierta condicion <code>skipUnless( condicion, razon )</code> Omite el test a menos que se cumpla cierta condicion <code>expectedFailure</code> Verifica que el error se produzca, de otro modo falla el test <p>Los decoradores del m\u00f3dulo se usan agreg\u00e1ndolos justo arriba de la definici\u00f3n del test elegido.</p> <p>Por ejemplo, si en el test de la funci\u00f3n <code>suma()</code> hay error, con el decorador <code>expectedFailure</code> se verifica que el error siga existiendo:</p> <pre><code>class TestSuma(unittest.TestCase):\n\n    @unittest.expectedFailure\n    def test_suma(self):\n        # tests con resultados correctos \n        self.assertEqual(suma( 5,  7),  12)\n        self.assertEqual(suma(-3, -9), -12)\n        self.assertEqual(suma( 2,  3),  -6)        # Error de resultado\n</code></pre> <p>Da como resultado el mensaje:</p> <pre><code>OK (expected failures=1)\n</code></pre>","tags":["unittest","Tests"]},{"location":"tests/unittest/#metodos-de-test","title":"M\u00e9todos de test","text":"","tags":["unittest","Tests"]},{"location":"tests/unittest/#uso-general","title":"Uso general","text":"M\u00e9todo Expresion equivalente <code>assertEqual(a, b)</code> <code>a == b</code> <code>assertNotEqual(a, b)</code> <code>a != b</code> <code>assertTrue(x)</code> <code>bool(x) is True</code> <code>assertFalse(x)</code> <code>bool(x) is False</code> <code>assertIs(a, b)</code> <code>a is b</code> <code>assertIsNot(a, b)</code> <code>a is not b</code> <code>assertIsNone(x)</code> <code>x is None</code> <code>assertIsNotNone(x)</code> <code>x is not None</code> <code>assertIn(a, b)</code> <code>a in b</code> <code>assertNotIn(a, b)</code> <code>a not in b</code>","tags":["unittest","Tests"]},{"location":"tests/unittest/#numeros","title":"N\u00fameros","text":"M\u00e9todo Expresion equivalente Explicaci\u00f3n <code>assertAlmostEqual(a, b)</code> <code>round(a-b, 7) == 0</code> Numeros (redondeados a 7 d\u00edgitos) iguales <code>assertNotAlmostEqual(a, b)</code> <code>round(a-b, 7) != 0</code> Numeros (redondeados a 7 d\u00edgitos) distintos <code>assertGreater(a, b)</code> <code>a &gt; b</code> <code>assertGreaterEqual(a, b)</code> <code>a &gt;= b</code> <code>assertLess(a, b)</code> <code>a &lt; b</code> <code>assertLessEqual(a, b)</code> <code>a &lt;= b</code>","tags":["unittest","Tests"]},{"location":"tests/unittest/#secuencias","title":"Secuencias","text":"M\u00e9todo Explicaci\u00f3n <code>assertRegex(s, r)</code> Patr\u00f3n encontrado en secuencia <code>assertNotRegex(s, r)</code> Patr\u00f3n no encontrado en secuencia","tags":["unittest","Tests"]},{"location":"tests/unittest/#datos-estandar","title":"Datos est\u00e1ndar","text":"M\u00e9todo Significado <code>assertMultiLineEqual(a, b)</code> strings iguales <code>assertSequenceEqual(a, b)</code> secuencias iguales <code>assertListEqual(a, b)</code> listas iguales <code>assertTupleEqual(a, b)</code> tuplas iguales <code>assertSetEqual(a, b)</code> conjuntos iguales <code>assertDictEqual(a, b)</code> diccionarios iguales <code>assertCountEqual(a, b)</code> mismos elementos en igual n\u00famero, sin importar el orden","tags":["unittest","Tests"]},{"location":"tests/unittest/#clases","title":"Clases","text":"M\u00e9todo Expresion equivalente <code>assertIsInstance(a, b)</code> <code>isinstance(a, b)</code> <code>assertNotIsInstance(a, b)</code> <code>not isinstance(a, b)</code>","tags":["unittest","Tests"]},{"location":"tests/unittest/#excepciones-warnings-logs","title":"Excepciones, warnings, logs","text":"M\u00e9todo Explicaci\u00f3n <code>assertRaises(excepcion, funcion, *args, **kargs)</code> La funci\u00f3n dispara la excepci\u00f3n <code>assertRaisesRegex(excepcion, patron, funcion, *args, **kargs)</code> La funci\u00f3n dispara la excepci\u00f3n y el mensaje coincide con el patron <code>assertWarns(warning, funcion, *args, **kargs)</code> La funci\u00f3n dispara la advertencia <code>assertWarnsRegex(warning, patron, funcion, *args, **kargs)</code> La funci\u00f3n dispara la advertencia y el mensaje coincide con el patr\u00f3n <code>assertLogs(logger, nivel)</code> El bloque <code>with</code> produce el log con nivel de al menos  el minimo indicado <code>assertNoLogs(logger, nivel)</code> El bloque <code>with</code> produce un log que no cumple con el nivel minimo indicado","tags":["unittest","Tests"]},{"location":"tests/unittest/#videos-recomendados","title":"Videos recomendados","text":"","tags":["unittest","Tests"]},{"location":"tests/unittest/#referencias","title":"Referencias","text":"<p>Documentacion oficial - Unittest</p>","tags":["unittest","Tests"]},{"location":"tiempo/","title":"Tiempo y fechas","text":"<p>Python dispone de varios m\u00f3dulos espec\u00edficos para el manejo del tiempo, las fechas y los calendarios disponibles en el sistema.</p>"},{"location":"tiempo/#contenidos","title":"Contenidos","text":"<p>{{  pagetree(siblings) }}</p>"},{"location":"tiempo/calendar/","title":"Calendario","text":"<p>El m\u00f3dulo <code>calendar</code> est\u00e1 dedicado para dibujar calendarios  en formato de texto simple o en formato HTML.</p>","tags":["calendar","Tiempo","Fechas","Clases"]},{"location":"tiempo/calendar/#ejecucion-como-modulo","title":"Ejecuci\u00f3n como m\u00f3dulo","text":"<p>Este m\u00f3dulo se puede ejecutar desde la shell para renderizar calendarios  en la terminal.</p>","tags":["calendar","Tiempo","Fechas","Clases"]},{"location":"tiempo/calendar/#calendario-completo","title":"Calendario completo","text":"<p>El calendario  requiere como argumento obligatorio  el n\u00famero del a\u00f1o pedido:</p> Calendario - A\u00f1o<pre><code>py -m calendar  nro_anio   \n</code></pre> <p>Por ejemplo el calendario del a\u00f1o 2025 se obtiene as\u00ed:</p> Calendario - A\u00f1o 2025<pre><code>py -m calendar  2025   \n</code></pre> <p>El resultado es un calendario en idioma ingl\u00e9s  y el formato predefinido del m\u00f3dulo:</p> <pre><code>      January                      February                      March\nMo Tu We Th Fr Sa Su         Mo Tu We Th Fr Sa Su         Mo Tu We Th Fr Sa Su\n       1  2  3  4  5                         1  2                         1  2\n 6  7  8  9 10 11 12          3  4  5  6  7  8  9          3  4  5  6  7  8  9\n13 14 15 16 17 18 19         10 11 12 13 14 15 16         10 11 12 13 14 15 16\n20 21 22 23 24 25 26         17 18 19 20 21 22 23         17 18 19 20 21 22 23\n27 28 29 30 31               24 25 26 27 28               24 25 26 27 28 29 30\n                                                          31\n.....\n</code></pre>","tags":["calendar","Tiempo","Fechas","Clases"]},{"location":"tiempo/calendar/#opciones","title":"Opciones","text":"<p>Las opciones de configuraci\u00f3n disponibles son las siguientes.</p> Opci\u00f3n Valor Significado <code>-e</code>, <code>--encoding</code> ejemplo: <code>utf8</code> codificaci\u00f3n de salida <code>-L</code>, <code>--locale</code> <code>en_us</code>, <code>es_ar</code>, etc lenguaje y regi\u00f3n (requiere definir codificaci\u00f3n) <code>-t</code>, <code>--type</code> <code>text</code> o <code>html</code> formato de salida: texto simple o HTML <code>-c</code>, <code>--css</code> Ruta o URL hoja de estilos CSS (s\u00f3lo para HTML) <code>-w</code>, <code>--width</code> entero N\u00ba de espacios por columna de d\u00eda semanal (default: <code>2</code>) <code>-s</code>, <code>--spacing</code> entero N\u00ba de espacios entre meses (default: <code>6</code>) <code>-l</code>, <code>--lines</code> entero N\u00ba de filas por semana (default: <code>1</code>) <code>-m</code>, <code>--months</code> entero n\u00famero de meses por fila (default: <code>3</code>) <code>-f</code>, <code>--first-weekday</code> rango <code>[0, 6]</code> primer columna (default: lunes) <p>Por ejemplo,  para renderizar  el calendario del 2025 en espa\u00f1ol de Espa\u00f1a y comenzar por los domingos se hace:</p> <p>Calendario - A\u00f1o 2025 (Espa\u00f1ol de Espa\u00f1a, comienza en domingo)<pre><code>py -m calendar 2025  -e utf8  -L es_es  -f 6\n</code></pre> As\u00ed queda:</p> <pre><code>       enero                    febrero                    marzo\ndo lu ma mi ju vi s\u00e1      do lu ma mi ju vi s\u00e1      do lu ma mi ju vi s\u00e1\n          1  2  3  4                         1                         1\n 5  6  7  8  9 10 11       2  3  4  5  6  7  8       2  3  4  5  6  7  8\n12 13 14 15 16 17 18       9 10 11 12 13 14 15       9 10 11 12 13 14 15\n19 20 21 22 23 24 25      16 17 18 19 20 21 22      16 17 18 19 20 21 22\n26 27 28 29 30 31         23 24 25 26 27 28         23 24 25 26 27 28 29\n                                                    30 31\n.....\n</code></pre>","tags":["calendar","Tiempo","Fechas","Clases"]},{"location":"tiempo/calendar/#calendario-mes-especifico","title":"Calendario - mes espec\u00edfico","text":"<p>Especificando un n\u00famero de mes  se renderiza un \u00fanico mes del calendario: </p> Calendario - A\u00f1o y mes<pre><code>py -m calendar  nro_anio  nro_mes  \n</code></pre> <p>donde el mes 1 es enero. Por ejemplo,  para renderizar el mes de marzo del 2025  se escribe:</p> Calendario - Marzo 2025 (default)<pre><code>py -m calendar  2025 3 \n</code></pre> <p>As\u00ed queda:</p> <pre><code>     March 2025\nMo Tu We Th Fr Sa Su\n                1  2\n 3  4  5  6  7  8  9\n10 11 12 13 14 15 16\n17 18 19 20 21 22 23\n24 25 26 27 28 29 30\n31\n</code></pre> <p>La mayor\u00eda de las opciones est\u00e1n habilitadas en este caso.  Por ejemplo,  para renderizar  el mes de marzo  en espa\u00f1ol de Espa\u00f1a y comenzar por los domingos se hace:</p> <p>Calendario - Marzo 2025 (espa\u00f1ol de Espa\u00f1a, comienza en domingo)<pre><code>py -m calendar 2025 3  -e utf8  -L es_es  -f 6\n</code></pre> quedando as\u00ed:</p> <pre><code>     marzo 2025\ndo lu ma mi ju vi s\u00e1\n                   1\n 2  3  4  5  6  7  8\n 9 10 11 12 13 14 15\n16 17 18 19 20 21 22\n23 24 25 26 27 28 29\n30 31\n</code></pre> <p>Sin embargo, esta opci\u00f3n no permite renderizar como HTML.</p>","tags":["calendar","Tiempo","Fechas","Clases"]},{"location":"tiempo/calendar/#uso-en-programas","title":"Uso en programas","text":"","tags":["calendar","Tiempo","Fechas","Clases"]},{"location":"tiempo/calendar/#importacion","title":"Importaci\u00f3n","text":"<p>Para su uso, el m\u00f3dulo requiere importaci\u00f3n. calendar - Importaci\u00f3n<pre><code>import calendar \n</code></pre></p>","tags":["calendar","Tiempo","Fechas","Clases"]},{"location":"tiempo/calendar/#clases","title":"Clases","text":"<p><code>calendar</code> implementa varias clases para trabajar con calendarios:</p> <ul> <li><code>Calendar</code> y <code>LocaleCalendar</code> para crear estructuras de datos;</li> <li><code>TextCalendar</code> y <code>LocaleTextCalendar</code> para renderizar en formato de texto simple;</li> <li><code>HTMLCalendar</code> y <code>LocaleHTMLCalendar</code> para renderizar en formato HTML.</li> </ul> <p>donde las clases <code>Locale</code> incluyen la opci\u00f3n del cambio de idioma.</p>","tags":["calendar","Tiempo","Fechas","Clases"]},{"location":"tiempo/calendar/#texto-simple","title":"Texto simple","text":"<p>Para crear calendarios  en formato texto se crea un objeto de las clases dedicadas:</p> Clases de texto - Ingl\u00e9s<pre><code># default: ingl\u00e9s\nclase_calendario = calendar.TextCalendar(firstweekday=6)                      \n</code></pre> Clases de texto - Lengua local<pre><code># lengua local: 'locale'\nclase_calendario = calendar.LocaleTextCalendar(firstweekday=6, locale=None)   \n</code></pre> <p>en este ejemplo se comenz\u00f3 por el domingo.</p>","tags":["calendar","Tiempo","Fechas","Clases"]},{"location":"tiempo/calendar/#calendario-completo_1","title":"Calendario completo","text":"<p>El renderizado del calendario anual se realiza con el m\u00e9todo <code>formatyear</code>:</p> Renderizado - Calendario completo<pre><code>calendario_anio = clase_calendario.formatyear(anio, w=2 , l=1, c=6, m=3)  \n</code></pre> <p>Las opciones son similares a las del uso por consola:</p> Argumento Significado <code>w</code> width: ancho de columnas <code>m</code> months: n\u00famero de meses por fila <code>l</code> lines: renglones por semana <code>c</code> columns: espacios entre columnas de meses","tags":["calendar","Tiempo","Fechas","Clases"]},{"location":"tiempo/calendar/#calendario-mes-especifico_1","title":"Calendario - mes espec\u00edfico","text":"<p>El renderizado de un mes espec\u00edfico se realiza con el m\u00e9todo <code>formatmonth</code>:</p> Renderizado - Mes espec\u00edfico<pre><code>calendario_mes  = clase_calendario.formatmonth(anio, mes, w=2 , l=1) \n</code></pre> <p>Por ejemplo, para renderizar un mes con ancho de columnas de 9 espacios:</p> <p>Ejemplo - Septiembre de 2025 (ancho custom)<pre><code>calendario_mes = calendario.formatmonth(2025, 9, w=9 , l=1)  \n</code></pre> da lugar a este resultado:</p> <pre><code>                           septiembre 2025\n domingo    lunes     martes  mi\u00e9rcoles   jueves   viernes    s\u00e1bado\n               1         2         3         4         5         6\n     7         8         9        10        11        12        13\n    14        15        16        17        18        19        20\n    21        22        23        24        25        26        27\n    28        29        30\n</code></pre>","tags":["calendar","Tiempo","Fechas","Clases"]},{"location":"tiempo/calendar/#otros-formatos","title":"Otros formatos","text":"<p>Las clases para crear estructuras y para crear HTMLs  son similares a las clases para texto  pero con algunas variantes en las opciones de configuraci\u00f3n. Ver la documentaci\u00f3n oficial para m\u00e1s detalles.</p>","tags":["calendar","Tiempo","Fechas","Clases"]},{"location":"tiempo/calendar/#referencias","title":"Referencias","text":"<p>Documentaci\u00f3n oficial - m\u00f3dulo <code>caledar</code></p>","tags":["calendar","Tiempo","Fechas","Clases"]},{"location":"tiempo/fechas/","title":"Fechas y Horario","text":"","tags":["datetime","Tiempo","Fechas","Clases"]},{"location":"tiempo/fechas/#modulo-datetime","title":"M\u00f3dulo <code>datetime</code>","text":"<p>El m\u00f3dulo datetime est\u00e1 dedicado al trabajo con fechas y horarios. Para usarlo se necesita importarlo.</p> <p>'datetime' - Importaci\u00f3n<pre><code>import datetime\n</code></pre> Al igual que en otros m\u00f3dulos se puede importar unicamente los elementos necesarios del mismo.</p> <p>En este tutorial se asume que se importan todos los elementos internos:</p> 'datetime' - Importar todo<pre><code>from datetime import datetime\n</code></pre> <p>datetime vs time</p> <p>Los m\u00f3dulos <code>datetime</code> y <code>time</code> tienen elementos que comparten nombre pero que no son compatibles entre s\u00edu. En caso de importar elementos de ambos m\u00f3dulos es mejor importarlos con su nombre de m\u00f3dulo o un alias para evitar conflictos inesperados.</p>","tags":["datetime","Tiempo","Fechas","Clases"]},{"location":"tiempo/fechas/#lectura-de-fechas","title":"Lectura de fechas","text":"<p>La clase <code>datetime</code> maneja fechas y horarios en un \u00fanico elemento</p>","tags":["datetime","Tiempo","Fechas","Clases"]},{"location":"tiempo/fechas/#fecha-y-hora-actual","title":"Fecha y hora actual","text":"<p>Este elemento dispone del m\u00e9todo <code>now()</code> para consultar fecha y hora del sistema:</p> <p>clase 'datetime' - fecha actual<pre><code>ahora = datetime.now()  #lectura fecha y hora actual (hora local)\nprint(ahora)\n</code></pre> El resultado es un objeto de tipo <code>datetime.datetime</code> cuya data es la siguiente:</p> clase 'datetime' - formato de salida<pre><code>datetime.datetime(2023, 1, 1, 3, 6, 9, 300411)\n</code></pre> <p>El objeto incluye variables internas (\"atributos\") con los par\u00e1metros temporales de la fecha y hora: a\u00f1o, mes, d\u00eda, hora, minuto, segundo y microsegundo. \u00c9stos son de s\u00f3lo lectura  y pueden ser consultados por su nombre:</p> clase 'datetime' - atributos internos<pre><code>print(ahora.year)\nprint(ahora.month)\nprint(ahora.day)\nprint(ahora.hour)\nprint(ahora.minute)\nprint(ahora.second)\n# (no hay campo para los milisegundos)\nprint(ahora.microsecond)\n</code></pre>","tags":["datetime","Tiempo","Fechas","Clases"]},{"location":"tiempo/fechas/#metodos-de-lectura","title":"M\u00e9todos de lectura","text":"<p>La clase <code>datetime</code> posee varios m\u00e9todos de lectura para extraer fecha,  hora \u00f3 ambas juntas.  Estos m\u00e9todos son <code>timestamp()</code>, <code>date()</code> y <code>time()</code>:</p> <p>M\u00e9todos de lectura<pre><code># M\u00e9todos de lectura disponibles\nfecha_hora = ahora.timestamp()    # Fecha y hora en formato POSIX\nfecha = ahora.date()         # S\u00f3lo fecha\nhora  = ahora.time()         # S\u00f3lo hora\n</code></pre> El tiempo POSIX, tambien llamado tiempo UNIX, es el tiempo en segundos transcurrido desde el 1\u00ba de enero de 1970.</p>","tags":["datetime","Tiempo","Fechas","Clases"]},{"location":"tiempo/fechas/#asignacion-de-fechas","title":"Asignacion de fechas","text":"<p>Si se necesita crear un objeto con fecha y hora particular hay que cargarlos en la clase <code>datetime</code> para crear un objeto nuevo. Los argumentos de esta funci\u00f3n son los par\u00e1metros temporales en orden: a\u00f1o, mes , d\u00eda, hora , minuto , segundo, microsegundo:</p> <p>clase 'datetime' - Asignaci\u00f3n de fechas<pre><code># conversion de fechas\nprimer_dia = datetime(2023,1,1)         # obligatorio: a\u00f1o, mes, dia\nprimer_dia = datetime(2023,1,1,3,6,9)   # opcionales: hora, minuto, segundo, etc    \n</code></pre> Los par\u00e1metros de la hora son opcionales, en tanto que los par\u00e1metros de la fecha son obligatorios.</p>","tags":["datetime","Tiempo","Fechas","Clases"]},{"location":"tiempo/fechas/#intervalos-de-tiempo","title":"Intervalos de tiempo","text":"<p>Con los objetos <code>datetime</code> se pueden calcular intervalos de tiempo con una simple resta entre objetos. En el ejemplo: tiempo transcurrido desde el \u00faltimo 1 de enero.</p> Intervalos de tiempo - c\u00e1lculo<pre><code># tiempo actual\nahora = datetime.now()\n# fecha referencia\nprimer_dia_anio = datetime(ahora.year,1,1)\n\n# Tiempo pasado desde el 1 de enero\ndiferencia_temporal = ahora - primer_dia_anio\n</code></pre> <p>El resultado es algo como el siguiente:</p> Intervalos de tiempo - resultado<pre><code>datetime.timedelta(days=23, seconds=18618, microseconds=885041)\n</code></pre>","tags":["datetime","Tiempo","Fechas","Clases"]},{"location":"tiempo/fechas/#fecha","title":"Fecha","text":"<p>La clase <code>date()</code> permite manejar fechas prefijadas:</p> Fecha prefijada<pre><code>from datetime import date\n\nfecha = date(2023,12,25)  # fecha especificada: Navidad\n\nanio = fecha.year \nmes  = fecha.month \ndia  = fecha.day \n</code></pre> <p>Con esta clase se puede leer tambi\u00e9n la hora del sistema directamente con ayuda del m\u00e9todo <code>today()</code>:</p> Fecha actual<pre><code>from datetime import date\n\nfecha_actual = date.today()      # fecha de hoy\n</code></pre>","tags":["datetime","Tiempo","Fechas","Clases"]},{"location":"tiempo/fechas/#horario","title":"Horario","text":"<p>La clase <code>time()</code> sirve para trabajar con horarios prefijados:</p> Horario prefijado<pre><code>from datetime import time\n\nhora_actual = time(17, 10, 6)       # asignacion manual\n\nhora    = hora_actual.hour\nminuto  = hora_actual.minute\nsegundo = hora_actual.second\n# hora_actual.microsecond      # no se usa\n</code></pre> <p>Esta clase no es capaz de leer la hora del sistema directamente, sino que lo hace a trav\u00e9s del objeto <code>datetime</code> y su m\u00e9todo <code>now()</code>:</p> Horario actual<pre><code>from datetime import datetime\n\nahora = datetime.now()  # lectura fecha y hora actual (hora local)\n\nhorario_actual = ahora.time()         \n</code></pre>","tags":["datetime","Tiempo","Fechas","Clases"]},{"location":"tiempo/fechas/#timedelta","title":"<code>timedelta</code>","text":"<p>La clase <code>timedelta()</code>  crea objetos que permiten calcular tiempos  entre fechas especificadas como argumento:</p> timedelta - resultado<pre><code>from datetime import timedelta\n\n# tiempos\ninicio = timedelta(0, 0, 0)\nfin    = timedelta(0, 2, 1, 7)\n\n# diferencia temporal\ndiferencia = fin - inicio     \n</code></pre> <p>El valor de la diferencia se ve as\u00ed:</p> timedelta - resultado<pre><code>datetime.timedelta(seconds=2, microseconds=7001)\n</code></pre> <p>Argumentos no ordenados</p> <p><code>timedelta</code> no tiene ordenados los argumentos.  Para imponerlos  se puede asignar cada par\u00e1metro  con su plabra reservada,  las cuales recorren el rango de los microsegundos hasta las semanas:</p> <pre><code>instante = timedelta(\n    weeks        = 1,\n    days         = 3, \n    hours        = 2, \n    minutes      = 14, \n    seconds      = 7, \n    milliseconds = 900,\n    microseconds = 815\n    )\n</code></pre>","tags":["datetime","Tiempo","Fechas","Clases"]},{"location":"tiempo/fechas/#referencias","title":"Referencias","text":"<p>Documentaci\u00f3n oficial - m\u00f3dulo <code>datetime</code></p>","tags":["datetime","Tiempo","Fechas","Clases"]},{"location":"tiempo/tiempo/","title":"Tiempo del Sistema","text":"","tags":["time","Tiempo","Procesos","Hilos","Fechas"]},{"location":"tiempo/tiempo/#modulo-time","title":"M\u00f3dulo <code>time</code>","text":"<p>Python dispone de un m\u00f3dulo est\u00e1ndar para el manejo temporal  llamado <code>time</code>.</p> <p>El m\u00f3dulo se importa por su nombre para poder ser usado:</p> time - Importaci\u00f3n<pre><code>import time\n</code></pre> <p>Por cuestiones de comodidad, en este tutorial se asume que todos los componentes del m\u00f3dulo son importados directamente: </p> time - Importar todo<pre><code>from time import *\n</code></pre>","tags":["time","Tiempo","Procesos","Hilos","Fechas"]},{"location":"tiempo/tiempo/#espera","title":"Espera","text":"<p>El m\u00f3dulo incluye una funci\u00f3n para introducir delays (retardos)  de manera intencional llamada <code>sleep()</code> (\"dormir\"):</p> retardos<pre><code>sleep(segundos)    \n</code></pre> <p>Esta funci\u00f3n afecta al thread (\"hilo\") que la invoca, suspendiendo su ejecuci\u00f3n . Pasado el tiempo indicado,  el sistema operativo  pone el hilo actual en espera para retomar su ejecuci\u00f3n.</p> <p>Tiempos de espera inexactos</p> <p>Debido a la intervenci\u00f3n del sistema operativo, la ejecuci\u00f3n de otros procesos,  las prioridades de cada uno, etc., el retardo real est\u00e1 sometido a cierto error el cual puede alcanzar varios milisegundos.</p>","tags":["time","Tiempo","Procesos","Hilos","Fechas"]},{"location":"tiempo/tiempo/#cronometrado","title":"Cronometrado","text":"","tags":["time","Tiempo","Procesos","Hilos","Fechas"]},{"location":"tiempo/tiempo/#tiempo-posix-actual-time-y-time_ns","title":"Tiempo POSIX actual - <code>time()</code> y <code>time_ns()</code>","text":"<p>El tiempo UNIX, tambi\u00e9n llamado tiempo POSIX,  es el tiempo transcurrido desde el 1 de enero de 1970 hasta el instante presente.</p> <p>Hay dos funciones que miden este par\u00e1metro directamente. Estas son <code>time()</code> y <code>time_ns()</code></p> Tiempo POSIX<pre><code>tiempo_segundos     = time()       # 'float'\ntiempo_nanosegundos = time_ns()    # 'int'\n</code></pre> <p>Mientras <code>time()</code> devuelve un n\u00famero flotante que representa el tiempo transcurrido en segundos,  <code>time_ns()</code> devuelve un entero representando el tiempo en nanosegundos. </p> <p>Medici\u00f3n de tiempo (en segundos)</p> <pre><code>from time import time\n\ninicio = time()\n\n# ....\n# (rutina)\n# ....\n\nfin    = time()\n\n# Intervalo medido - m\u00e1ximo 3 decimales\nprint(f\"Tiempo transcurrido: {(fin - inicio):.3} segundos.\")\n</code></pre>","tags":["time","Tiempo","Procesos","Hilos","Fechas"]},{"location":"tiempo/tiempo/#tiempo-de-ejecucion","title":"Tiempo de ejecuci\u00f3n","text":"<p>El m\u00f3dulo posee varias funciones  para medir los tiempos  que el programa actual le demanda al CPU para funcionar.</p> <p>Estas funciones pueden ser tanto </p> <p>Procesos e hilos</p> <p>Las rutinas m\u00e1s b\u00e1sicas de Python ocupan  un solo proceso el cual a su vez  utiliza un solo hilo (thread),  a menos que espec\u00edficamente  se ordene la creaci\u00f3n de los mismos.</p> <p>Sin embargo,  los frameworks y bibliotecas, al ser utilizados  suelen repartir las tareas  en m\u00faltiples procesos y en m\u00faltiples hilos  con el fin de mejorar el rendimiento de los programas mediante el procesamiento de bloques de c\u00f3digo en paralelo.</p>","tags":["time","Tiempo","Procesos","Hilos","Fechas"]},{"location":"tiempo/tiempo/#tiempo-de-cpu-process_time-y-process_time_ns","title":"Tiempo de CPU - <code>process_time()</code> y <code>process_time_ns()</code>","text":"<p>El tiempo de CPU es el tiempo relativo consumido por el actual proceso. Por ejemplo,  si el proceso actual consume el 15% del tiempo de ejecuci\u00f3n de un n\u00facleo del CPU entonces el tiempo de CPU ser\u00e1 0.15 segundos.</p> <p>Se dispone de dos funciones  para esta medici\u00f3n  llamadas <code>process_time()</code> y <code>process_time_ns()</code>:</p> Tiempo de CPU<pre><code>cpu_segundos     = process_time()      # `float`\ncpu_nanosegundos = process_time_ns()   # `int`\n</code></pre> <p>No se incluye el tiempo de delay  en la medici\u00f3n  porque <code>sleep()</code> libera temporalmente al CPU de tener que ejecutar el programa actual.</p>","tags":["time","Tiempo","Procesos","Hilos","Fechas"]},{"location":"tiempo/tiempo/#tiempos-de-thread-thread_time-y-thread_time_ns","title":"Tiempos de thread - <code>thread_time()</code> y <code>thread_time_ns()</code>","text":"<p>El tiempo de thread es el tiempo relativo consumido por el actual hilo de c\u00f3digo. Es an\u00e1logo al tiempo de CPU.</p> <p>Las funciones disponibles  para este prop\u00f3sito  son <code>thread_time()</code> y <code>thread_time_ns()</code>:</p> Tiempo de hilo<pre><code>hilo_segundos     = thread_time()       # 'float'\nhilo_nanosegundos = thread_time_ns()    # 'int'\n</code></pre> <p>Estas funciones tampoco miden el tiempo de sleep por los mismos motivos.</p>","tags":["time","Tiempo","Procesos","Hilos","Fechas"]},{"location":"tiempo/tiempo/#fechas-y-horarios","title":"Fechas y Horarios","text":"<p>El m\u00f3dulo <code>time</code> permite trabajar con fechas tanto en formato string  como con formato de estructura de datos. Para ello implementa la estructura <code>struct_time</code> la cual tiene los siguientes datos y valores:</p> Atributo Valores Significado <code>tm_year</code> <code>int</code> A\u00f1o <code>tm_mon</code> rango: [1, 12] Mes <code>tm_mday</code> rango: [1, 31] Dia del mes <code>tm_hour</code> rango: [0, 23] Hora <code>tm_min</code> rango: [0, 59] Minuto <code>tm_sec</code> rango: [0, 61] Segundo <code>tm_wday</code> rango: [0, 6]; el Lunes es 0 D\u00eda de la semana <code>tm_yday</code> rango: [1, 366] D\u00eda del a\u00f1o <code>tm_isdst</code> 0, 1 o -1 Daylight Saving Time (DLS) <code>tm_zone</code> <code>str</code> Abreviacion del nombre de zona <code>tm_gmtoff</code> <code>int</code> offset respecto a UTC (en segundos) <p>El DLS (Daylight Saving Time) es la correcci\u00f3n de horario en base a la las horas de luz del territorio.</p>","tags":["time","Tiempo","Procesos","Hilos","Fechas"]},{"location":"tiempo/tiempo/#salida-como-estructura-gmtime-y-localtime","title":"Salida como estructura - <code>gmtime()</code> y <code>localtime()</code>","text":"<p>Estas funciones  devuelven una estructura de datos  llamada <code>struct_time</code> con toda la informaci\u00f3n de la fecha y hora actual :</p> fecha y hora - instante actual<pre><code>data_tiempo = gmtime()       # UTC\ndata_tiempo = localtime()    # seg\u00fan hora local del sistema\n</code></pre> <p>Si se les pasa un n\u00famero como argumento, estas funciones asumir\u00e1n que el argumento es el tiempo POSIX medido en segundos  y devolver\u00e1n la fecha equivalente :</p> fecha y hora - tiempo POSIX<pre><code>tiempo_posix:   float\ndata_tiempo = gmtime(    tiempo_posix )   # UTC\ndata_tiempo = localtime( tiempo_posix )   # seg\u00fan hora local del sistema\n</code></pre> <p>Ambas funciones devuelven una estructura de datos como la siguiente:</p> fecha y hora - fecha (estructura)<pre><code>time.struct_time(tm_year=2025, tm_mon=1, tm_mday=23, tm_hour=23, tm_min=5, tm_sec=41, tm_wday=3, tm_yday=23, tm_isdst=0)      \n</code></pre> <p>Estos datos pueden consultarse uno a uno por su nombre:</p> fecha y hora - campos disponibles<pre><code>anio = data_tiempo.tm_year\nmes  = data_tiempo.tm_mon\ndia  = data_tiempo.tm_mday\n# ....\n</code></pre>","tags":["time","Tiempo","Procesos","Hilos","Fechas"]},{"location":"tiempo/tiempo/#salida-como-texto-ctime-y-asctime","title":"Salida como texto - <code>ctime()</code> y <code>asctime()</code>","text":"<p>Con estas funciones se  obtiene la fecha actual en formato <code>str</code>:</p> <pre><code>texto_tiempo = ctime()        # seg\u00fan hora local del sistema\ntexto_tiempo = asctime()      # seg\u00fan hora local del sistema\n</code></pre> <p>El resultado es la fecha y hora del sistema:</p> <pre><code>'Thu Jan 23 22:24:24 2025'\n</code></pre> <p>Estas funciones devuelven tambi\u00e9n  la fecha y hora del instante indicado como argumento. <code>ctime()</code> requiere el instante definido como n\u00famero: </p> <pre><code>segundos_posix:  int = 1e6            # tiempo elegido \ntexto_tiempo = ctime(segundos_posix)    \n</code></pre> <p>entonces el resultado es algo como esto:</p> <pre><code>'Mon Jan 12 10:46:40 1970'\n</code></pre> <p>En cambio, <code>asctime()</code> requiere el instante definido como estructura:</p> <pre><code>data_tiempo: struct_time          # tiempo elegido  \ntexto_tiempo = asctime( data_tiempo )   \n</code></pre>","tags":["time","Tiempo","Procesos","Hilos","Fechas"]},{"location":"tiempo/tiempo/#salida-como-posix-mktime","title":"Salida como POSIX - <code>mktime()</code>","text":"<p><code>mktime()</code> convierte la estructura de entrada  para devolver el tiempo  medido en formato POSIX:</p> <pre><code>data_tiempo: str_time\ntiempo_segundos = mktime(data_tiempo)   \n</code></pre>","tags":["time","Tiempo","Procesos","Hilos","Fechas"]},{"location":"tiempo/tiempo/#conversion-como-string-con-formato-strftime","title":"Conversi\u00f3n como string con formato - <code>strftime()</code>","text":"<p><code>strftime()</code> permite definir el formato de salida de la fecha que se le indica. Ejemplo de uso:</p> <p><pre><code>tiempo_segundos = gmtime()\nstring_fecha = strftime(\"%a, %d %b %Y %H:%M:%S +0000\", tiempo_segundos)\n</code></pre> que devuelve algo como esto: <pre><code>Fri, 24 Jan 2025 04:14:36 +0000\n</code></pre></p> <p>Para m\u00e1s informaci\u00f3n ver la tabla de opciones desde la p\u00e1gina oficial.</p>","tags":["time","Tiempo","Procesos","Hilos","Fechas"]},{"location":"tiempo/tiempo/#conversion-de-string-a-estructura-strptime","title":"Conversi\u00f3n de string a estructura - <code>strptime()</code>","text":"<p>Esta funci\u00f3n es complementaria a <code>strftime()</code>  y permite convertir un string  con un formato de fecha espec\u00edfico a una estructura de datos.</p> <pre><code>data_fecha = strptime(\"30 Nov 00\", \"%d %b %y\")    \n</code></pre> <p>N\u00f3tese que se necesitan dos argumentos:</p> <ul> <li>El texto con la fecha y hora pedidos;</li> <li>El formato exacto del texto ingresado.</li> </ul>","tags":["time","Tiempo","Procesos","Hilos","Fechas"]},{"location":"tiempo/tiempo/#referencias","title":"Referencias","text":"<p>Documentaci\u00f3n oficial - modulo <code>time</code></p>","tags":["time","Tiempo","Procesos","Hilos","Fechas"]},{"location":"blog/archivo/2025/05/","title":"mayo 2025","text":""},{"location":"blog/archivo/2024/12/","title":"diciembre 2024","text":""},{"location":"blog/category/python/","title":"Python","text":""}]}